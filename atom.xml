<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fossi</title>
  
  <subtitle>学习技术一口吃不成胖子，慢慢走，每天只要进步一丢丢！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-13T05:35:58.293Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fossi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1、项目初始化相关基础知识</title>
    <link href="http://yoursite.com/2019/04/13/mmall-front/1%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/13/mmall-front/1、项目初始化相关基础知识/</id>
    <published>2019-04-13T05:35:03.320Z</published>
    <updated>2019-04-13T05:35:58.293Z</updated>
    
    <content type="html"><![CDATA[<p>主要用的是commonJS+webpack来实现一个商城前端，由于是后端入门，因此有必要先对用到的东西给进行简单的介绍。</p><a id="more"></a><h2>1.git仓库</h2><p>这一块就比较简单了，对于git的安装以及ssh key的配置就不再赘述了，只说明一下比较重要的几个命令。在github上创建好对应的项目之后，比如我这里的：<a href="https://github.com/sunweiguo/mmall-front-study" target="_blank" rel="noopener">https://github.com/sunweiguo/mmall-front-study</a></p><p>第一步：<code>git clone https://github.com/sunweiguo/mmall-front-study.git</code></p><p>这样，就拉到本地了。下面就可以在本地开发，先不说提交的事情，先说一说另一种情况。</p><p>比如我一开始本地自己新建一个文件夹叫做：<code>mmall-front=study</code>，在里面我新建一个文件叫做<code>test.html</code>。此时我想把这个目录下的文件也放到git仓库中如何做呢？</p><p>第一步git初始化这个目录：<code>git init</code></p><p>第二步就是将本地这个目录与远程仓库对应上：<code>git remote add origin https://github.com/sunweiguo/mmall-front-study.git</code></p><p>第三步是从远程的master分支拉取代码下来：<code>git pull origin master</code></p><p>下面就是提交目录下面的东西了，步骤都是一样的：</p><p>第一步：<code>git add .</code></p><p>第二步：<code>git commit -am 'xxx'</code></p><p>第三步：<code>git push (--set-upstram origin master)</code></p><p>这样就提交远程仓库成功了。</p><p>如果要切换分支，假设这个分支还不存在：<code>git checkout -b m_v1.0</code>，解释一下，<code>checkout</code>表示切换分支，<code>-b</code>表示这个分支还不存在，需要新建。</p><p>查看分支：<code>git b</code>.</p><h2>2.项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└─── view</span><br><span class="line">└─── page</span><br><span class="line">└─── service</span><br><span class="line">└─── util</span><br><span class="line">└─── image</span><br></pre></td></tr></table></figure><h2>3.commonJS</h2><p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。</p><p>根据<code>CommonJS</code>规范，一个单独的文件就是一个模块。</p><p>加载模块使用<code>require</code>方法，该方法读取一个文件并执行，最后返回文件内部的<code>exports</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addition.js</span></span><br><span class="line"></span><br><span class="line">exports.do = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123; <span class="keyword">return</span> a + b &#125;;</span><br></pre></td></tr></table></figure><p>上面的语句定义了一个加法模块，做法就是在<code>exports</code>对象上定义一个do方法，那就是供外部调用的方法。使用的时候，只要用<code>require</code>函数调用即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./addition'</span>);</span><br><span class="line"></span><br><span class="line">add.do(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p><h2>4.webpack</h2><p>感觉这一篇文章写的不错：<a href="https://segmentfault.com/a/1190000007238519" target="_blank" rel="noopener">前端工程化——Webpack入门使用</a>。</p><p>简单来说，就是一切都可以当成模块，<code>require</code>引入，不是<code>js</code>的通过<code>loader</code>解释一下，然后打包到一个<code>js</code>文件，<code>html</code>页面在<code>script</code>引入它。</p><h2>5.nodejs&amp;npm</h2><p>构建工具webpack依赖于nodejs环境，nodejs是一个基于谷歌的V8引擎的javascript运行环境，用的是一个事件驱动的、非阻塞的IO模型，适用于低运算高IO的场景，比如聊天室。</p><p>而NPM是什么呢？它其实一个资源库，拥有世界上最大的开源库，因此你想要用什么库基本都能找到。因此应用比较广泛。</p><h2>6.fiddler</h2><p>是一个抓包工具，也可以用作代理工具。代理是什么？就是中间多了一个代理商，帮助我们处理请求：</p><p><img src="http://bloghello.oursnail.cn/mmall-front-1-1.jpg" alt="image"></p><p>代理工具有什么用呢？比如我这里的mmall这个项目，本地开发都是<code>localhost:8080</code>去请求前端的资源，但是如果此时后端接口假如是<code>api.mmall.com</code>，那么就会产生跨域问题，此时，我们访问前端资源还用<code>localhost</code>这个域名，但是当访问后端接口的时候，就可以对这个<code>localhost</code>进行劫持，将其改为<code>api.mmall.com</code>，这样完美解决了开发环境中跨域问题。</p><h2>7.项目初始化</h2><p>首先在准备好上面工作之后，其实也没啥，就是git处理完成之后，在项目目录下执行<code>npm init</code>，会提示你输入一些信息，都是无关紧要的东西，比如我的：</p><p>我的环境都是在windows下，我的nodejs版本是8.11.1,出问题后面再改。npm版本是5.6.0。webpack版本是1.15.0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (mmall-front-study)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: mmall前端</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository: (https://github.com/sunweiguo/mmall-front-study.git)</span><br><span class="line">keywords:</span><br><span class="line">author: fossi</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to F:\git-code\mmall-front-study\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mmall-front-study&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;mmall前端&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https://github.com/sunweiguo/mmall-front-study.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;fossi&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/sunweiguo/mmall-front-study/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/sunweiguo/mmall-front-study#readme&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure><p>全局安装<code>webpack</code>：<code>npm install -g webpack@^1.15.0</code>。</p><p>我们可以试一下demo:</p><p>比如比较简单的情况，就是单一的文件。比如一个入口文件index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cats = <span class="built_in">require</span>(<span class="string">'./cats.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cats);</span><br></pre></td></tr></table></figure><p>这里引用的cats.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cats = [<span class="string">'dace'</span>,<span class="string">'henry'</span>,<span class="string">'martha'</span>];</span><br><span class="line"><span class="built_in">module</span>.exports = cats;</span><br></pre></td></tr></table></figure><p>此时，我们可以用命令行规定一个入口文件以及输出文件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack ./src/page/index/index.js ./dist/app.js</span><br></pre></td></tr></table></figure><p>顺利的话就会看到生成一个dist文件夹，里面有一个app.js文件，但是这种方式比较简单，不能增加一些其他高级的东西，因此推荐下一种方式。</p><p>我们设置一个配置文件叫做：<code>webpack.config.js</code>文件作为打包的入口文件。里面的内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'./src/page/index/index.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">path: <span class="string">'./dist'</span>,</span><br><span class="line">filename: <span class="string">'app.js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>命令行直接输入<code>webpack</code>即可。入门的使用到此结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要用的是commonJS+webpack来实现一个商城前端，由于是后端入门，因此有必要先对用到的东西给进行简单的介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mmall-front" scheme="http://yoursite.com/tags/mmall-front/"/>
    
  </entry>
  
  <entry>
    <title>13-抽象工厂模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/11-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/11-抽象工厂模式/</id>
    <published>2019-04-05T08:13:48.782Z</published>
    <updated>2019-04-05T08:14:41.769Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之抽象工厂模式，支持一个工厂生产多个产品。</p><a id="more"></a><h2>定义</h2><ul><li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口</li><li>无须指定他们具体的类</li><li>创建型</li><li>优点：无须关心创建细节、<strong>将一个系列的产品族统一到一起创建</strong></li><li>缺点：增加了系统的抽象性和理解难度；规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口</li><li>美的冰箱和海尔冰箱是同一个产品等级，但是美的冰箱和美的空调是同一个产品族</li></ul><p><img src="http://bloghello.oursnail.cn/pattern11-1.png" alt="image"></p><p>那么，工厂方法针对的是产品等级结构，就是竖着的。抽象工厂针对的是产品族，是横着的。</p><p>记法：<strong>不同工厂同一个产品是统一产品等级；同一个工厂不同产品集合是产品族</strong>。</p><p>产品族是针对某个工厂而言，这个工厂里面会有很多产品；</p><h2>例子</h2><p>场景：java教程包含两个东西：java视频+java手记；python教程包含两个东西：python视频+python手记</p><p>那么，java视频和java手记是一个产品族；</p><p>python视频和python手记是一个产品族；</p><p>java视频和python视频是同一个产品等级；</p><p>java手记和python手记是同一个产品等级；</p><p>OK，分别创建一个视频的抽象类<code>Vedio</code>和手记的抽象类<code>Article</code>（定义生产产品族的抽象类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vedio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别创建java视频类、java手记类、python视频类、python手记类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVedio</span> <span class="keyword">extends</span> <span class="title">Vedio</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产java视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产java手记"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVedio</span> <span class="keyword">extends</span> <span class="title">Vedio</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产python视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产python手记"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了具体的产品之后，先创建一个总工厂确定生产的产品族，然后分别创建java工厂和python工厂去实现它（每个工厂都生产这个产品族）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Vedio <span class="title">getVedio</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Article <span class="title">getArticle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vedio <span class="title">getVedio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVedio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vedio <span class="title">getVedio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVedio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CourseFactory javaCourseFactory = <span class="keyword">new</span> JavaCourseFactory();</span><br><span class="line">        CourseFactory pythonCourseFactory = <span class="keyword">new</span> PythonCourseFactory();</span><br><span class="line">        javaCourseFactory.getArticle().produce();</span><br><span class="line">        javaCourseFactory.getVedio().produce();</span><br><span class="line"></span><br><span class="line">        pythonCourseFactory.getArticle().produce();</span><br><span class="line">        pythonCourseFactory.getVedio().produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">生产java手记</span><br><span class="line">生产java视频</span><br><span class="line">生产python手记</span><br><span class="line">生产python视频</span><br></pre></td></tr></table></figure><p>我们可以分析一下，如果此时要增加前端的课程，那么就会非常方便，无非是增加一个前端视频类和前端手记类：<code>FEVedio</code>和<code>FEArticle</code>，然后创建一个<code>FECourseFactory</code>这个类来生产这两个产品即可。其实，就是说，抽象工厂模式对于产品族的扩展是非常友好的。结合具体实例，比如我这里有了海尔工厂和美的工厂，他们都生产冰箱和空调。此时我要新添加一个品牌，比如是松下工厂，那么就可以很方便地扩展松下的产品族。符合开闭原则。不需要动其他工厂以及这个工厂对应的产品族。</p><p>每个工厂只生产产品族，就是说美的的工厂只生产美的的空调和冰箱；海尔的工厂只生产海尔的空调和冰箱。那么，我要获取海尔冰箱，我不需要关心如何创建这个冰箱，我只需要知道海尔这个工厂即可。</p><p>但是，显然，<strong>这里我们需要固定住<code>CourseFactory</code>，这个相当于是抽象工厂，确定了一个工厂能生产的东西，比如美的工厂，现在<code>CourseFactory</code>只能规定去生产空调和冰箱，但是如果美的要扩张业务，要去生产洗衣机，那么就需要修改<code>CourseFactory</code>这个类，继而其他的工厂也都要去改变。</strong></p><p>对应到这里的场景，我的产品等级情况是：java视频和python视频是同一个产品等级；java手记和python手记是同一个产品等级；如果要规定，课程不仅需要有视频和手记，还需要有解答区，那么此时，就是需要修改<code>CourseFactory</code>，将会要修改很多地方。</p><p>所以，<strong>⭐抽象工厂适合于产品等级基本不变的场景</strong>（即每个工厂要生产什么基本先确定下来），对于增加产品族（多一家工厂加盟）是完全支持扩展的。</p><p><img src="http://bloghello.oursnail.cn/pattern11-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之抽象工厂模式，支持一个工厂生产多个产品。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>12-工厂方法模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/10-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/10-工厂方法模式/</id>
    <published>2019-04-05T08:08:04.763Z</published>
    <updated>2019-04-05T08:08:37.032Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之工厂方法模式。</p><a id="more"></a><h2>定义</h2><ul><li>定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行</li><li>创建型</li><li>优点：用户只用关心所需产品对应的工厂，无须关心创建细节；加入新产品符合开闭原则</li><li>美的冰箱和海尔冰箱是同一个产品等级，但是美的冰箱和美的空调是同一个产品族</li></ul><h2>例子</h2><p>其实用代码展示就会非常简单，业务场景还是上一节中的课程。</p><p>回顾一下简单工厂，它的原理是由一个工厂来负责对象的创建，不符合开闭原则。那么为了解决这个扩展性问题，所以升级为工厂方法模式。</p><p>首先定义一个接口或者抽象类，我这里定义一个抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoProduceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Video <span class="title">getVideo</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我要有一个创建java课程的工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVeidoFactory</span> <span class="keyword">extends</span> <span class="title">VideoProduceFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要创建python，那么我也创建一个工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVeidoFactory</span> <span class="keyword">extends</span> <span class="title">VideoProduceFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子，简单工厂中在工厂中创建对象的时机推迟到其子类中，有利于扩展性。但是我们会发现，一个工厂生产一种产品，这里是<code>Vedio</code>，那么对于实际场景，比如美的这个企业，它不仅生产各种空调，还有各种冰箱，那么此时就不能满足我们的需求了，这就是抽象工厂要实现的功能，下节再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之工厂方法模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>11-简单工厂模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/09-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/09-简单工厂模式/</id>
    <published>2019-04-05T07:00:15.342Z</published>
    <updated>2019-04-05T07:00:53.422Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之简单工厂模式。</p><a id="more"></a><h2>定义</h2><ul><li>由一个工厂对象决定创建出哪一种产品类的实例</li><li>创建型，但不属于23种设计模式</li></ul><h2>适用场景</h2><ul><li>工厂类负责创建的对象比较少</li><li>客户端只知道传入工厂的参数，对于如何创建对象不关心</li><li>只需要传入一个正确的参数，就可以获取你所需要的对象而无须知道其创建细节</li><li>缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，违背了开闭原则</li></ul><h2>例子</h2><p><img src="http://bloghello.oursnail.cn/uml9-1.png" alt="image"></p><p>场景：由很多的课程，比如有java和python的课程。具体的生产过程可以放在这个工厂里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建java课程..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建python课程..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoProduceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"java"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"python"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的测试类直接通过这个工厂来生产即可，不需要依赖具体的课程类了。</p><h2>改进</h2><p>上面的工厂方法是根据传入的名字来获取对应的实例的，一旦出现新增，是必然要修改这个工厂类的，并且传入的字符串还要做异常处理。这里用反射进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Video <span class="title">getVideoByClass</span><span class="params">(Class c)</span></span>&#123;</span><br><span class="line">    Video video = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        video = (Video) Class.forName(c.getName()).newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> video;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VideoProduceFactory factory = <span class="keyword">new</span> VideoProduceFactory();</span><br><span class="line">        Video video = factory.getVideoByClass(PythonVideo.class);</span><br><span class="line">        video.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>应用</h2><p>比如JDK中的<code>Calendar</code>这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是根据地区获取实例。</p><p><img src="http://bloghello.oursnail.cn/uml9-2.png" alt="image"></p><p>还有比较典型的是获取mysql驱动：Class.forName(“com.mysql.jdbc.driver”);</p><h2>总结</h2><p>简单工厂非常简单，但是缺点也显而易见，比如我这里新增一个算法课，那么就需要修改这个工厂类。不符合开闭原则。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之简单工厂模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>08-软件设计七大原则-组合聚合复用原则</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/08-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E7%BB%84%E5%90%88%E8%81%9A%E5%90%88%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/08-软件设计七大原则-组合聚合复用原则/</id>
    <published>2019-04-05T06:39:41.771Z</published>
    <updated>2019-04-05T06:40:08.111Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是组合聚合复用原则。</p><a id="more"></a><h2>定义</h2><ul><li>尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的</li><li>优点：可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少</li><li>继承使白箱复用；组合聚合是黑箱复用。</li><li>聚合：has-A;组合：contains-A；继承：is-A</li><li>聚合：电脑和U盘，两者可以独立</li><li>组合：国和家，没有国就没有家</li></ul><h2>例子</h2><p>首先一个场景，是获取数据库连接，定义一个获取连接的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mysql数据库连接。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我的产品需要获取这个数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String conn = <span class="keyword">super</span>.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"获取"</span>+conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果我可能要在多个数据之间切换呢？直接改不符合开闭原则，显然这个代码需要重构，将其用组合聚合来重构，定义一个抽象类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mysql数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlConnection</span> <span class="keyword">extends</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mysql数据库连接..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Oracle数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span> <span class="keyword">extends</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Oracle数据库连接..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品获取数据库连接，这里是用了组合模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewProductDao</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NewDBConnection dbConnection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbConnection</span><span class="params">(NewDBConnection dbConnection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbConnection = dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String conn = dbConnection.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"获取"</span>+conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，就可以在应用层进行切换了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewProductDao productDao = <span class="keyword">new</span> NewProductDao();</span><br><span class="line">        productDao.setDbConnection(<span class="keyword">new</span> MysqlConnection());</span><br><span class="line">        productDao.addProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/pattern8-1.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是组合聚合复用原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>07-软件设计七大原则-里氏替换原则</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/07-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/07-软件设计七大原则-里氏替换原则/</id>
    <published>2019-04-05T06:16:37.138Z</published>
    <updated>2019-04-05T06:17:06.511Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是里氏替换原则。</p><a id="more"></a><h2>定义</h2><ul><li>如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2时类型T1的子类型。</li><li>一个软件实体如果适用于一个父类的话，那么一定适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。（所以避免子类覆盖父类的方法，而是子类新增方法满足实现）</li><li>引申意义：子类可以扩展父类的功能，但不能改变父类原有的功能</li><li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的<strong>输入参数更宽松</strong></li><li>当子类的方法实现父类的方法时（重写/重载或实现实现抽象方法），方法的后置条件（即方法的输出/返回值）要<strong>比父类返回值更严格或相等</strong>。</li></ul><h2>例子1</h2><p>我们都知道，正方形是特殊的长方形，那么正方形是长方形的子类。但是对于某种场景，这种继承关系是不符合里氏替换原则的。我先定义一个长方形类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个正方形类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sideLength;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSideLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sideLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSideLength</span><span class="params">(<span class="keyword">int</span> sideLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sideLength = sideLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSideLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLength(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSideLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLength(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，场景是判断宽度小于等于长度的话，宽度则加一。测试长方形是OK的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle rectangle)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(rectangle.getWidth() &lt;= rectangle.getLength())&#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"宽度为："</span>+rectangle.getWidth()+<span class="string">",长度为:"</span>+rectangle.getLength());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是测试正方形的时候，就会死循环了，因为一直都满足这个条件。也就是说正方形这个子类替换掉父类的长方形类时，程序出错了，不满足里氏替换原则了。</p><h2>例子2</h2><p>子类的方法入参要比父类的宽松。</p><p>定义一个基类Base：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HashMap map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base is running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个子类Child：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child hashmap is running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(Map map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child map is running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        child.hello(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果肯定打印： child hashmap is running…</p><p>但是如果我将子类重写的方法删除呢？结果是： base is running</p><p>如果反过来，父类入参是Map，子类重载的方法入参是HashMap,那么就会执行这个重载的方法。在业务开发中，这样子可能会造成业务逻辑的混乱。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是里氏替换原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019年，答辩顺利结束！</title>
    <link href="http://yoursite.com/2019/04/04/suibi/2019%E5%B9%B4%EF%BC%8C%E7%AD%94%E8%BE%A9%E9%A1%BA%E5%88%A9%E7%BB%93%E6%9D%9F%EF%BC%81/"/>
    <id>http://yoursite.com/2019/04/04/suibi/2019年，答辩顺利结束！/</id>
    <published>2019-04-04T13:42:55.174Z</published>
    <updated>2019-04-04T13:43:41.868Z</updated>
    
    <content type="html"><![CDATA[<p>2019.4.3答辩顺利结束，过程比我想象中更加顺利，内心十分开心。</p><a id="more"></a><p>本科四年+硕士两年半，终于要毕业了，2019.4.3号通过了最终的答辩，答辩结束现场的留念：</p><p><img src="http://bloghello.oursnail.cn/%E7%AD%94%E8%BE%A9%E7%BB%93%E6%9D%9F%E7%95%99%E5%BD%B1.jpg" alt="image"></p><p>感谢导师，感谢同门，感谢室友，感谢家人。（疑惑为什么大家都一致地丧脸，笑哭脸）</p><p>下面就是再整理整理材料，准备谢师宴以及最后的毕业典礼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019.4.3答辩顺利结束，过程比我想象中更加顺利，内心十分开心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>06-软件设计七大原则-迪米特原则</title>
    <link href="http://yoursite.com/2019/04/04/design-pattern/06-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/04/design-pattern/06-软件设计七大原则-迪米特原则/</id>
    <published>2019-04-04T13:09:46.105Z</published>
    <updated>2019-04-04T13:10:18.128Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是迪米特原则。</p><a id="more"></a><h2>定义</h2><ul><li>一个对象应该对其他对象保持最少的了解，又叫最少知道原则。</li><li>尽量降低类与类之间的耦合</li><li>优点：降低类之间的耦合</li><li>强调：只和朋友交流，不和陌生人交流（朋友类：出现在这个类的成员变量上，方法输入，方法的返回类型；而出现在方法体内部的类不属于朋友类）</li></ul><p>可能对于最后的强调有点疑惑，下面举例说明。</p><h2>例子</h2><p>假设一个场景，是一个boss要技术主管查询一下线上上线的课程有哪些。</p><p>定义一个课程类，里面啥都不写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>定义一个boss类，让技术主管告诉他上线的课程的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(TeamLeader teamLeader)</span></span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            courses.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        teamLeader.getCourseNumber(courses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个TeamLeader类，用于查询数量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TeamLeader &#123;</span><br><span class="line">    public void getCourseNumber(List&lt;Course&gt; courses) &#123;</span><br><span class="line">        System.out.println(courses.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类里面打印即可。乍看没什么问题，但是我们分析一下：boss其实根本不需要管course类，我只要问技术主管即可，而技术主管通过一些手段去查询。但是我们现在的这个程序的问题是：boss类里面的方法体里面有了他根本就不需要关心的course类。关系是：</p><p><img src="http://bloghello.oursnail.cn/uml6-1.png" alt="image"></p><p>我们再来分析一下boss的朋友，根据上面强调的规则，teamleader为方法的入参，是boss的朋友，返回值为void的，不谈。没有成员变量。方法体里面的是course，不是boss的朋友，所以这个course我们是不是可以放在teamleader这个类里面呢？</p><p>将boss类改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(TeamLeader teamLeader)</span></span>&#123;</span><br><span class="line">        teamLeader.getCourseNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将统计的具体细节移动到teamleader里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCourseNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            courses.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(courses.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系变为：</p><p><img src="http://bloghello.oursnail.cn/uml6-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是迪米特原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>07-dubbo高可用相关</title>
    <link href="http://yoursite.com/2019/04/04/dubbo/07-dubbo%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/04/04/dubbo/07-dubbo高可用相关/</id>
    <published>2019-04-04T13:02:32.263Z</published>
    <updated>2019-04-04T13:04:06.906Z</updated>
    
    <content type="html"><![CDATA[<p>分布式系统对高可用比较讲究，本文来探讨探讨。</p><a id="more"></a><h2>一、zookeeper高可用</h2><p>通过实验可以发现，在正常调用服务之后，注册中心突然挂了，也不影响继续消费dubbo暴露出来的服务。</p><p>注册中心不是挂了吗，为什么还能继续调用服务呢？</p><p>原因是dubbo中做了健壮性处理，简单来说就是每个dubbo的消费方自己会缓存通讯的信息，即使注册中心挂了，通过这个缓存也可以找到对应的Provider继续消费。具体机制如下：</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p>并且之前也提过，dubbo支持直连，在消费方的注解中形如<code>@Reference(url=&quot;ip:port&quot;)</code>即可绕过注册中心直接连接到对应的服务去消费。 因此如果没有注册中心的情况下，也可以调用服务。</p><h2>二、负载均衡</h2><table><thead><tr><th>策略名称</th><th>策略描述</th></tr></thead><tbody><tr><td>Random</td><td>随机，按权重设置随机概率</td></tr><tr><td>RoundRobin</td><td>轮询，按公约后的权重设置轮询比率</td></tr><tr><td>LeastActive</td><td>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差</td></tr><tr><td>ConsistentHash</td><td>一致性hash，相同参数的请求总是发到同一个提供者</td></tr></tbody></table><p>对于<code>Random</code>,在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p>对于<code>RoundRobin</code>，存在慢的提供者累积请求的问题，比如某一台服务器比较慢，请求卡在这一台服务器上。</p><p>对于<code>LeastActive</code>,使慢的提供者收到更少请求，因为越慢的提供者的调用前后奇数差越大</p><p>配置：</p><ul><li>服务端服务级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>客户端服务级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>服务端方法级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class="line">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class="line">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure><ul><li>客户端方法级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class="line">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class="line">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure><p><strong>一般场景下，配置Provider端的负载均衡</strong>。值得注意的是，如果我们需要对随机或者轮询增加权重，则可以直接在控制台上实现，非常方便，如图：</p><p><img src="http://bloghello.oursnail.cn/dubbo7-1.jpg" alt="image"></p><h2>三、服务降级</h2><p>什么是服务降级？</p><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>比如某一台服务器上，有三个服务：用户服务、订单服务以及广告服务。当遇到流量激增的情况时，CPU百分百，内存百分百，整个服务器处于要崩溃的边缘，处理请求及其缓慢，此时我们必须要牺牲某些服务，释放出资源，比如我们可以选择将不是太核心的广告服务先停掉，保全其他核心的用户服务以及订单服务。广告服务降级后，可以直接返回一个简单的内容。（这里其实是指：<strong>消费方不再去远程调用这个广告服务了，直接返回一个结果给客户即可</strong>，这样，广告服务可以暂时将服务器资源让出来）</p><p>当然，还有另一种场景，也是类似，即服务调用失败，要么抛出异常要么超时，总之不能正常拿到结果了，此时我们也应该制定一个策略，使其不要返回错误，可以直接在消费方返回null或者默认的结果。这样就可以达到不重要的服务不可稳定时不会对调用方产生影响。</p><p>dubbo如何实现的呢？其实操作起来非常简单，就是在dubbo的控制台就可以完成设置了。我们来到消费者页面，</p><p><img src="http://bloghello.oursnail.cn/dubbo7-2.jpg" alt="image"></p><p>图中是第一个服务是订单服务，它要调用用户服务。那么如果我选择是的屏蔽，那么这个订单服务将停止调用所有其他的服务，直接返回空。</p><p><img src="http://bloghello.oursnail.cn/dubbo7-3.jpg" alt="image"></p><p>如果选择的是容错，那么订单服务在调用其他服务的时候发现其他服务报错或者超时，就返回空。</p><p><img src="http://bloghello.oursnail.cn/dubbo7-4.jpg" alt="image"></p><h2>四、服务容错</h2><p>在集群调用失败时，<code>Dubbo</code> 提供了多种容错方案，缺省为 <code>failover</code> 重试。</p><ul><li><code>Failover Cluster</code></li></ul><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Failfast Cluster</code></li></ul><p><strong>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</strong></p><ul><li><code>Failsafe Cluster</code></li></ul><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><ul><li><code>Failback Cluster</code></li></ul><p><strong>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</strong></p><ul><li><code>Forking Cluster</code></li></ul><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p><ul><li><code>Broadcast Cluster</code></li></ul><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p>集群模式配置按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2>五、Hystrix</h2><p>由于dubbo对于服务降级和容错等做的比较简单，因此在实际开发中，是用<code>Hystrix</code>来实现服务容错的。也是<code>spring cloud</code>中默认的服务容错组件。在<a href="http://fossi.oursnail.cn/2019/02/21/weather-for-spring-cloud/11.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">11.天气预报系统-熔断机制</a>中对其进行了介绍和简单实用。核心就是<code>@HystrixCommand</code>这个注解，添加这个注解之后这个方法就被<code>hystrix</code>代理了，从而实现对这个方法的一个监控。基本的使用就不再赘述了，比较简单，就是添加依赖-开启<code>hystrix</code>-<code>HystrixCommand</code>这个即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式系统对高可用比较讲究，本文来探讨探讨。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>010-linked-list-cycle-ii</title>
    <link href="http://yoursite.com/2019/03/26/leetcode-classic/010-linked-list-cycle-ii/"/>
    <id>http://yoursite.com/2019/03/26/leetcode-classic/010-linked-list-cycle-ii/</id>
    <published>2019-03-26T06:57:10.687Z</published>
    <updated>2019-03-26T06:59:46.995Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第十题，在第九题的基础上判断环的入口位置。</p><a id="more"></a><h2>题目描述</h2><p>Given a linked list, return the node where the cycle begins. If there is no cycle, returnnull.</p><p><img src="http://bloghello.oursnail.cn/leetcode10-1.jpg" alt="image"></p><p>Follow up:</p><p>Can you solve it without using extra space?</p><h2>解题思路</h2><ul><li>同linked-list-cycle一题，使用快慢指针方法，判定是否存在环，并记录两指针相遇位置(Z)；</li><li>将两指针分别放在链表头(X)和相遇位置(Z)，并改为相同速度推进，则两指针在环开始位置相遇(Y)</li></ul><p><img src="http://bloghello.oursnail.cn/leetcode10-2.jpg" alt="image"></p><p>X,Y,Z分别为链表起始位置，环开始位置和两指针相遇位置。</p><p>由于快指针速度为慢指针速度的两倍，那么这个慢指针最多走圆的一圈（这里想象极端情况，就是整个链表就是一个环，那么两个指针从圆的同一个地方出发，那么此时何时相遇呢？必然是慢指针正好才走一圈的时候，快指针走两圈追上来了）。</p><p>所以这里假设就是在Z相遇的，那么慢指针走的距离是a+b，很好计算。而快指针走的距离是2(a+b)，此时我们想象，假设慢指针走到了X和Z的中间的时候，快指针已经到Z了，那么下面再走的话，就是快指针从Z点出发围着圆绕几圈之后恰好在Z点和X相遇，因此快指针走过的距离是：</p><blockquote><p>2(a+b) = a+b+n*圆的周长 = a+b+n(b+c)</p></blockquote><p>此时a为:</p><blockquote><p>a = (n - 1) * b + n * c = (n - 1)(b + c) +c</p></blockquote><p>从公式上看，当一个指针从X出出发，走完a的距离之后，那么另一个指针从相遇点Z出发就会走(n-1)圈的环再加一个C的距离，此时正好在Y点相遇。</p><p>因此，一个指针从头出发，一个指针从相遇点出发，速度相同，相遇点就是环的入口节点。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一快一慢两指针先找到相遇点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//万一没有环的话直接直接返回Null了</span></span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一个从head开始一步一步走，一个从相遇点开始一步一步走，再相遇就是环的入口位置</span></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第十题，在第九题的基础上判断环的入口位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>009-linked-list-cycle</title>
    <link href="http://yoursite.com/2019/03/26/leetcode-classic/009-linked-list-cycle/"/>
    <id>http://yoursite.com/2019/03/26/leetcode-classic/009-linked-list-cycle/</id>
    <published>2019-03-26T06:19:52.584Z</published>
    <updated>2019-03-26T06:20:22.724Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第九题，求证一个链表是否有环。</p><a id="more"></a><h2>题目描述</h2><p>Given a linked list, determine if it has a cycle in it.</p><p>Follow up:</p><p>Can you solve it without using extra space?</p><h2>解题思路</h2><p>环的长度就是快指针比慢指针多走的长度，因此快慢指针如果能相遇，那么表明有环，否则就表示没有环。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第九题，求证一个链表是否有环。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>008-Reorder-List</title>
    <link href="http://yoursite.com/2019/03/25/leetcode-classic/008-Reorder%20List/"/>
    <id>http://yoursite.com/2019/03/25/leetcode-classic/008-Reorder List/</id>
    <published>2019-03-25T02:03:34.299Z</published>
    <updated>2019-03-25T02:04:57.203Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第八题，将链表以规定形式重新排列。</p><a id="more"></a><h2>题目描述</h2><p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,</p><p>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p><p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p><p>Example 1:</p><blockquote><p>Given 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</p></blockquote><p>Example 2:</p><blockquote><p>Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</p></blockquote><h2>解题思路</h2><p>将链表后半部进行反转，同时夹逼遍历即可。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.快慢指针，快指针到链表尾的时候慢指针恰好到链表的中间</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.利用中间指针将链表切分为两个链表</span></span><br><span class="line">        ListNode after = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.将后半部链表反转</span></span><br><span class="line">        <span class="keyword">while</span>(after != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode afterNext = after.next;</span><br><span class="line">            after.next = pre;</span><br><span class="line">            pre = after;</span><br><span class="line">            after = afterNext;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.分别遍历两个链表即可</span></span><br><span class="line">        ListNode n1 = head;</span><br><span class="line">        ListNode n2 = pre;</span><br><span class="line">        <span class="keyword">while</span>(n1 != <span class="keyword">null</span> &amp;&amp; n2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode n1Next = n1.next;</span><br><span class="line">            ListNode n2Next = n2.next;</span><br><span class="line">            n1.next = n2;</span><br><span class="line">            n1 = n1Next;</span><br><span class="line">            n2.next = n1;</span><br><span class="line">            n2 = n2Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第八题，将链表以规定形式重新排列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>007-binary-tree-preorder-traversal</title>
    <link href="http://yoursite.com/2019/03/24/leetcode-classic/007-binary-tree-preorder-traversal/"/>
    <id>http://yoursite.com/2019/03/24/leetcode-classic/007-binary-tree-preorder-traversal/</id>
    <published>2019-03-24T11:32:49.517Z</published>
    <updated>2019-03-24T11:33:15.363Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第七题，指定非递归来实现二叉树的前序遍历。</p><a id="more"></a><h2>题目描述</h2><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>For example:</p><p>Given binary tree{1,#,2,3},</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>return[1,2,3].</p><p>Note: Recursive solution is trivial, could you do it iteratively?</p><h2>解题思路</h2><p>同上题，只需要稍微换一下位置即可，十分方便。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String str;</span><br><span class="line">    <span class="keyword">public</span> TreeNode node;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(String str,TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Command&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,root));</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            Command c = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(c.str == <span class="string">"print"</span>)&#123;</span><br><span class="line">                res.add(c.node.val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(c.node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                   stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,c.node.right));</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(c.node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                  stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,c.node.left));</span><br><span class="line">               &#125;</span><br><span class="line">               stack.push(<span class="keyword">new</span> Command(<span class="string">"print"</span>,c.node)); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第七题，指定非递归来实现二叉树的前序遍历。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>06-dubbo基本配置之本地存根</title>
    <link href="http://yoursite.com/2019/03/24/dubbo/06-dubbo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E6%A0%B9/"/>
    <id>http://yoursite.com/2019/03/24/dubbo/06-dubbo基本配置之本地存根/</id>
    <published>2019-03-24T11:17:53.906Z</published>
    <updated>2019-03-24T11:23:32.554Z</updated>
    
    <content type="html"><![CDATA[<p>本文再来了一个dubbo的特性：本地存根。</p><a id="more"></a><h2>本地存根</h2><p>远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 <code>ThreadLocal</code> 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 <code>Stub</code>，客户端生成 <code>Proxy</code> 实例，会把 <code>Proxy</code> 通过构造函数传给 <code>Stub</code> ，然后把 <code>Stub</code> 暴露给用户，<code>Stub</code> 可以决定要不要去调 <code>Proxy</code>。</p><p><img src="http://bloghello.oursnail.cn/dubbo6-1.jpg" alt="image"></p><p>简单而言就是，所有的逻辑都在<code>provider</code>这一端实现了，<code>consumer</code>只能调用，那么能不能在调用前先判断一下呢？比如我希望传入的名字是<code>fossi</code>说明接头成功，否则你就是特务我不跟你bb，直接返回一句脏话。</p><p>由于<code>srpingboot</code>的注解方式一直没搞成功，所以我将<code>comsumer</code>端搞成了xml方式实现，具体代码见<a href="https://github.com/sunweiguo/dubbo-example/tree/%E6%9C%AC%E5%9C%B0%E5%AD%98%E6%A0%B9demo" target="_blank" rel="noopener">本地存根demo分支</a></p><p>主要就是在<code>consumer</code>里面写一个<code>StubService</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StubService</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DemoService demoService;</span><br><span class="line">    <span class="comment">//dubbo的代理对象自动传进来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StubService</span><span class="params">(DemoService demoService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"本地存根开始执行..."</span>);</span><br><span class="line">        <span class="keyword">if</span>(name.equalsIgnoreCase(<span class="string">"fossi"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你就是fossi啊，对对对"</span>);</span><br><span class="line">            <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"你他娘不是fossi!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你搞错了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.njupt.swg.DemoService"</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">stub</span>=<span class="string">"com.njupt.swg.service.StubService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后分别启动，在浏览器输入：<code>http://localhost:8080/test/fossi</code>显示<code>Hello, fossi</code>;但是当我输入<code>http://localhost:8080/test/hh</code>显示<code>你搞错了</code>；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文再来了一个dubbo的特性：本地存根。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>05-dubbo基本配置之超时、重试、多版本</title>
    <link href="http://yoursite.com/2019/03/24/dubbo/05-dubbo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B9%8B%E8%B6%85%E6%97%B6%E3%80%81%E9%87%8D%E8%AF%95%E3%80%81%E5%A4%9A%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/03/24/dubbo/05-dubbo基本配置之超时、重试、多版本/</id>
    <published>2019-03-24T11:14:56.259Z</published>
    <updated>2019-03-24T11:15:22.342Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo的基本配置还有一些，本文逐一来攻克</p><a id="more"></a><h2>一、超时机制</h2><p>如果没有超时机制，那么服务提供者一旦出现问题，十几秒才给响应，服务消费者线程大量阻塞等待，就会造成很大的问题，因此，超时时间的配置一定是dubbo考虑的问题。</p><p><img src="http://bloghello.oursnail.cn/dubbo5-1.jpg" alt="image"></p><p>其中，服务提供方配置，这个时间是指通过 URL 经由注册中心传递给消费方。</p><p>如何配置，这张图说明了，优先级是从上往下依次下降。也就是说，有两大原则：</p><ul><li>方法级优先，接口级次之，全局配置再次之。</li><li>如果级别一样，则消费方优先，提供方次之。</li></ul><p>其它 <code>retries</code>, <code>loadbalance</code>, <code>actives</code> 等类似。并且<code>dubbo</code>默认有一个超时时间就是<code>1000ms</code>。</p><p>（建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置）。</p><p>⭐<code>springboot</code>中配置差不多，形如：<code>@Service(timeout = 3000)</code>.但是对于这种方式我们似乎不能再精确到方法级别上了。</p><h2>二、重试机制</h2><p>写法与上面的<code>timeout</code>类似，就是<code>retries=&quot;3&quot;</code>表示默认的连接依次之外，如果出现意外还可以再次连接三次，那么总次数就是4次。</p><p>当服务的提供方有多台呢？那么就会去一台一台地试而不是在一棵树上吊死。</p><p>额外需要注意的一点使重试机制不能放在非幂等的接口上。</p><p>⭐<code>springboot</code>中配置差不多，形如<code>@Service(retries = 3)</code></p><h2>三、多版本</h2><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><p>在低压力时间段，先升级一半提供者为新版本<br>再将所有消费者升级为新版本<br>然后将剩下的一半提供者升级为新版本<br>老版本服务提供者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>新版本服务提供者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>老版本服务消费者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>新版本服务消费者配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果不需要区分版本，随机选择一个都行，可以按照以下的方式配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>⭐<code>springboot</code>中配置差不多，形<code>@Service(version = &quot;1.0&quot;)</code></p><h2>四、三种方式整合springboot</h2><p>我们之前整合<code>springboot</code>的方式是：引入<code>dubbo-starter</code>，在<code>application.properties</code>文件中配置属性，用<code>@Service</code>暴露服务，用<code>@Reference</code>来使用服务。最后用<code>@EnableDubbo</code>来启动<code>dubbo</code>功能。这个注解点进去看是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@EnableDubboConfig</span></span><br><span class="line"><span class="meta">@DubboComponentScan</span></span><br></pre></td></tr></table></figure><p>包含了包扫描的功能。这种自动扫描包可以换成在配置文件中指定扫描位置：<code>dubbo.scan.base-packages=xxx</code>即可。</p><p>现在我们遇到一个问题，就是传统的xml可以做到精确的方法级别的配置，但是上一种方式是无法做到的，那么如何才能做到对方法级别的控制呢？</p><p>其实我们还是可以将传统的xml文件拷贝到我们的<code>resources</code>文件夹下，一个字都不用动，只需要将<code>@EnableDubbo</code>注解以及暴露服务用的<code>@Service</code>都注释掉，换成：<code>@ImportResource(locations=&quot;classpath:provider.xml&quot;)</code>即可。我们来改造之前的<code>provider-service</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"provider-service"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://127.0.0.1:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.njupt.swg.DemoService"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.njupt.swg.service.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接监控中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在版本<code>&lt;dubbo.starter.version&gt;0.2.1.REALEASE&lt;/dubbo.starter.version&gt;</code>和<code>&lt;dubbo.version&gt;2.6.5&lt;/dubbo.version&gt;</code>中一直报错，莫名其妙，无奈我降级为<code>&lt;dubbo.starter.version&gt;0.2.0&lt;/dubbo.starter.version&gt;</code>和<code>&lt;dubbo.version&gt;2.6.2&lt;/dubbo.version&gt;</code>启动成功。这个代码存放在<a href="https://github.com/sunweiguo/dubbo-example/tree/dubbo2.6.2" target="_blank" rel="noopener">2.6.2分支代码</a>中。</p><p>这是第二种方式。我们引入的话虽说是完美融合了两者，但是作为一个<code>springboot</code>使用者，再用回去好像很奇怪，本来就是为了免去注解，但是这个时候又引入注解，搞成了四不像。下面就要介绍第三种方式了，就是注解的方式，简单来说就是用一个<code>config</code>来代替这个xml中所有的标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationConfig <span class="title">applicationConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationConfig config = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        config.setName(<span class="string">"provider-service"</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegistryConfig <span class="title">registryConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RegistryConfig config = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        config.setProtocol(<span class="string">"zookeeper"</span>);</span><br><span class="line">        config.setAddress(<span class="string">"127.0.0.1:2181"</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的配置都同理，这样在<code>spring</code>容器启动的时候就自动把这些配置加载进来，达到了相同的效果。这里我嫌麻烦就没去验证。其中方法级的配置，对应的xml是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.njupt.swg.DemoService"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何改写呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServiceConfig&lt;DemoService&gt; <span class="title">demoServiceConfig</span><span class="params">(DemoService demoService)</span></span>&#123;</span><br><span class="line">    ServiceConfig&lt;DemoService&gt; config = <span class="keyword">new</span> ServiceConfig&lt;&gt;();</span><br><span class="line">    config.setInterface(DemoService.class);</span><br><span class="line">    config.setRef(demoService);</span><br><span class="line">    <span class="comment">//配置方法信息</span></span><br><span class="line">    MethodConfig methodConfig = <span class="keyword">new</span> MethodConfig();</span><br><span class="line">    methodConfig.setName(<span class="string">"sayHello"</span>);</span><br><span class="line">    methodConfig.setTimeout(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//method放到ServiceConfig中</span></span><br><span class="line">    config.setMethods(Arrays.asList(methodConfig));</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了手动注册的功能，就是第三种实现方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbo的基本配置还有一些，本文逐一来攻克&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>04-dubbo基本特性之启动检查</title>
    <link href="http://yoursite.com/2019/03/24/dubbo/04-dubbo%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%E4%B9%8B%E5%90%AF%E5%8A%A8%E6%A3%80%E6%9F%A5/"/>
    <id>http://yoursite.com/2019/03/24/dubbo/04-dubbo基本特性之启动检查/</id>
    <published>2019-03-24T11:13:26.051Z</published>
    <updated>2019-03-24T11:14:26.131Z</updated>
    
    <content type="html"><![CDATA[<p>我们首先来看看第一个比较重要的dubbo特性：启动检查特性。</p><a id="more"></a><h2>一、启动时检查</h2><p><code>Dubbo</code> 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 <code>Spring</code> 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 <code>Spring</code> 容器是懒加载的，或者通过 <code>API</code> 编程延迟引用服务，请关闭 <code>check</code>，否则服务临时不可用时，会抛出异常，拿到 <code>null</code> 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><h2>二、xml文件配置启动时不检查</h2><p>关闭某个服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭所有服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭注册中心启动时检查 (注册订阅失败时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2>三、dubbo.properties配置启动时不检查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dubbo.reference.com.foo.BarService.check=false</span><br><span class="line">dubbo.reference.check=false</span><br><span class="line">dubbo.consumer.check=false</span><br><span class="line">dubbo.registry.check=false</span><br></pre></td></tr></table></figure><h2>四、通过 -D 参数配置启动时不检查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Ddubbo.reference.com.foo.BarService.check=false</span><br><span class="line">java -Ddubbo.reference.check=false</span><br><span class="line">java -Ddubbo.consumer.check=false </span><br><span class="line">java -Ddubbo.registry.check=false</span><br></pre></td></tr></table></figure><p>其中：<code>dubbo.registry.check=false</code>，前面两个都是指订阅成功，但提供者列表是否为空是否报错，如果注册订阅失败时，也允许启动，需使用此选项，将在后台定时重试。</p><p>还是建议开着，因为在上线的时候不会因为一个服务未启动而导致出现线上BUG.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们首先来看看第一个比较重要的dubbo特性：启动检查特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>03-dubbo实战</title>
    <link href="http://yoursite.com/2019/03/24/dubbo/03-dubbo%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2019/03/24/dubbo/03-dubbo实战/</id>
    <published>2019-03-24T06:30:41.215Z</published>
    <updated>2019-03-24T06:33:38.650Z</updated>
    
    <content type="html"><![CDATA[<p>本文整合spring boot2.x和dubbo2.6.5版本，新版本才出来，暂时先不管他，包括全新的控制台也暂时不管。</p><a id="more"></a><h2>一、传统xml方式</h2><p>一个服务者，一个消费者，服务者将服务注册到<code>Registry</code>，这个用<code>zookeeper</code>来实现。</p><p>服务者：服务层，即<code>taotao-manager-service</code>的<code>applicationContext-service.xml</code>将接口注册到<code>zookeeper</code>上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发布dubbo服务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"taotao-manager"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册中心的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"ip address:2181"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.njupt.swg.service.ItemService"</span> <span class="attr">ref</span>=<span class="string">"itemServiceImpl"</span> <span class="attr">timeout</span>=<span class="string">"300000"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>消费者：表现层，即<code>taotao-manager-web的apringmvc.xml</code>中订阅到注册上去的服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用dubbo服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"taotao-manager-web"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"ip地址:2181"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.njupt.swg.service.ItemService"</span> <span class="attr">id</span>=<span class="string">"itemService"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>主要就是以上几个配置，截取于淘淘商城某笔记。依赖就是dubbo和zookeeper客户端。这个就不做了，下面直接上springboot.具体可参考官方文档：<a href="https://dubbo.incubator.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">快速启动</a>以及<a href="https://dubbo.incubator.apache.org/zh-cn/docs/user/references/xml/dubbo-service.html" target="_blank" rel="noopener">schemal含义</a></p><h2>二、springboot2.x+dubbo2.6.5实战</h2><p>本节的代码为：<a href="https://github.com/sunweiguo/dubbo-example" target="_blank" rel="noopener">dubbo-example</a></p><h5>1、创建聚合工程</h5><p>创建一个父亲项目，管理pom，所有的<code>modules</code>都受其管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.njupt.swg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-example<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-example<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">curator-framework.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">curator-framework.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.starter.version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">dubbo.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.6.5<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dubbo-springboot--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--curator相关，操作zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5>2、公共的API接口</h5><p>新创建一个<code>module</code>叫做<code>dubbo-api</code>，里面放的是公共的调用接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5>3、服务提供者</h5><p>首先就是pom文件，处理继承父类意外，额外需要注意的是需要依赖于上面一个公共的接口工程，由于API工程是以jar形式存在，所以跟引用普通jar文件一样去依赖它：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.njupt.swg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，服务提供者就可以用这个接口了，后面的消费者也一样，就可以拿到这个接口去消费了。这里先完成服务提供者的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.njupt.swg.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dubbo的注解，表示暴露服务</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//如果这个组件还要被作为bean使用，则开源用@Component来让spring扫描到，再写个@Service会比较模糊</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;dubbo.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s] : Hello, %s"</span>, serviceName, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的注解<code>@Service</code>不是<code>spring</code>中的包注解，而是<code>dubbo</code>中用于暴露服务出去的注解，所以千万不要搞错。需要注意的是，如果还是需要将其作为<code>spring</code>的一个<code>bean</code>的话，则可以用<code>@Component</code>来注解，避免混淆。</p><p>另外最需要注意的就是配置文件了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot 应用名称</span><br><span class="line">spring.application.name=provider-service</span><br><span class="line">server.port=9001</span><br><span class="line"></span><br><span class="line"># Dubbo服务名称</span><br><span class="line">## The default value of dubbo.application.name is $&#123;spring.application.name&#125;</span><br><span class="line">dubbo.application.name=provider-service</span><br><span class="line"></span><br><span class="line"># 通信使用dubbo协议，端口为20880</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=20880</span><br><span class="line"></span><br><span class="line"># 以zookeeper为注册中心</span><br><span class="line">dubbo.registry.address=127.0.0.1:2181</span><br><span class="line">dubbo.registry.protocol=zookeeper</span><br><span class="line"></span><br><span class="line"># monitor监控台</span><br><span class="line">dubbo.monitor.protocol=registry</span><br></pre></td></tr></table></figure><p>这些其实跟传统的xml配置方式是一样的，所以大体都是一样的。最后在启动函数上添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br></pre></td></tr></table></figure><p>这样启动服务提供者，不报错的话，那么在服务管理中心就可以查看到这个服务已经起来了，加上我们已经准备好的<code>monitor</code>，此时应该有两个服务在上面了。</p><h5>4、服务消费者</h5><p>关于配置文件、pom文件以及启动函数上的注解都跟上面类似，不再赘述。下面直接尝试去调用服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.njupt.swg.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String res = demoService.sayHello(<span class="string">"fossi!"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的<code>@Reference</code>不要引用错了。启动，此时不出意外的话，应该在服务治理页面上会看到如下：</p><p><img src="http://bloghello.oursnail.cn/dubbo3-1.jpg" alt="image"></p><p>我们来消费一下：</p><p><img src="http://bloghello.oursnail.cn/dubbo3-2.jpg" alt="image"></p><p>监控台也可以接受到消费的信息：</p><p><img src="http://bloghello.oursnail.cn/dubbo3-3.jpg" alt="image"></p><p>这样，一次完整的服务提供和消费的实战就完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整合spring boot2.x和dubbo2.6.5版本，新版本才出来，暂时先不管他，包括全新的控制台也暂时不管。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>006-binary-tree-postorder-traversal</title>
    <link href="http://yoursite.com/2019/03/23/leetcode-classic/006-binary-tree-postorder-traversal/"/>
    <id>http://yoursite.com/2019/03/23/leetcode-classic/006-binary-tree-postorder-traversal/</id>
    <published>2019-03-23T12:48:36.882Z</published>
    <updated>2019-03-23T12:49:32.403Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第六题，指定非递归来实现二叉树的后序遍历。</p><a id="more"></a><h2>题目描述</h2><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>For example:</p><p>Given binary tree{1,#,2,3},</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>return[3,2,1].</p><p>Note: Recursive solution is trivial, could you do it iteratively?</p><h2>解题思路</h2><p>就是二叉树的后序遍历，它的意思是，递归程序没啥意思，要不你用非递归来实现一个？</p><p>我们知道，递归就是系统栈实现的，那么其实对于本题，我倾向于自己用一个栈来模拟系统栈，这样，无论是前序中序还是后序，改代码跟递归版本是一样，具有较强的通用性，至于另外的解法，每种都不一样，导致不好记忆。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String str;</span><br><span class="line">    <span class="keyword">public</span> TreeNode node;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(String str,TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Command&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//遇到“go”则添加左右孩子以及自己入栈</span></span><br><span class="line">        <span class="comment">//遇到“print”则添加进结果集</span></span><br><span class="line">        stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,root));</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            Command c = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(c.str == <span class="string">"go"</span>)&#123;</span><br><span class="line">                <span class="comment">//先自己</span></span><br><span class="line">                stack.push(<span class="keyword">new</span> Command(<span class="string">"print"</span>,c.node));</span><br><span class="line">                <span class="comment">//再右</span></span><br><span class="line">                <span class="keyword">if</span>(c.node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,c.node.right));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//再左</span></span><br><span class="line">                <span class="keyword">if</span>(c.node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> Command(<span class="string">"go"</span>,c.node.left));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//出栈的顺序必然是左-右-中，即后序遍历顺序</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(c.node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要想改成前序或者中序遍历，只需要将<code>stack.push(new Command(&quot;print&quot;,c.node));</code>调换一下位置即可，十分方便，这样对递归的实现原理的理解也加深了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第六题，指定非递归来实现二叉树的后序遍历。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>005-insertion-sort-list</title>
    <link href="http://yoursite.com/2019/03/23/leetcode-classic/005-insertion-sort-list/"/>
    <id>http://yoursite.com/2019/03/23/leetcode-classic/005-insertion-sort-list/</id>
    <published>2019-03-23T12:07:23.540Z</published>
    <updated>2019-03-23T12:08:07.033Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第五题，指定用插入排序对链表进行排序。</p><a id="more"></a><h2>题目描述</h2><p>Sort a linked list using insertion sort.</p><h2>解题思路</h2><p>解题思路就是根据插入排序的思想，每次遍历都保证前n个数都是排好序的，那么按照原生的插入排序，是从当前元素前一个元素开始一个一个往前判断，只要比前面元素小，则往前移动，一直移动到有一个元素小于它或者移动到头部了则停止，这个位置就是当前元素在这一趟中应该在的位置。但是链表中不好往前移，只能每次都从头部开始往后判断，一直找到第一个比当前元素大的元素停止，然后调整一下指针，就是让当前元素插入到本趟合适的位置。由于有可能要与第一个元素交换，所以搞一个虚拟头节点处理起来会简单一点。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.判断一下</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.新建一个虚拟节点，后面要用</span></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.curr指向的节点及其后面所有节点都是未排序的，前面的都是排好序的</span></span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//4.每次循环，pre都重新指向dummy，dummy后一个节点到curr前一个节点都是排好序的</span></span><br><span class="line">            ListNode pre = dummy;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//5.保存一下当前节点后面一个节点的引用</span></span><br><span class="line">            ListNode next = curr.next;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//6.每次都从dummy节点下一个开始找，前面都是排好序的，如果小于当前节点则指针后移，一直找到pre.next为空</span></span><br><span class="line">            <span class="comment">//或者比当前节点大的时候，停止，表明pre的下一个节点就是当前节点应该放的位置</span></span><br><span class="line">            <span class="keyword">while</span>(pre.next != <span class="keyword">null</span> &amp;&amp; pre.next.val &lt; curr.val)&#123;</span><br><span class="line">                pre = pre.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//7.找到当前节点应该放的位置之后，下面的工作就是移动指针，让curr插到pre和pre.next中间</span></span><br><span class="line">            <span class="comment">//然后让curr后移一位，前面都是排好序的</span></span><br><span class="line">            curr.next = pre.next;</span><br><span class="line">            pre.next = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//8.dummy后面就是我们所需要的用插入排序排好序的链表</span></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第五题，指定用插入排序对链表进行排序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>02-搭建注册中心和控制台</title>
    <link href="http://yoursite.com/2019/03/23/dubbo/02-%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    <id>http://yoursite.com/2019/03/23/dubbo/02-搭建注册中心和控制台/</id>
    <published>2019-03-23T09:40:08.242Z</published>
    <updated>2019-03-24T03:39:38.028Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了dubbo基本的架构之后，我们先学会使用它，会使用了才有可能理解它的原理。本节先来搭建注册中心和dubbo的可视化控制台界面，为后续的dubbo应用的搭建做好准备。</p><a id="more"></a><h2>一、注册中心</h2><p>打开官方文档，我们会看到dubbo支持很多种注册中心，但是它写了：**推荐使用 Zookeeper 注册中心。**关于zookeeper我已经做了系统学习。</p><p><a href="https://dubbo.incubator.apache.org/zh-cn/docs/user/references/registry/zookeeper.html" target="_blank" rel="noopener">zookeeper 注册中心</a>详细说明了zk的作用以及代码中客户端的使用。</p><p><img src="http://bloghello.oursnail.cn/dubbo2-1.jpg" alt="image"></p><p>我们知道zk是一颗树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心</p><p>流程说明：</p><ul><li>服务提供者启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li><li>服务消费者启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li><li>监控中心启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址。</li></ul><p>支持以下功能：</p><ul><li>当提供者出现断电等异常停机时，注册中心能自动删除提供者信息</li><li>当注册中心重启时，能自动恢复注册数据，以及订阅请求</li><li>当会话过期时，能自动恢复注册数据，以及订阅请求</li><li>当设置 &lt;dubbo:registry check=“false” /&gt; 时，记录失败注册和订阅请求，后台定时重试</li><li>可通过 &lt;dubbo:registry username=“admin” password=“1234” /&gt; 设置 zookeeper 登录信息</li><li>可通过 &lt;dubbo:registry group=“dubbo” /&gt; 设置 zookeeper 的根节点，不设置将使用无根树</li><li>支持 * 号通配符 &lt;dubbo:reference group=&quot; * &quot; version=&quot; * &quot; /&gt;，可订阅服务的所有分组和所有版本的提供者</li></ul><p><code>Dubbo</code> 支持 <code>zkclient</code> 和 <code>curator</code> 两种 <code>Zookeeper</code> 客户端实现。</p><h2>二、zookeeper 安装</h2><p>就在windows下先安装练习吧！其他系统的也差不多。</p><p>注意一下直接启动不行的，要将<code>conf</code>下的<code>zoo_sample.cfg</code>改为<code>zoo.cfg</code>才行，默认的端口是2181，注意修改一下临时数据存放的路径。这些修改完成之后，windows下就可以直接在命令行中用<code>zkServer.cmd</code>启动了。</p><h2>三、new dubbo admin</h2><p>什么是<code>dubbo admin</code>？是图形化服务管理页面，安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/incubator-dubbo-ops.git</span><br><span class="line">cd incubator-dubbo-ops</span><br><span class="line">mvn clean package</span><br><span class="line">cd dubbo-admin-distribution/target</span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br></pre></td></tr></table></figure><p>访问http://localhost:8080即可。</p><p><img src="http://bloghello.oursnail.cn/dubbo2-2.jpg" alt="image"></p><p>我们看到克隆下来之后其实有三个文件：<code>dubbo-admin-distribution</code>，<code>dubbo-admin-server</code>，<code>dubbo-admin-ui</code>，根据官网介绍，我们只需要对第一个进行打包然后<code>java -jar</code>即可。后面两个是前后端分离的部署方式。所以我们主要来看看<code>dubbo-admin-server</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin.config-center=zookeeper://127.0.0.1:2181</span><br><span class="line">admin.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">admin.metadata-report.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>三个配置项分别指定了配置中心，注册中心和元数据中心的地址。这个以后再去了解。OK，下一节来看看dubbo的<code>provider</code>和<code>consumer</code>是如何暴露服务以及消费服务的。</p><p>以上为新版的管理控制台，但是我看还是develop分支，说明还不是很稳定，文档啥的也不是很全，就暂时不入坑了。我们还是回到2.6版本。上一版本，admin管理台和monitor监控是分开的。这里说一下老版本的admin。</p><h2>四、old dubbo admin</h2><p>下载地址：<a href="http://bloghello.oursnail.cn/incubator-dubbo-ops-master.zip" target="_blank" rel="noopener"><br>incubator-dubbo-ops-master.zip</a></p><p>主要是先关注里面的<code>dubbo-admin</code>，他就是老版本服务治理的管理页面。注意源码里面里面的<code>application.properties</code>中连接zk的信息，匹配即可。先启动zk，然后对这个文件夹打包运行。默认是用<code>localhost:7001</code>打开。需要额外输入用户名和密码，默认都是<code>root</code>。</p><p><img src="http://bloghello.oursnail.cn/dubbo2-3.jpg" alt="image"></p><p>下面我就还是用这个版本对服务进行管理吧！</p><h2>五、dubbo-monitor-simple</h2><p>这是一个简单的监控中心。</p><p>在<code>incubator-dubbo-ops-master</code>文件夹下有一个文件叫做<code>dubbo-monitor-simple</code>，进行<code>mvn package</code>之后为：</p><p><img src="http://bloghello.oursnail.cn/dubbo2-4.jpg" alt="image"></p><p>将其拷贝到另外一个地方解压。里面有三个文件夹，有一个是<code>conf</code>文件夹，我们编辑<code>dubbo.properties</code>这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dubbo.container=log4j,spring,registry,jetty-monitor</span><br><span class="line">dubbo.application.name=simple-monitor</span><br><span class="line">dubbo.application.owner=dubbo</span><br><span class="line">#dubbo.registry.address=multicast://224.5.6.7:1234</span><br><span class="line">//ZK的地址</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">#dubbo.registry.address=redis://127.0.0.1:6379</span><br><span class="line">#dubbo.registry.address=dubbo://127.0.0.1:9090</span><br><span class="line">//与本控制台通信的端口</span><br><span class="line">dubbo.protocol.port=7070</span><br><span class="line">//可视化界面的访问端口</span><br><span class="line">dubbo.jetty.port=8080</span><br><span class="line">dubbo.jetty.directory=$&#123;user.home&#125;/monitor</span><br><span class="line">dubbo.charts.directory=$&#123;user.home&#125;/monitor/charts</span><br><span class="line">dubbo.statistics.directory=$&#123;user.home&#125;/monitor/statistics</span><br><span class="line">dubbo.log4j.file=logs/dubbo-monitor-simple.log</span><br><span class="line">dubbo.log4j.level=WARN</span><br></pre></td></tr></table></figure><p>一切没有问题，来到<code>assembly.bin</code>下去启动吧！启动成功的话为：</p><p><img src="http://bloghello.oursnail.cn/dubbo2-5.jpg" alt="image"></p><p>下面进行实操并且结合这边搭建的监控台一起观察观察。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍了dubbo基本的架构之后，我们先学会使用它，会使用了才有可能理解它的原理。本节先来搭建注册中心和dubbo的可视化控制台界面，为后续的dubbo应用的搭建做好准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
</feed>
