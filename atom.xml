<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fossi</title>
  
  <subtitle>但行好事，莫问前程；前路有光，莫忘初心。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-10T04:35:03.049Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fossi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringTask的基本使用</title>
    <link href="http://yoursite.com/2019/08/10/miscellany/19SpringTask%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/10/miscellany/19SpringTask的基本使用/</id>
    <published>2019-08-10T04:34:16.666Z</published>
    <updated>2019-08-10T04:35:03.049Z</updated>
    
    <content type="html"><![CDATA[<p>工作中经常会用到定时任务，有的用<code>linux</code>的<code>crontab</code>来实现系统级别的定时调用，当然这种只能调用脚本，不能在我们的程序中实现高度灵活的配置。定时任务的实现有很多，我之前也做过一些笔记，因为在分布式应用中，定时需要小心处理，否则会很容易地出现数据错乱，因此出现了很多适用于分布式场景定时器。当然分布式不在本文讨论范围，这里只想聊聊简单的单机应用，而且是最简单的<code>Spring Task</code>。</p><img src="http://bloghello.oursnail.cn/suibi4-1.png" width="300"><a id="more"></a><h2>一、基本使用</h2><p>使用起来十分简单，在ssm的工程中不需要额外引入其他的依赖即可使用。因为已经在<code>Spring-Context</code>中集成。</p><p><img src="http://bloghello.oursnail.cn/suibi4-2.png" alt="image"></p><p>第一步是配置文件中开启定时任务的注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入spring task定时任务--&gt;</span><br><span class="line">&lt;task:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p>在头部引入相应的DTD约束文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/task</span><br><span class="line">http://www.springframework.org/schema/task/spring-task-3.0.xsd</span><br></pre></td></tr></table></figure><p>配置方面就结束了。</p><p>下面写一个定时任务吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔一分钟从数据库读取一下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/1 * * * ? "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIntervalFromDatabase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一分钟执行一次~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这里的<code>cron</code>表达式，相信大家都知道了，按照一定的匹配规则即可实现比较复杂的定时场景。当然，可以使用可视化的页面来配置：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><h2>二、另一种实现：Timer</h2><p>在这个最简单的应用中，就是实现每隔几分钟来做一些事情的简单场景，还可以使用JDK自带的<code>Timer</code>来实现。下面给出一个最简单的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// scheduledExecutionTime() 返回此任务最近开始执行的时间</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="keyword">this</span>.scheduledExecutionTime());</span><br><span class="line">        System.out.println(<span class="string">"timeTask run "</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从现在开始每间隔 1000 ms 计划执行一个任务</span></span><br><span class="line">timer.schedule(timerTask, <span class="number">0</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>Timer</code> 可以按计划执行重复的任务或者定时执行指定任务，这是因为 <code>Timer</code> 内部利用了一个后台线程 <code>TimerThread</code> 有计划地执行指定任务。</p><ul><li><code>Timer</code>：是一个实用工具类，该类用来调度一个线程(<code>schedule a thread</code>)，使它可以在将来某一时刻执行。 <code>Java</code> 的 <code>Timer</code> 类可以调度一个任务运行一次或定期循环运行。 <code>Timer tasks should complete quickly.</code> 即定时器中的操作要尽可能花费短的时间。</li><li><code>TimerTask</code>：一个抽象类，它实现了 <code>Runnable</code> 接口。我们需要扩展该类以便创建自己的 <code>TimerTask</code> ，这个 <code>TimerTask</code> 可以被 <code>Timer</code> 调度。</li></ul><p>内部的实现原理还是有点意思的，后面有时间来扒一扒它的实现原理。既然Timer这么简单为什么我不用呢？当然了，在这里我觉得<code>Spring Task</code>更简单。</p><h2>三、Timer存在的问题</h2><p>有一个显著问题是：<code>Timer</code>在执行定时任务时只会创建一个线程，所以如果存在多个任务（task1和task2），且任务时间过长，超过了两个任务的间隔时间，那么就不再那么准时了。因为只有一个线程，线程需要排队，前面一个线程未及时执行完毕，势必会影响后续的任务执行。</p><p>第二个问题是：如果<code>TimerTask</code>抛出<code>RuntimeException</code>，<code>Timer</code>会停止所有任务的运行。</p><p>如果不引入Spring如何解决上述问题呢？这个时候<code>ScheduledExecutorService</code>闪亮登场，利用线程池来调度任务，不会出现一个任务延迟导致第二个任务无法准时执行的问题，并且在<code>ScheduledExecutorService</code>调度两个任务的时候，其中一个任务抛出异常不影响第二个任务的正常执行。</p><p>具体的对比可以参见文章<a href="https://blog.csdn.net/lmj623565791/article/details/27109467" target="_blank" rel="noopener">Java 并发专题 ： Timer的缺陷 用ScheduledExecutorService替代</a></p><p>因此，尽量避免使用<code>Timer</code>要成为我们的共识啦。优秀的那么多，何必用这个呢？</p><p>当然，还有开源的定时器可以使用，功能更加强大，整合也不难。比如<code>quartz</code>和为分布式而生的<code>Elastic-Job</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中经常会用到定时任务，有的用&lt;code&gt;linux&lt;/code&gt;的&lt;code&gt;crontab&lt;/code&gt;来实现系统级别的定时调用，当然这种只能调用脚本，不能在我们的程序中实现高度灵活的配置。定时任务的实现有很多，我之前也做过一些笔记，因为在分布式应用中，定时需要小心处理，否则会很容易地出现数据错乱，因此出现了很多适用于分布式场景定时器。当然分布式不在本文讨论范围，这里只想聊聊简单的单机应用，而且是最简单的&lt;code&gt;Spring Task&lt;/code&gt;。&lt;/p&gt;
&lt;img src=&quot;http://bloghello.oursnail.cn/suibi4-1.png&quot; width=&quot;300&quot;&gt;
    
    </summary>
    
    
      <category term="miscellany" scheme="http://yoursite.com/tags/miscellany/"/>
    
  </entry>
  
  <entry>
    <title>03linux下玩kafka</title>
    <link href="http://yoursite.com/2019/08/05/kafka/03linux%E4%B8%8B%E7%8E%A9kafka/"/>
    <id>http://yoursite.com/2019/08/05/kafka/03linux下玩kafka/</id>
    <published>2019-08-05T14:17:00.071Z</published>
    <updated>2019-08-27T11:58:04.865Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bloghello.oursnail.cn/kafka1-15.jpg" alt="image"></p><p>为了方便对<a href="https://github.com/sunweiguo/SpringBoot-pratice" target="_blank" rel="noopener">实习生小课题</a>中kafka方便调试，我决定在自己的腾讯云服务器上部署一个单机kafka，其实跟本地windows没啥区别，不过还是做一下记录吧。服务器环境是centod7.3。</p><a id="more"></a><h2>第一步-安装JDK</h2><p>安装jdk1.8或以上版本。由于现在下载jdk都需要先注册，<strong>而注册内容令人不适</strong>，所以这里贴出一个我的百度云下载地址，方便大家使用，包含了exe和tar两个版本。</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Yb7s1hFJ2FvqVs1lH6E7WQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Yb7s1hFJ2FvqVs1lH6E7WQ</a></p></blockquote><blockquote><p>提取码：3chj</p></blockquote><p>具体安装可以参考我之前写过的笔记：</p><ul><li><a href="http://note.youdao.com/noteshare?id=1f381a88b65ec929aeabe5d4f1e19410&amp;sub=9498380F23CC43EC8157E02937BD7032" target="_blank" rel="noopener">基于virtualbox+centos6.9的服务器搭建</a></li><li><a href="http://note.youdao.com/noteshare?id=9c306f8357a166d2fb7ee896536876e8&amp;sub=AB01BCDCCB03439B9436A6B2F57D1202" target="_blank" rel="noopener">阿里云centos7.3部署本项目</a></li></ul><h2>第二步-安装kafka</h2><blockquote><p>1.解压：tar -zxvf kafka_2.12-2.2.0.tgz</p><p>2.修改 kafka-server 的配置文件：</p><p>-----2.1 vim /usr/local/kafka/config/server.properties</p><p>-----2.2 broker.id=1</p><p>-----2.3 log.dir=/data/kafka/logs-1</p><p>3.来到bin目录下，后台启动ZK：./zookeeper-server-start.sh -daemon …/config/zookeeper.properties</p><p>4.后台启动KAFKA：./kafka-server-start.sh -daemon …/config/server.properties</p><p>5.创建topic：./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</p><p>6.查看topic列表：./kafka-topics.sh --list --zookeeper localhost:2181</p><p>7.启动生产者：./kafka-console-producer.sh --broker-list localhost:9092 --topic test</p><p>8.启动消费者：./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</p></blockquote><p>在服务器上搞一切OK，我们开放安全组对9092的端口，在本地试一把呢？结果报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: No entry found for connection 1</span><br></pre></td></tr></table></figure><p>解决方法是主机的kafka配置文件(<code>$KAFKA_HOME/config/server.properties</code>)中:添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advertised.listeners=PLAINTEXT://$IP_A:9092(默认这个key所在行是注释掉的)</span><br></pre></td></tr></table></figure><p>其中<code>$IP_A</code>可以是主机的<code>IP</code>或者<code>hostname</code>.</p><p>关于如何在windows下搞，请参考我的博客：<a href="https://sunweiguo.github.io/2019/06/13/kafka/03windows%E4%B8%8Bkafka%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">windows下kafka的基本使用</a></p><p>以上参考了博文：<a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/" target="_blank" rel="noopener">Kafka 安装及快速入门</a>，不过我发现他有一点点错误，并且他遇到的问题我没遇到。我遇到的问题他可能也没尝试到^^。</p><p><img src="http://bloghello.oursnail.cn/kafka2-1.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/kafka1-15.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了方便对&lt;a href=&quot;https://github.com/sunweiguo/SpringBoot-pratice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;实习生小课题&lt;/a&gt;中kafka方便调试，我决定在自己的腾讯云服务器上部署一个单机kafka，其实跟本地windows没啥区别，不过还是做一下记录吧。服务器环境是centod7.3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>02windows下kafka的基本使用</title>
    <link href="http://yoursite.com/2019/06/13/kafka/02windows%E4%B8%8Bkafka%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/13/kafka/02windows下kafka的基本使用/</id>
    <published>2019-06-13T13:14:46.677Z</published>
    <updated>2019-08-27T11:57:57.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bloghello.oursnail.cn/kafka1-15.jpg" alt="image"></p><p>最近公司用kafka，本地需要测试测试，本地为windows环境，因此学习一下windows下对kafka的基本操作，便于代码的调试，也是作为知识的记录。</p><a id="more"></a><h2>环境准备</h2><ul><li>JDK8自行下载</li><li><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">kafka下载</a>【我自己用的是以前下载的版本，为 kafka_2.11-2.1.0.tgz 这个版本，直接下载解压即可】</li></ul><h2>KafKA使用</h2><p>由于是windows环境，解压之后我们的注意点是<code>kafka_2.11-2.1.0\bin\windows</code>目录。</p><p><img src="http://bloghello.oursnail.cn/kafka3-1.jpg" alt="image"></p><h5>启动ZK</h5><p>在此目录下打开cmd，执行命令<code>zookeeper-server-start.bat ..\..\config\zookeeper.properties</code>，如下图表示启动成功：</p><p><img src="http://bloghello.oursnail.cn/kafka3-2.jpg" alt="image"></p><h5>启动KAFKA</h5><p>依旧在目录下打开cmd，执行命令<code>kafka-server-start.bat ..\..\config\server.properties</code>，如下图表示启动成功：</p><p><img src="http://bloghello.oursnail.cn/kafka3-3.jpg" alt="image"></p><h5>测试Kafka命令</h5><ul><li>创建一个主题</li></ul><blockquote><p>kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic TOPIC的名称</p></blockquote><ul><li>查看创建的主题列表</li></ul><blockquote><p>kafka-topics.bat --list --zookeeper localhost:2181</p></blockquote><p>我这里新建一个叫做<code>test</code>的topic作为实验。</p><p><img src="http://bloghello.oursnail.cn/kafka3-4.jpg" alt="image"></p><ul><li>启动生产者：</li></ul><blockquote><p>kafka-console-producer.bat --broker-list localhost:9092 --topic test</p></blockquote><ul><li>启动消费者：</li></ul><blockquote><p>kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning</p></blockquote><p>此时可以从控制台输入信息，待消费者即可接收到生产者发布的消息。</p><p><img src="http://bloghello.oursnail.cn/kafka3-5.jpg" alt="image"></p><p>至此，最基本的操作介绍完毕！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/kafka1-15.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近公司用kafka，本地需要测试测试，本地为windows环境，因此学习一下windows下对kafka的基本操作，便于代码的调试，也是作为知识的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>01kafka入门</title>
    <link href="http://yoursite.com/2019/06/08/kafka/01kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/06/08/kafka/01kafka入门/</id>
    <published>2019-06-08T14:24:50.804Z</published>
    <updated>2019-08-27T11:57:34.421Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bloghello.oursnail.cn/kafka1-15.jpg" alt="image"></p><p>本系列博客主要以《深入理解kafka核心设计和实践原理》和《kafka权威指南》这两本书为基础深入学习kafka的使用和原理。</p><p>我们或多或少都听说过<code>kafka</code>，为了深入学习一下<code>kafka</code>，本文作为学习的第一篇文章，主要目标是搞清楚<code>kafka</code>的基本概念，因为<code>kafka</code>涉及一些专用名词，只有先了解这些名词，才有可能理解<code>kafka</code>的设计思想。</p><a id="more"></a><h2>一、为什么要学习kafka</h2><p>目前，<code>kafka</code>的定位是一个分布式流处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用。截止到写本文的时间：2019年08月21号，已经到了2.3版本，<code>kafka</code>也成为后端程序猿或者大数据程序猿不可不学习的一个重要中间件。它有三大特点：</p><ul><li>消息系统</li></ul><p>市面上有很多的消息中间件，这些消息中间件的主要功能是：系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复等功能。但是<code>kafka</code>不仅包含这些内容，还提供大多数消息中间件不能实现的：消息顺序性保障和回溯消费等功能。</p><ul><li>存储系统</li></ul><p><code>Kafka</code>支持消息的持久化，相比于其他内存存储系统有较高的保障性，并且提供多副本机制，避免某一台服务器挂掉而导致消息丢失。并且支持长期的数据存储，只需要将数据保存策略设置为永久或者启用主题的日志压缩功能即可。</p><ul><li>流式处理平台</li></ul><p><code>kafka</code>的定位日渐提高，它不是仅仅可以作为消息中间件，它的目标实际是为流式处理框架提供可靠的数据来源。还提供了一个完整的流式处理类库，比如窗口、连接、变换和聚合等各类操作。</p><p>以上就是<code>kafka</code>与其他的消息中间件的区别（优势），下面来一起入门<code>kafka</code>的基本概念吧。</p><h2>二、kafka基本概念</h2><p>入门一个新的知识，首先需要知道它是啥，用来干啥，下面就是要知道它涉及的基本概念，才能为接下来的深入学习和使用打下良好基础，本文先来缕一缕最基本且最重要的概念。</p><p>一个典型的<code>kafka</code>架构包若干<code>Producer</code>、若干<code>Broker</code>、若干<code>Consumer</code>，以及一个<code>Zookeeper</code>集群。</p><p><img src="http://bloghello.oursnail.cn/kafka1-10.png" alt=""></p><p>有的小伙伴会问ZK在里面的角色是啥？为什么在玩<code>kafka</code>的时候需要先启动一个ZK？其实ZK在<code>kafka</code>中主要负责集群元数据的管理、控制器的选举等操作。关于什么是元数据，我这里简单说明一下:</p><p>元数据就是描述数据的数据。初次看到这个表述有点懵，其实简单来说，就像是手机或者电脑的参数，比如像素多少千万、处理器多少HZ等，这些数据都是用来描述手机的，整个参数合起来，我们大概就知道这个手机的配置如何。阮一峰的一篇<a href="http://www.ruanyifeng.com/blog/2007/03/metadata.html" target="_blank" rel="noopener">文章</a>说得可能详细一点，不妨去看看。</p><p>关于控制器的选举，可能难懂一点，会在后续的内容中说明。</p><p>回到上图，我们可以看到<code>kafka</code>的一个工作方式：<code>Producer</code>将消息发送到<code>Broker</code>中并持久化到磁盘，而<code>Consumer</code>负责从<code>Broker</code>订阅并消费消息。</p><p>注意，上面提到了三个专业名词：<code>Producer</code>,<code>Broker</code>以及<code>Consumer</code>。这个是三个最基本的术语，意义也很简单，下面一一阐述。</p><ol><li><code>Producer</code>即生产者，就是发送消息的一方，负责创建消息，然后投递到<code>kafka</code>。</li><li><code>Consumer</code>即小欸这，就是接收消息的一方，负责连接到<code>kafka</code>上并接收消息。</li><li><code>Broker</code>即服务代理节点，<code>Broker</code>可以简单看作一个独立的<code>kafka</code>服务节点或者<code>kafka</code>服务实例，通常情况下，可以将<code>Broker</code>看作一台<code>Kakfa</code>服务器，前提是这个服务器上只部署了一个<code>kafka</code>，所以简单来说，<code>broker</code>就是一个<code>kafka</code>实例。</li></ol><p>在<code>kafka</code>中还有两个重要的概念：主题(<code>Topic</code>)和分区(<code>partition</code>)。</p><p><code>kafka</code>中的消息以主题为单位进行分类，生产者负责将消息发送到特定的主题下，消费者可以订阅相关的主题去消费。</p><p>主题是一个抽象的概念，可以细分为多个分区。他们的关系是：一个主题可以分为多个分区，一个分区只属于一个主题。那么分区是啥呢？</p><p>简单来说，就是这个主题的所有消息在物理上可以分为多块进行存储，这个块就可以理解为分区了。那么不难理解的是：每个分区上的消息不一样，所有分区的消息加起来就是一个主题的所有消息。</p><p>分区在存储层面可以看作是一个可追加的日志文件，消息在被追加到分区日志文件的时候就会分配一个特定的偏移量(<code>offset</code>)，这个玩意很重要，就是标识这个分区下某个消息的顺序，并且是这个消息的唯一标识。注意，<code>offset</code>不能跨越分区，即<code>kafka</code>保证的顺序性是在一个分区内所有消息的顺序性，而不是整个<code>topic</code>下所有消息的顺序性。</p><p><img src="http://bloghello.oursnail.cn/kafka1-11.png" alt=""></p><p>上图所示就是表示一个抽象概念的<code>topic</code>下的所有消息可以分为多个分区进行存储。每个分区的消息按照<code>offset</code>进行顺序追加存储。分区可以在不同的<code>broker</code>上，也就是说，一个<code>topic</code>下的数据可以分布在不同的服务器上，显而易见，这样做的好处是可以提高吞吐量，因为我可以起多个生产者/消费者去不同的分区消费，达到并行处理的效果。</p><p>分区个数可以在创建主题的时候指定，也可以在主题创建之后去修改分区的数量，注意分区的数量只能增加不能减少。这里暂时不讨论为什么不能减少、分区的数量如何指定等问题，本篇文章只作为概念入门。</p><h2>三、副本机制</h2><p>上面介绍了最基本也是最重要的概念，概念相对来说比较清晰，下面来说说副本机制。<code>kafka</code>引入多副本机制，可以提高容灾能力。</p><p>同一分区的不同副本理论上保存是相同的消息（同一时刻，副本之间并非完全一样），副本之间是“一主多从”的关系，其中<code>leader</code>副本负责处理读写请求，而<code>follow</code>副本只负责与<code>leader</code>副本的消息同步。副本处于不同的<code>broker</code>中，而<code>leader</code>副本出现故障时，从<code>follow</code>副本中重新选举新的<code>leader</code>副本对外提供服务。<code>kafka</code>通过多副本机制实现了故障的自动转移，当<code>kafka</code>集群中某个<code>broker</code>失效时仍然能保证服务可用。</p><p>这里举个例子，<code>kafka</code>集群中有4个<code>broker</code>，某个主题有3个分区，假设副本因子时3，则每个分区便有一个<code>leader</code>副本和两个<code>follow</code>副本。<code>follow</code>副本中的消息相对<code>leader</code>副本中的消息有一定的滞后性。</p><p><img src="http://bloghello.oursnail.cn/kafka1-12.png" alt=""></p><p>当然，<code>kafak</code>的消费端也有容灾机制，当某个消费者宕机，只要记录了消费的<code>offset</code>，就可用从指定的<code>offset</code>处重新消费，不会造成消息的丢失。</p><p>分区中所有的副本统称为<code>AR</code>，所有与<code>leader</code>副本保持一定程度同步的副本组成<code>ISR</code>，<code>ISR</code>是<code>AR</code>的子集，消息会先发送到<code>leader</code>副本，然后<code>follow</code>副本才能从<code>leader</code>副本中拉取消息进行同步。与<code>leader</code>副本同步滞后过多的副本组成<code>OSR</code>，由此可见：<code>AR</code>=<code>ISR</code>+<code>OSR</code>。在正常情况下，所有的<code>follow</code>副本都应该与<code>leader</code>副本保持一定程度的同步，即<code>AR</code>=<code>ISR</code>，<code>OSR</code>集合为空。</p><p><code>leader</code>副本负责维护和跟踪<code>ISR</code>集合中所有<code>follow</code>副本的滞后状态，当<code>follow</code>副本落后太多或者失效时，<code>leader</code>副本会把它从<code>ISR</code>集合中剔除。如果<code>OSR</code>集合中有<code>follow</code>副本追上了<code>leader</code>副本，那么<code>leader</code>副本就会把它从<code>OSR</code>集合中转移到<code>ISR</code>集合中。</p><p>默认情况下，当<code>leader</code>副本发生故障时，只有在<code>ISR</code>集合中的副本才有资格被选举为新的<code>leader</code>，而在<code>OSR</code>集合中的副本原则上没有机会（除非修改相应的配置参数）。</p><p>此外，还有两个名词值得关注：</p><ul><li><code>HW</code>（<code>High WaterMark</code>）: 高水位， 用来标记一个特定的消息偏移量，消费者只能拉取到这个<code>offset</code>之前的消息（可见性）</li><li><code>LEO</code>( <code>Log End Offset</code>) : 标志着当前日志文件中下一条待写入消息的<code>offset</code> 。 <strong>分区<code>ISR</code>集合中的每个副本都维护自身的<code>LEO</code>，而<code>ISR</code>集合中的最小<code>LEO</code>为分区的<code>HW</code>，对消费者而言只能消费<code>HW</code>之前的消息</strong>。</li></ul><p>对此记住一点，这两个都是指最后一条的下一条的位置而不是指最后一条的位置。</p><p><img src="http://bloghello.oursnail.cn/kafka1-14.png" alt=""></p><p>当消息写入<code>leader</code>副本之后，<code>follow</code>副本会发送拉取请求来拉取消息以进行消息同步。在同步的过程中，不同的<code>follow</code>副本同步效率不尽相同，此时各个<code>follow</code>的<code>LEO</code>也就不一样，这个时候<code>HW</code>就是最小的<code>LEO</code>，那么消费者能消费到的消息就是这个<code>HW</code>之前的消息。</p><p>说白点就是，这种方式保证消费者消费到的是当前<code>follow</code>副本中同步最慢的那个消息，可以看出，<code>Kafka</code>的赋值机制既不是完全的同步复制，也不是单纯的异步复制，同步复制要求所有能工作的<code>follow</code>副本都要复制完，这条消息才会被确认已成功提交，这种复制方式极大地影响了性能；异步复制方式下，<code>follow</code>副本异步地从<code>leader</code>副本中复制数据，数据只要被<code>leader</code>副本写入就认为已成功提交，这种方式下，如果<code>leader</code>副本突然宕机但是<code>follow</code>副本还没有复制完，则会造成数据丢失。<code>kafka</code>这种<code>ISR</code>的方式有效地权衡了数据可靠性和性能之间的关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/kafka1-15.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;本系列博客主要以《深入理解kafka核心设计和实践原理》和《kafka权威指南》这两本书为基础深入学习kafka的使用和原理。&lt;/p&gt;
&lt;p&gt;我们或多或少都听说过&lt;code&gt;kafka&lt;/code&gt;，为了深入学习一下&lt;code&gt;kafka&lt;/code&gt;，本文作为学习的第一篇文章，主要目标是搞清楚&lt;code&gt;kafka&lt;/code&gt;的基本概念，因为&lt;code&gt;kafka&lt;/code&gt;涉及一些专用名词，只有先了解这些名词，才有可能理解&lt;code&gt;kafka&lt;/code&gt;的设计思想。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>实现动态切换多数据源及其原理分析</title>
    <link href="http://yoursite.com/2019/05/23/miscellany/18.%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/23/miscellany/18.实现动态切换多数据源及其原理分析/</id>
    <published>2019-05-23T13:21:19.712Z</published>
    <updated>2019-05-23T14:00:47.457Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中可能会遇到多个库的连接，那么一个库就是一个数据源，在程序中如何快速动态地切换数据源呢？本文来探讨一下spring提供的AbstractRoutingDataSource实现方案。</p><a id="more"></a><h2>实现</h2><p>比如我有三个数据源，分别交<code>DATASOURCE_A</code>、<code>DATASOURCE_B</code>、<code>DATASOURCE_C</code>，我假设默认是<code>DATASOURCE_A</code>，此时我需要用B来查询，我理想的效果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要切换数据源</span></span><br><span class="line">CustomerContextHolder.setCustomerType(CustomerContextHolder.DATASOURCE_B);</span><br><span class="line"></span><br><span class="line">List&lt;xxx&gt; xxxList = xxxService.getList();</span><br><span class="line">System.out.println(<span class="string">"====xxxList："</span>+xxxList.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行以后需要清除，否则后续的请求是继续在切换后的数据源中</span></span><br><span class="line">CustomerContextHolder.clearCustomerType();</span><br></pre></td></tr></table></figure><p>当我想用C的时候，直接一样的套路，也就是说只需要两行代码就可以实现数据源的自由切换，如何达到这种效果呢？</p><p>首先，数据源的定义肯定是要有的，我在xml中定义三个数据源，即<code>dataSource</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一的dataSource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dynamicDataSource"</span> <span class="attr">class</span>=<span class="string">"com.xxx.DynamicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通过不同的key决定用哪个dataSource --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"dataSource_A"</span> <span class="attr">key</span>=<span class="string">"dataSource_A"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"dataSource_B"</span> <span class="attr">key</span>=<span class="string">"dataSource_B"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"dataSource_C"</span> <span class="attr">key</span>=<span class="string">"dataSource_C"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置默认的dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource_A"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 1. 数据源 : dataSource_A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource_A"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://ip:port/db_A?useUnicode=true&amp;amp;characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 2. 数据源 : dataSource_B --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource_B"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://ip:port/db_B?useUnicode=true&amp;amp;characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 数据源 : dataSource_B --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource_C"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://ip:port/db_C?useUnicode=true&amp;amp;characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入dynamicDataSource即动态数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dynamicDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的配置文件全部略。此时我需要新建一个类去继承<code>AbstractRoutingDataSource</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CustomerContextHolder.getCustomerType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我就可以根据这个返回值即key来找到对应的数据源。这里用到了<code>ThreadLocal</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SOURCE_A = <span class="string">"dataSource_A"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SOURCE_B = <span class="string">"dataSource_B"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SOURCE_C = <span class="string">"dataSource_C"</span>;</span><br><span class="line"><span class="comment">// 用ThreadLocal来设置当前线程使用哪个dataSource</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置数据源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCustomerType</span><span class="params">(String customerType)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=========切换数据源："</span>+customerType);</span><br><span class="line">contextHolder.set(customerType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCustomerType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String dataSource = contextHolder.get();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(dataSource)) &#123;</span><br><span class="line">    <span class="comment">//默认数据源</span></span><br><span class="line"><span class="keyword">return</span> DATA_SOURCE_A;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除数据源，防止内存泄漏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCustomerType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">contextHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，动态在多数据源中切换功能完成。问题是我为什么重写了<code>determineCurrentLookupKey()</code>就可以切换数据源了呢？</p><h2>原理</h2><p>多数据源还是比较头疼的，因为我们自己玩往往都是一个数据源，比如<code>spring</code>和<code>mybatis</code>结合的项目，我们在<code>spring</code>配置中往往是配置一个<code>dataSource</code>来连接数据库，然后绑定给<code>sessionFactory</code>，在<code>dao</code>层代码中再指定<code>sessionFactory</code>来进行数据库操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataSource ---&gt; sessionFactory ---&gt; dao层实现类</span><br></pre></td></tr></table></figure><p>这是单数据源<code>dataSource</code>结构，但是缺点很明显，不支持多个数据源，于是我们再改进一下，让它支持多数据源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataSource1 ---&gt; sessionFactory1 ---&gt;</span><br><span class="line">                                     ---&gt; dao层实现</span><br><span class="line">dataSource2 ---&gt; sessionFactory2 ---&gt;</span><br></pre></td></tr></table></figure><p>这种结构实现了多数据源，但是缺点也很明显，具有多个<code>SessionFactory</code>，不具有灵活性，而且太笨重了。如果再加一个数据源，就需要再加一个<code>SessionFactory</code>。</p><p>顾名思义，<code>SessionFactory</code>，就是用来创建<code>session</code>会话的工厂。如果存在多个<code>Sessionfactory</code> 那么<code>Session</code>是不是就乱套了，因此这种架构不可取。那么下面这种架构就应用而生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataSource1 ---&gt; </span><br><span class="line">                ---&gt; dynamicDataSource ---&gt; sessionFactory --&gt; dao层实现</span><br><span class="line">dataSource2 ---&gt;</span><br></pre></td></tr></table></figure><p><code>Spring</code>的<code>AbstractRoutingDataSource</code>就是采用这种架构。</p><p><code>AbstractRoutingDataSource</code> 的设计源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSource</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展<code>Spring</code>的<code>AbstractRoutingDataSource</code>抽象类（该类充当了<code>DataSource</code>的路由中介, 能有在运行时, 根据某种<code>key</code>值来动态切换到真正的<code>DataSource</code>上。）</p><p>从上可以看出它继承了<code>AbstractDataSource</code>，而<code>AbstractDataSource</code>不就是<code>javax.sql.DataSource</code>的子类吗，So我们可以分析下它的<code>getConnection</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;       </span><br><span class="line">    <span class="keyword">return</span> determineTargetDataSource().getConnection();   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span>  <span class="keyword">throws</span> SQLException </span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> determineTargetDataSource().getConnection(username, password);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取连接的方法中，重点是<code>determineTargetDataSource</code>方法，看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">"DataSource router not initialized"</span>);</span><br><span class="line">Object lookupKey = determineCurrentLookupKey();</span><br><span class="line">DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot determine target DataSource for lookup key ["</span> + lookupKey + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段源码的重点在于<code>determineCurrentLookupKey()</code>方法，这是<code>AbstractRoutingDataSource</code>类中的一个抽象方法，而它的返回值是你所要用的数据源<code>dataSource</code>的<code>key</code>值，有了这个<code>key</code>值，<code>resolvedDataSource</code>（这是个map,由配置文件中设置好后存入的）就从中取出对应的<code>DataSource</code>，如果找不到，就用配置默认的数据源。</p><p>因此我们需要重写<code>AbstractRoutingDataSource</code>类的抽象方法<code>determineCurrentLookupKey()</code>，这样就可以实现数据源的动态切换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CustomerContextHolder.getCustomerType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中可能会遇到多个库的连接，那么一个库就是一个数据源，在程序中如何快速动态地切换数据源呢？本文来探讨一下spring提供的AbstractRoutingDataSource实现方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="miscellany" scheme="http://yoursite.com/tags/miscellany/"/>
    
  </entry>
  
  <entry>
    <title>Spring中Rod Johnson与“轮子理论”</title>
    <link href="http://yoursite.com/2019/05/12/goodguys/Spring%E4%B8%ADRod%20Johnson%E4%B8%8E%E2%80%9C%E8%BD%AE%E5%AD%90%E7%90%86%E8%AE%BA%E2%80%9D/"/>
    <id>http://yoursite.com/2019/05/12/goodguys/Spring中Rod Johnson与“轮子理论”/</id>
    <published>2019-05-12T08:45:52.552Z</published>
    <updated>2019-05-12T09:27:01.234Z</updated>
    
    <content type="html"><![CDATA[<p>本文原文出处是：<a href="http://www.51cto.com/specbook/223/33562.htm" target="_blank" rel="noopener">Spring中Rod Johnson与“轮子理论”.</a>，值得我们学习与反思。文中的一句话：多去研究别人发明的轮子，而不是依赖于某几个轮子，会用几个轮子就自以为是、沾沾自喜。不但要去探索、研究轮子的发明技术，原理，还要大胆地、不断地尝试发明更好，更合适自己的轮子。失败不用怕，怕的是我们连失败的机会都没有，有机会也因为世俗一些观念影响而不敢去争取及尝试。不要过分的依赖于现有的这些进口轮子，去大胆的发明轮子吧。我也要谨记，上升点层面，这是我们所有程序猿应该为止奋斗的事情。</p><a id="more"></a><p><code>Rod Johnson</code>是<code>Spring Framework</code>的创建者，也是Java和J2EE领域中的知名专家。Rod是<code>Interface21</code>公司的CEO，该公司是一家致力于提供专业级J2EE和<code>Spring Framework</code>服务的顾问公司。</p><p><img src="http://bloghello.oursnail.cn/goodguys1-1.jpg" alt="image"></p><p>谈到<code>Rod Johnson</code>，除了Spring框架本身以外，他所著作的《Expert One-on-One J2EE Development without EJB》一书，其影响力比Spring框架本身还更加震撼。这里插播一段广告：《Expert One-on-One J2EE Development without EJB》这本书的中文版去年就已经出了，有兴趣的朋友可以去买来一看。</p><p><code>Rod Johnson</code>对J2EE乃至整个Java的贡献我这里就不再多说了，下面直接引用一些从网上摘下来的原话，我想大家也能看出他的厉害。</p><p><img src="http://bloghello.oursnail.cn/goodguys1-2.jpg" alt="image"></p><p>我们曾经在无数的书籍和文章中看到，EJB是J2EE的核心技术之一；而<code>Rod Johnson</code>竟然宣称，绝大多数的J2EE应用根本不需要EJB。－摘自“J2EE without EJB”书评</p><div class="tip">官方说法，EJB就是企业级javaBean,是基于java语言的服务器框架技术，通过EJB我们可以轻松的构建企业级，分布式的构建应用。也就是说EJB提供了一个框架来开发和实施分布式商务逻辑。<p>EJB可以帮助我们解决企业级开发分布式，分布式事务等这些问题，让程序员从复杂的关系中抽离出来，专心开发企业业务逻辑。</p><p>但是为什么现在好像不怎么用它了呢？</p><p>以上我们知道，EJB规范的关键目标之一就是简化应用代码，让编写应用变得更容易，开发人员不必了解低级事务，状态管理，多线程，连接池等，理论上通过把所有低级问题都推向EJB容器，开发人员能够把精力都投入业务逻辑，但其实EJB在消除复杂性的情况下，给应用增加的复杂性也一样大：</p><ul><li>ejb是比较重量级，学习成本高，复杂性高，潜在问题多。</li><li>ejb难以调试:看到ejb的调用流程，虽然看上去ejb让用户不用了解远程调用细节，使用简单，但是由于里面的调用过程复杂，一旦有一个环节错了，用户都难以调试，排错，开发过程中出现问题不可避免，而解决ejb的问题，解决周期要比较久。出错的时候，错误信息也千奇百怪。</li><li>ejb的性能问题:ejb的调用涉及太多类的序列化和反序列化，本来通过网络传输已经很慢了，还要传递对象，数据量又更大了，还要涉及了对象的序列化和反序列化，这中间有太多的开销了。</li><li>ejb的替换开源产品太多了:现在业务逻辑，在java上要用框架的有spring，远程调用，有webservice(apache cxf已经做得很好了，而且webservice又是通用标准)，mina(一个apache的NIO框架)，netty(现在性能最快的NIO框架，来自jboss).而且这些产品都是可移植，社区交流多，出了问题，google就找到了。</li></ul><p>EJB 是分布式应用和复杂事务管理问题的一个上佳解决方案。但是，许多应用没有遇到这些问题，EJB在这样的应用中增加了不必要的复杂性。一个EJB解决方案可以比喻为一辆卡车，而一个WEB应用服务可以比喻为一辆小轿车。当我们需要执行一些像搬运大型对象之类的任务时，一辆卡车会被一辆小轿车高效得多。但是，当一辆卡车和小轿车做相同工作时，小轿车的灵活性、更容易操作！</p></div><p><code>Rod Johnson</code>将会引领一种影响深远的潮流。但这潮流不是Spring和Hibernate,也不是IoC和AOP,甚至不是“轻量级架构”，而是一切实事求是的“循证架构”的工作方式。惟有掌握这种工作方式，你才能够真正自信满满地挺起胸膛说：“我选择的架构是适合应用需求的架构。”―摘自“Java视野”网友讨论</p><p><code>Rod Johnson</code>认为，应该是基于实践的证据、来自历史项目或亲自试验的经验，而不是任何形式的偶像崇拜或者门户之见。<code>Rod Johnson</code>给我传授了“循证”的工作方式——那原本就应该是程序员的工作方式。－摘自“J2EE without EJB”书评</p><p>Spring 提供这些价值也离不开其它开源框架的支持（Spring 的理念：不去重新发明轮子），但是Spring 是所有这些开源框架的集大成者，为集成各种开源的成果提供了一个非常理想的平台。所以Rod Johnson对于J2EE的贡献在我看来要比其他人高一些的。－摘自网友评论</p><p>总之一句话，在技术的领域，他是伟人、他是我们心目中的英雄！(呵呵，“英雄”这尊称叫起来有点肉麻，笔者以后就把<code>Rod Johnson</code>称为大叔，这样听起来大家都舒服。)</p><p>当然，谈到<code>Rod Johnson</code>大叔，就一定得谈谈“轮子理论”</p><p><img src="http://bloghello.oursnail.cn/goodguys1-3.jpg" alt="image"></p><p>“轮子理论”，也即“不要重复发明轮子”，这是西方国家的一句谚语，原话是：<code>Don't Reinvent the Wheel</code>。当然由于国内IT从业人员接受的都是西方先进技术(谁让中国没有先进技术给大家学呢？)，因此看见大家经常引用这一句话。“不要重复发明轮子”，意思是企业中任何一项工作实际上都有人做过，我们所需要做的就是找到做过这件事情的人。拿到软件领域中就是指有的项目或功能，别人已经做过，我们需要用的时候，直接拿来用即可，而不要重新制造。</p><p>“轮子理论”既然只是一句谚语，怎么又跟<code>Rod Johnson</code>大叔联系在一起了呢？因为<code>Rod Johnson</code>大叔告诉我们，Spring就是在“不重复发明轮子”的理念及指导原则上做起来。于是一夜之间，随着Spring在全世界的风风火火，特别是吹到我们祖国的时候，也许是爱屋及乌（或鸟）的原因吧，“轮子理论”也被众多的Spring粉丝当成做人做事做程序的信条及原则。</p><p>这样有问题吗？当然有严重的问题。“轮子理论”这一理论本身没有错，错的是轮子理论的滥用，错的是大家被<code>Rod Johnson</code>大叔忽悠了一把而不知或不承认。熟悉Spring的朋友都知道，Spring除了IOC、AOP及与其它各种框架的整合集成接口以外，也一样有自己的WEB　MVC、有自己的持久层数据库访问，当然，IOC、AOP就更加不是他的首创了。你能说这些东西难免不带有“发明轮子”的嫌疑吗？笔者由于资历乃至阅历皆浅薄，无法证明Spring“发明了轮子”，这里只是抛出一个疑命题，还请高人来求证。如果Spring的MVC等能证明他本身也是发明轮子的话，我们再去想想<code>Rod Johnson</code>大叔说这话的动机，难免会让人往其他不友好的方面想。</p><p>这里没有其它的恶意，只是就是论事。<code>Rod Johnson</code>大叔在他的书中开篇不是就教育我们：要敢于去怀疑、猜想吗？。要是没有<code>Rod Johnson</code>大叔对传统J2EE模式特别是EJB的怀疑及猜想，又哪来的Spring呢？</p><p>西方人口口声声说“不发明轮子”，但实际情况呢？大家自己睁开眼睛看看，然后闭上眼睛摸着脑门想想，如果真“不发明轮子”的话，有了JDO，怎么还会搞出iBatis来，有了?iBatis怎么又搞了一个Hibernate呢？同样的道理，有了一个令大家都称道的struts、后来又冒出个Tapestry，之后的Webwork、JSF，然后到现在的Spring MVC。这“轮子”一个又一个冒出来，一个比一个漂亮、好用，有点让我们这些整天被压得喘不过气来的国内程序员乃至开发商应接不暇，傻眼了吧？</p><p>为什么会这样呢？本来我也想不通，直到昨天发生一件事情，才让我有所领悟，事情大致是这样的：</p><p>我昨天在大街上看到一个被扔在马路边上全新的宝马轮子，记得乡下的小学同学曾托我帮他找一个拉肥料用三轮车的轮子，于是我就急忙给小学同学打电话，问他要不要。结果我被他一顿臭骂，原话大意是这样，他说我读大学、搞高科技、变傻了，宝马轮子那是山里人玩得起的吗？在山村里要轮子坏了怎么办，还要花几百块坐汽车、火车抱到城里修啊，我这三轮车全卖了也只值几百块呢？他大字不识几个，而那宝马轮子使用说明书，质量鉴定书一大堆，而且他又不放心，还得花时间考察考察，农忙季节刚好来了，哪有时间考察？最后还狠狠地冒了一句：你想让我这个季度喝西北风啊。</p><p>小学同学说话很直接，虽然土了一点，但确实很有道理。于是，我回来把老同学教训我的内容认真归纳整理了一下，得到如下几个简单结论：</p><p>1、宝马是高档车，因此轮子也得配名贵的轮子，其所有的设计都是为宝马这一名车量身打造的，所以在大小、宽度等多方面指标都不适合咱村里拉肥料的破三轮车。</p><p>2、宝马轮子因为名贵，质量好，但也会出问题的时候，出了问题一般人不能也不敢修，还必须得拿回大城市的专修店修理，维护成本太高了。</p><p>3、虽然三轮车已经有了轮子，但乡里的同学仍然要我帮他注意有没有好的轮子，意思是对现在的轮子不管从功率、效率乃至外表、款式等都不太满意，仍然需要改进。</p><p>4、我去年过春节回家时给他带的两个自行车轮子，他瞧不起，而且三轮车也用不上。</p><p>因此，我想上面提到的<code>Webwork</code>、<code>Tapestry</code>以及<code>Spring MVC</code>等，也是遇到类似的轮子不合适或者不完美的问题，才会不断寻求改进的方法，才能不断的更新换代，也才导致一个又一个的新的、漂亮的轮子被重复发明出来。结论就是，轮子不在于有没有，不在于是否属于“重复发明”，其关键在于“合不合适”。子曾经也曰过：存在即合理嘛！</p><p>#p#</p><p>而我们中国人呢，连发明轮子的技术都不会，只能膜拜，干瞪眼，等着学他们一个又一个的轮子使用方法。轮子越来越大，说明书越来越多，翻译的工作量越来越多，引进一个轮子的周期越来越长，越来越无法控制，实在不行了就只能骂两句解解气，然后一袋烟的功夫又硬着头皮回来乖乖继续学。我就有点呐闷，全国那么多的天才、大牛，咋就不发明一个我们自己的轮子玩玩，让老外也尝试一下把中文轮子说明书翻译成英文那种痛苦滋味。（晕，又做白日梦了，不好意思！）</p><p>那么，从科学的态度分析，究竟该不该“发明轮子呢？”。这得用一句经典的废话来总结：实事求是，具体问题具体分析！</p><p>其实也不用那么复杂，我们只需要看看现在我们用的轮子，看看这些进口的轮子是否都很合适我们，不需要再改进，更不需要重新发明了呢?我看未必。中国有着5000年的文化底蕴，可谓博大精深。进口的东西，技术再好，切不可能完全融入得了中国的文化、思想。况且，现在扔给我们这些轮子，不但用起来仍然有着这样那样的问题，这些轮子之间还相互打起架来，搞得我们要做儿子不是，做孙子也不是，一不小心就犯上了选择恐惧怔。</p><p>因此，作为一个80后的人，我希望跟我一样的同行，<b>能多去研究别人发明的轮子，而不是依赖于某几个轮子，会用几个轮子就自以为是、沾沾自喜。不但要去探索、研究轮子的发明技术，原理，还要大胆地、不断地尝试发明更好，更合适自己的轮子。失败不用怕，怕的是我们连失败的机会都没有，有机会也因为世俗一些观念影响而不敢去争取及尝试。不要过分的依赖于现有的这些进口轮子，去大胆的发明轮子吧。</b>等到十年、二十年以后，看到我们的后代依靠我们这些轮子来造火箭、造飞船、闯荡太空的时候，一定别有一番滋味。</p><p><img src="http://bloghello.oursnail.cn/goodguys1-4.jpg" alt="image"></p><p>当然，<b>“发明轮子”也要学学Spring，讲究艺术及方法。不能搞闭门造车，当全世界人民都在研究火箭轮子的时候你还停留在研究脚踏三轮车轮子的技术水平，那就难免闹笑话了。</b>要多学习别人的轮子制造方法，把别人的好的思想、理念、精华借鉴过来，再加入我们民族文化特色的东西及元素，最后为我所用。更要认认真真，想方设法的从国内同行及前辈们的身上学习、取经，因为他们的一个小小的建议或提示会让我们少走很多的弯路。最重要的就是要懂得团队协作的?重要性，学会与更多优秀的人一起共事，现在已经不再是个人英雄主义的年代，任何事情都需要讲究团队的合作，群策群力，才有可能取得成功。</p><p>最后,引一句张靓颖同学在Tcl广告歌中所唱的吧：“拥有梦想，就有可能!”，鼓励自己的同时，也鼓励所有拥有梦想的朋友。</p><p><img src="http://bloghello.oursnail.cn/goodguys1-5.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文原文出处是：&lt;a href=&quot;http://www.51cto.com/specbook/223/33562.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring中Rod Johnson与“轮子理论”.&lt;/a&gt;，值得我们学习与反思。文中的一句话：多去研究别人发明的轮子，而不是依赖于某几个轮子，会用几个轮子就自以为是、沾沾自喜。不但要去探索、研究轮子的发明技术，原理，还要大胆地、不断地尝试发明更好，更合适自己的轮子。失败不用怕，怕的是我们连失败的机会都没有，有机会也因为世俗一些观念影响而不敢去争取及尝试。不要过分的依赖于现有的这些进口轮子，去大胆的发明轮子吧。我也要谨记，上升点层面，这是我们所有程序猿应该为止奋斗的事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="好文" scheme="http://yoursite.com/tags/%E5%A5%BD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>入职前的一些感想</title>
    <link href="http://yoursite.com/2019/05/04/suibi/%E5%85%A5%E8%81%8C%E5%89%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2019/05/04/suibi/入职前的一些感想/</id>
    <published>2019-05-04T04:10:53.161Z</published>
    <updated>2019-05-04T04:41:50.914Z</updated>
    
    <content type="html"><![CDATA[<p>毕业也都十几天了，这十几天里，主要就是和宿舍的小伙伴，同师门的伙伴们一起胡吃海喝各种浪。很感激结识的这些伙伴，祝他们前途似锦。</p><a id="more"></a><p>首先就是宿舍合影：</p><p><img src="http://bloghello.oursnail.cn/suibi3-1.jpg" alt="image"></p><p><img src="http://bloghello.oursnail.cn/suibi3-2.jpg" alt="image"></p><p>师门合影：</p><p><img src="http://bloghello.oursnail.cn/suibi3-3.jpg" alt="image"></p><p><img src="http://bloghello.oursnail.cn/suibi3-4.jpg" alt="image"></p><p>明天就要入职了，虽然实习过一个多月，但是心里还是很忐忑。也希望小伙伴们都快速适应工作。</p><p>后续将写写工作的一些感想以及总结。待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业也都十几天了，这十几天里，主要就是和宿舍的小伙伴，同师门的伙伴们一起胡吃海喝各种浪。很感激结识的这些伙伴，祝他们前途似锦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>7.安全防护--图形验证码及恶意防刷</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/7.%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4--%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E6%81%B6%E6%84%8F%E9%98%B2%E5%88%B7/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/7.安全防护--图形验证码及恶意防刷/</id>
    <published>2019-04-23T10:48:31.004Z</published>
    <updated>2019-04-23T11:18:09.922Z</updated>
    
    <content type="html"><![CDATA[<p>为了仿真无用的点击以及恶意的攻击，我们可以考虑隐藏地址，增加图形验证码以及限制点击次数等手段。</p><a id="more"></a><h2>1. 秒杀接口地址隐藏</h2><p>思路：秒杀开始之前，先去请求接口获取秒杀地址。</p><ul><li>接口改造，带上<code>PathVariable</code>参数</li><li>添加生成地址的接口</li><li>秒杀收到请求，先验证<code>PathVariable</code></li></ul><p>对于秒杀接口，不是直接去请求<code>do_miaosha</code>这个接口了，而是先去后端获取一个<code>path</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    var goodsId = $(<span class="string">"#goodsId"</span>).val();</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/miaosha/path"</span>,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            goodsId:goodsId,</span><br><span class="line">        &#125;,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">                 var path = data.data;</span><br><span class="line">                 doMiaosha(path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                layer.msg(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:function()&#123;</span><br><span class="line">            layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端接口是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/path"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">getMiaoshaPath</span><span class="params">(Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    String path = miaoshaService.createPath(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成<code>path</code>的方法具体是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createPath</span><span class="params">(Long userId, Long goodsId)</span> </span>&#123;</span><br><span class="line">    String str = MD5Util.md5(UUIDUtil.uuid()+<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//存放到redis中，下面验证的时候再去取出来</span></span><br><span class="line">    redisService.set(MiaoshaKey.getMiaoshaPath,userId+<span class="string">"_"</span>+goodsId,str);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，前端拿到这个path之后拼装到<code>do_miaosha</code>这个接口上去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMiaosha</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"/miaosha/"</span>+path+<span class="string">"/do_miaosha"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>秒杀接口，先拿到这个<code>path</code>验证一下是否正确，正确再进入下面的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> check = miaoshaService.check(path,user,goodsId);</span><br><span class="line"><span class="keyword">if</span>(!check)&#123;</span><br><span class="line">    <span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的验证，就是取出缓存中的<code>path</code>，与前端传来的<code>path</code>进行对比，相等，说明是这个用户发来的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String path, MiaoshaUser user, Long goodsId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span> || path == <span class="keyword">null</span> || goodsId == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String pathOld = redisService.get(MiaoshaKey.getMiaoshaPath,user.getId()+<span class="string">"_"</span>+goodsId,String.class);</span><br><span class="line">    <span class="keyword">return</span> path.equals(pathOld);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在秒杀开始前，都是不知道这个秒杀的链接到底是什么，有效防止了恶意的请求。但是，在秒杀开始的时候，仍然会存在恶意刷单的请求，这个时候接口地址已经确定下来了，如何防止这种情况呢（机器人），可以用验证码来实现。</p><h2>2. 数学公式验证码</h2><p>思路：点击秒杀之前，先输入验证码，分散用户的请求</p><ul><li>添加生成验证码的接口</li><li>在获取秒杀路径的时候，验证验证码</li><li><code>ScriptEngine</code>使用</li></ul><p>首先在前端将验证码、答案输入框都写好：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"verifyCodeImg"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"32"</span> <span class="attr">style</span>=<span class="string">"display: none"</span> <span class="attr">onclick</span>=<span class="string">"refreshVerifyCode()"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"verifyCode"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"buyButton"</span><span class="attr">onclick</span>=<span class="string">"getPath()"</span>&gt;</span>立即秒杀<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有秒杀开始的时候，这个验证码才会出现，所以在<code>function countDown()</code>这个函数中的正在秒杀这个判断中显示验证码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#verifyCodeImg"</span>).attr(<span class="string">"src"</span>,<span class="string">"miaosha/verifyCode?goodsId="</span>+$(<span class="string">"#goodsId"</span>).val());</span><br><span class="line">$(<span class="string">"#verifyCodeImg"</span>).show();</span><br><span class="line">$(<span class="string">"#verifyCode"</span>).show();</span><br></pre></td></tr></table></figure><p>点击图片能够重新生成验证码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshVerifyCode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#verifyCodeImg"</span>).attr(<span class="string">"src"</span>, <span class="string">"/miaosha/verifyCode?goodsId="</span>+$(<span class="string">"#goodsId"</span>).val()+<span class="string">"&amp;timestamp="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端生成这个验证码图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/verifyCode"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">getMiaoshaVerifyCod</span><span class="params">(HttpServletResponse response, MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      @RequestParam(<span class="string">"goodsId"</span>)</span><span class="keyword">long</span> goodsId) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    BufferedImage image  = miaoshaService.createVerifyCode(user, goodsId);</span><br><span class="line">    OutputStream out = response.getOutputStream();</span><br><span class="line">    ImageIO.write(image, <span class="string">"JPEG"</span>, out);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> Result.error(CodeMsg.MIAOSHA_FAIL);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中核心的<code>createVerifyCode</code>方法，将图形验证码的计算结果放进了<code>redis</code>中，方便后面取出来与前段传来的结果进行对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*图形验证码*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BufferedImage <span class="title">createVerifyCode</span><span class="params">(MiaoshaUser user, <span class="keyword">long</span> goodsId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span> || goodsId &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">32</span>;</span><br><span class="line">    <span class="comment">//create the image</span></span><br><span class="line">    BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    Graphics g = image.getGraphics();</span><br><span class="line">    <span class="comment">// set the background color</span></span><br><span class="line">    g.setColor(<span class="keyword">new</span> Color(<span class="number">0xDCDCDC</span>));</span><br><span class="line">    g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// draw the border</span></span><br><span class="line">    g.setColor(Color.black);</span><br><span class="line">    g.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// create a random instance to generate the codes</span></span><br><span class="line">    Random rdm = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">// make some confusion</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = rdm.nextInt(width);</span><br><span class="line">        <span class="keyword">int</span> y = rdm.nextInt(height);</span><br><span class="line">        g.drawOval(x, y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// generate a random code</span></span><br><span class="line">    String verifyCode = generateVerifyCode(rdm);</span><br><span class="line">    g.setColor(<span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>));</span><br><span class="line">    g.setFont(<span class="keyword">new</span> Font(<span class="string">"Candara"</span>, Font.BOLD, <span class="number">24</span>));</span><br><span class="line">    g.drawString(verifyCode, <span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line">    g.dispose();</span><br><span class="line">    <span class="comment">//把验证码存到redis中</span></span><br><span class="line">    <span class="keyword">int</span> rnd = calc(verifyCode);</span><br><span class="line">    redisService.set(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">","</span>+goodsId, rnd);</span><br><span class="line">    <span class="comment">//输出图片</span></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(String exp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">        ScriptEngine engine = manager.getEngineByName(<span class="string">"JavaScript"</span>);</span><br><span class="line">        <span class="keyword">return</span> (Integer)engine.eval(exp);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] ops = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * + - *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">generateVerifyCode</span><span class="params">(Random rdm)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = rdm.nextInt(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">int</span> num2 = rdm.nextInt(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">int</span> num3 = rdm.nextInt(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">char</span> op1 = ops[rdm.nextInt(<span class="number">3</span>)];</span><br><span class="line">    <span class="keyword">char</span> op2 = ops[rdm.nextInt(<span class="number">3</span>)];</span><br><span class="line">    String exp = <span class="string">""</span>+ num1 + op1 + num2 + op2 + num3;</span><br><span class="line">    <span class="keyword">return</span> exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端在<code>function getMiaoshaPath()</code>这个函数中将结果传到后端，后端在这个获取真正秒杀链接的时候进行判断是否正确：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verifyCode:$(<span class="string">"#verifyCode"</span>).val()</span><br></pre></td></tr></table></figure><p>后端接收这个答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/path"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">getMiaoshaPath</span><span class="params">(Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId,</span></span><br><span class="line"><span class="function">                                     @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"verifyCode"</span>, defaultValue=<span class="string">"0"</span>)</span><span class="keyword">int</span> verifyCode) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">    <span class="keyword">boolean</span> check = miaoshaService.checkVerifyCode(user, goodsId, verifyCode);</span><br><span class="line">    <span class="keyword">if</span>(!check) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);</span><br><span class="line">    &#125;</span><br><span class="line">    String path = miaoshaService.createPath(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从<code>redis</code>中取出正确答案，与前端进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkVerifyCode</span><span class="params">(MiaoshaUser user, <span class="keyword">long</span> goodsId, <span class="keyword">int</span> verifyCode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span> || goodsId &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Integer codeOld = redisService.get(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">","</span>+goodsId, Integer.class);</span><br><span class="line">    <span class="keyword">if</span>(codeOld == <span class="keyword">null</span> || codeOld - verifyCode != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    redisService.delete(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="string">","</span>+goodsId);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>3. 接口防刷</h2><p>思路：对接口做限流</p><ul><li>可以使用拦截器减少对业务的侵入</li></ul><p>点击秒杀之后，首先是生成<code>path</code>，那假如我们对这个接口进行限制：5秒之内用户只能点击5次。</p><p>这放在<code>redis</code>中是非常好实现的，因为redis有个自增(自减)和缓存时间，可以很好地实现这个效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询访问次数,5秒钟访问5次</span></span><br><span class="line">String url = request.getRequestURI();</span><br><span class="line">Integer count = redisService.get(AccessKey.access,url+<span class="string">"_"</span>+user.getId(),Integer.class);</span><br><span class="line"><span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line">    redisService.set(AccessKey.access,url+<span class="string">"_"</span>+user.getId(),<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(count &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    redisService.incr(AccessKey.access,url+<span class="string">"_"</span>+user.getId());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.error(CodeMsg.ACCESS_LIMIT_REACH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>AccessKey</code>是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessKey</span> <span class="keyword">extends</span> <span class="title">BasePrefix</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AccessKey</span><span class="params">(<span class="keyword">int</span> expireSeconds, String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(expireSeconds, prefix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AccessKey access = <span class="keyword">new</span> AccessKey(<span class="number">5</span>, <span class="string">"access"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然逻辑不是很严谨，这里只是做限流的一个示范。</p><p>下面考虑比较通用的限流方法，因为可能每个接口的限制次数是不一样的，显然这种写死的方式不适合的。而这种代码只是保护层次的，不是业务代码，所以可以在拦截器中实现这个功能。</p><p>对于这个接口，我们想实现的效果是，在上面打上相应的注解，这个接口就会受到一定的限制。</p><p>比如，我想在5秒内最多请求5次，并且必须要登陆：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit</span>(seconds = <span class="number">5</span>,maxCount = <span class="number">5</span>,needLogin = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>首先是创建注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">seconds</span><span class="params">()</span></span>;<span class="comment">//缓存多长时间</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCount</span><span class="params">()</span></span>;<span class="comment">//规定时间内最大访问次数</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">needLogin</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;<span class="comment">//是否需要登陆</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想这个注解能够生效，必须要配置拦截器<code>AccessInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MiaoshaUserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod)&#123;</span><br><span class="line">            MiaoshaUser user = getUser(request,response);</span><br><span class="line">            <span class="comment">//将user信息存放到ThreadLocal中</span></span><br><span class="line">            UserContext.setUser(user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取注解，没有此注解的话，直接放行</span></span><br><span class="line">            HandlerMethod hm = (HandlerMethod)handler;</span><br><span class="line">            AccessLimit accessLimit = hm.getMethodAnnotation(AccessLimit.class);</span><br><span class="line">            <span class="keyword">if</span>(accessLimit == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出注解中参数的值</span></span><br><span class="line">            <span class="keyword">int</span> seconds = accessLimit.seconds();</span><br><span class="line">            <span class="keyword">int</span> maxCount = accessLimit.maxCount();</span><br><span class="line">            <span class="keyword">boolean</span> needLogin = accessLimit.needLogin();</span><br><span class="line">            String key = request.getRequestURI();</span><br><span class="line">            <span class="comment">//判断是否要必须登陆，如要是必须登陆，看user是否为空，为空的话直接返回fasle和给前台</span></span><br><span class="line">            <span class="keyword">if</span>(needLogin)&#123;</span><br><span class="line">                <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    render(response, CodeMsg.SESSION_ERROR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                key += <span class="string">"_"</span>+user.getId();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//限制访问次数</span></span><br><span class="line">            Integer count = redisService.get(AccessKey.withExpire(seconds),key,Integer.class);</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line">                redisService.set(AccessKey.withExpire(seconds),key,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count &lt; maxCount)&#123;</span><br><span class="line">                redisService.incr(AccessKey.withExpire(seconds),key);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                render(response, CodeMsg.ACCESS_LIMIT_REACH);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(HttpServletResponse response, CodeMsg cm)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);<span class="comment">//防止中文乱码</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line">        String str = JSON.toJSONString(Result.error(cm));</span><br><span class="line">        out.write(str.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MiaoshaUser <span class="title">getUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String paramToken = request.getParameter(CookieUtil.COOKIE_NAME);</span><br><span class="line">        String cookieToken = CookieUtil.readLoginToken(request);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;</span><br><span class="line">        <span class="keyword">return</span> userService.getByToken(token,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们之前从<code>cookie</code>中取<code>token</code>，然后再从<code>redis</code>中取出<code>user</code>信息是在<code>UserArgumentResolver</code>中做的，而他实在拦截器后面工作的，其实如果使用拦截器的话，这个就不需要了，但是因为我们这里只改造了<code>path</code>这个接口，其他的接口就不加注解进行测试，所以这个类还是要保留一下的，但是主要的逻辑已经全部被拦截器做完了，这里只需要从<code>ThreadLocal</code>中取出<code>User</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class="line">        <span class="keyword">return</span> clazz== MiaoshaUser.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserContext.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想这个拦截器工作，我们要重写<code>WebMvcConfigurerAdapter</code>中的<code>addInterceptors</code>方法，将我们的拦截器添加进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(accessInterceptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，利用注解和拦截器就实现了比较优雅的限流功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了仿真无用的点击以及恶意的攻击，我们可以考虑隐藏地址，增加图形验证码以及限制点击次数等手段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>6.服务级高并发秒杀优化（RabbitMQ+接口优化）</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/6.%E6%9C%8D%E5%8A%A1%E7%BA%A7%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96%EF%BC%88RabbitMQ+%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/6.服务级高并发秒杀优化（RabbitMQ+接口优化）/</id>
    <published>2019-04-23T10:48:18.414Z</published>
    <updated>2019-04-23T11:16:03.332Z</updated>
    
    <content type="html"><![CDATA[<p>前端优化完了，后端也需要优化，为了提高系统的健壮性和吞吐量，往往需要结合MQ来进行优化。本文结合rabbitMQ进行操作。但是只是解决了部分问题，其实里面暗含很多其他问题。，比如MQ消费失败问题，事务问题等。</p><a id="more"></a><h2>1. 安装RabbitMQ</h2><p>linux下的安装没什么可说的，因为本机懒得重装虚拟机了，所以就下载了windows版本进行安装。</p><p>erlang下载地址：<a href="http://www.erlang.org/download.html" target="_blank" rel="noopener">http://www.erlang.org/download.html</a></p><p>rabbitMQ下载：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a></p><p>直接下载安装即可。</p><p>因为想用可视化界面监控消息，所以先激活这个功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//到rabbitMQ安装目录的sbin目录下启动cmd黑窗口</span><br><span class="line">E:\software\RabbitMQServer\rabbitmq_server-3.6.5\sbin&gt;rabbitmq-plugins.bat enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>然后重启<code>rabbitMQ</code>服务。输入网址：<code>http://localhost:15672/</code>。 使用默认用户<code>guest/guest</code>进入网页端控制台。</p><h2>2. rabbitMQ基本原理和使用</h2><h4>rabbitMQ原理</h4><p><img src="http://bloghello.oursnail.cn/rabbitMQ.png" alt="image"></p><ul><li>Broker：简单来说就是消息队列服务器实体。</li><li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li><li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li><li>Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。</li><li>Routing Key：路由关键字，exchange根据这个关键字进行消息投递。</li><li>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</li><li>producer：消息生产者，就是投递消息的程序。</li><li>consumer：消息消费者，就是接受消息的程序。</li><li>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</li></ul><h4>消息队列的使用过程大概如下</h4><ul><li>客户端连接到消息队列服务器，打开一个<code>channel</code>。</li><li>客户端声明一个<code>exchange</code>，并设置相关属性。</li><li>客户端声明一个<code>queue</code>，并设置相关属性。</li><li>客户端使用<code>routing key</code>，在<code>exchange</code>和<code>queue</code>之间建立好绑定关系。</li><li>客户端投递消息到<code>exchange</code>。</li></ul><p>总结：<code>exchange</code>接收到消息后，就根据消息的<code>key</code>和已经设置的<code>binding</code>，进行消息路由，将消息投递到一个或多个队列里。</p><h4>Direct交换机</h4><p>完全根据<code>key</code>进行投递的叫做<strong>Direct交换机</strong>，例如，绑定时设置了<code>routing key</code>为”abc”，那么客户端提交的消息，只有设置了<code>key</code>为”abc”的才会投递到队列。</p><p><img src="http://bloghello.oursnail.cn/Direct_Exchange.png" alt="image"></p><p>所有发送到<code>Direct Exchange</code>的消息被转发到<code>RouteKey</code>中指定的<code>Queue</code>。</p><p><code>Direct</code>模式,可以使用<code>rabbitMQ</code>自带的<code>Exchange：default Exchange</code> 。所以不需要将<code>Exchange</code>进行任何绑定(<code>binding</code>)操作 。消息传递时，<code>RouteKey</code>必须完全匹配，才会被队列接收，否则该消息会被抛弃。</p><h4>Topic交换机</h4><p>对<code>key</code>进行模式匹配后进行投递的叫做<strong>Topic交换机</strong>。*（星号）可以代替一个任意标识符 ；#（井号）可以代替零个或多个标识符。</p><p><img src="http://bloghello.oursnail.cn/rabbitMQ_topic.png" alt="image"></p><p>在上图例子中，我们发送描述动物的消息。消息会转发给包含3个单词（2个小数点）的路由键绑定的队列中。绑定键中的第一个单词描述的是速度，第二个是颜色，第三个是物种：“速度.颜色.物种”。<br>我们创建3个绑定：Q1绑定键是“<em>.orange.</em>”，Q2绑定键是“<em>.</em>.rabbit”，Q3绑定键是“lazy.#”。这些绑定可以概括为：Q1只对橙色的动物感兴趣。Q2则是关注兔子和所有懒的动物。</p><p>所有发送到<code>Topic Exchange</code>的消息被转发到所有关心<code>RouteKey</code>中指定<code>Topic</code>的<code>Queue</code>上，</p><p>所有发送到<code>Topic Exchange</code>的消息被转发到所有关心<code>RouteKey</code>中指定<code>Topic</code>的<code>Queue</code>上，</p><blockquote><p><code>Exchange</code> 将<code>RouteKey</code> 和某<code>Topic</code> 进行模糊匹配。此时队列需要绑定一个<code>Topic</code>。可以使用通配符进行模糊匹配，符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“log.#”能够匹配到“log.info.oa”，但是“log.</em>” <strong>只会</strong>匹配到“log.error”。</p></blockquote><h4>Fanout交换机</h4><p>还有一种不需要<code>key</code>的，叫做<strong>Fanout交换机</strong>，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。</p><p><img src="http://bloghello.oursnail.cn/Fanout_Exchange.png" alt="image"></p><p>所有发送到<code>Fanout Exchange</code>的消息都会被转发到与该<code>Exchange</code> 绑定(<code>Binding</code>)的所有<code>Queue</code>上。</p><p>Fanout Exchange  不需要处理RouteKey 。只需要简单的将队列绑定到exchange 上。这样发送到exchange的消息都会被转发到与该交换机绑定的所有队列上。类似子网广播，每台子网内的主机都获得了一份复制的消息。</p><p><strong>所以，Fanout Exchange 转发消息是最快的。</strong></p><h4>Headers交换机</h4><p>首部交换机是忽略<code>routing_key</code>的一种路由方式。<strong>路由器和交换机路由的规则是通过<code>Headers</code>信息来交换的，这个有点像<code>HTTP</code>的<code>Headers</code></strong>。将一个交换机声明成首部交换机，绑定一个队列的时候，定义一个<code>Hash</code>的数据结构，消息发送的时候，会携带一组hash数据结构的信息，<strong>当Hash的内容匹配上的时候，消息就会被写入队列</strong>。</p><p>绑定交换机和队列的时候，Hash结构中要求携带一个键“x-match”，这个键的<code>Value</code>可以是<code>any</code>或者<code>all</code>，<strong>这代表消息携带的Hash是需要全部匹配(<code>all</code>)，还是仅匹配一个键(<code>any</code>)就可以了</strong>。相比直连交换机，首部交换机的<strong>优势是匹配的规则不被限定为字符串</strong>(string)。</p><h4>持久化</h4><p><code>RabbitMQ</code>支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：</p><ul><li><code>exchange</code>持久化，在声明时指定<code>durable =&gt; 1</code></li><li><code>queue</code>持久化，在声明时指定<code>durable =&gt; 1</code></li><li>消息持久化，在投递时指定<code>delivery_mode =&gt; 2</code>（1是非持久化）</li></ul><p>如果<code>exchange</code>和<code>queue</code>都是持久化的，那么它们之间的<code>binding</code>也是持久化的。如果<code>exchange</code>和<code>queue两</code>者之间有一个持久化，一个非持久化，就不允许建立绑定。</p><h2>3. rabbitMQ-Direct交换机</h2><p>这种模式是最简单的模式，就发送一串字符串，这个字符串为<code>key</code>，接收的时候也完全以这个字符串本来来确定，不需要绑定任何<code>exchange</code>，使用默认的就行。我们以这个模式开始在原来的项目上继续集成。</p><p>首先是引入依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--rabbitMQ--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>appilication.yml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">127.0</span>.0.1</span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    virtual-host: /</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        concurrency: <span class="number">10</span></span><br><span class="line">        max-concurrency: <span class="number">10</span></span><br><span class="line">        prefetch: <span class="number">1</span></span><br><span class="line">        auto-startup: <span class="keyword">true</span></span><br><span class="line">        <span class="keyword">default</span>-requeue-rejected: <span class="keyword">true</span></span><br><span class="line">    template:</span><br><span class="line">      retry:</span><br><span class="line">        enabled: <span class="keyword">true</span></span><br><span class="line">        initial-interval: <span class="number">1000</span></span><br><span class="line">        max-attempts: <span class="number">3</span></span><br><span class="line">        max-interval: <span class="number">10000</span></span><br><span class="line">        multiplier: <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><code>rabbitMQ</code>配置类<code>MQConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//MQ name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_NAME = <span class="string">"queue"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送者<code>MQSender</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.DIRECT_QUEUE_NAME,message);</span><br><span class="line">        log.info(<span class="string">"send:&#123;&#125;"</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收者<code>MQReceiver</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.DIRECT_QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"receive:&#123;&#125;"</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就完成了最简单的一个字符串的发送-接受。可以在<code>controller</code>中随便测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/mq"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mq</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mqSender.send(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>4. rabbitMQ-Topic交换机</h2><p>这个模式正如上面所言，是可以匹配通配符的，显然更加灵活，这里用程序测试一下这个模式效果。</p><p>MQConfig：</p><p>先来几个常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//queue1名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_NAME1 = <span class="string">"topic.queue1"</span>;</span><br><span class="line"><span class="comment">//queue2名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_NAME2 = <span class="string">"topic.queue2"</span>;</span><br><span class="line"><span class="comment">//交换机名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE_NAME = <span class="string">"topicExchange"</span>;</span><br><span class="line"><span class="comment">//key等于topic.key1的，后面将配置为只被queue1接收</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_KEY_ROUTE1 = <span class="string">"topic.key1"</span>;</span><br><span class="line"><span class="comment">//key匹配topic.#的都被接收进queue2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_KEY_ROUTE2 = <span class="string">"topic.#"</span>;</span><br></pre></td></tr></table></figure><p>下面配置几个<code>bean</code>：</p><p><em>注：带有 <code>@Configuration</code> 的注解类表示这个类可以使用 <code>Spring IoC</code> 容器作为 <code>bean</code> 定义的来源。<code>@Bean</code> 注解告诉 <code>Spring</code>，一个带有 <code>@Bea</code>n 的注解方法将返回一个对象，该对象应该被注册为在 <code>Spring</code>应用程序上下文中的 <code>bean</code>。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建两个QUEUE对象queue1，queue2的bean被spring管理</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE_NAME1,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE_NAME2,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPIC_EXCHANGE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//queue1--交换机--匹配规则1</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(TOPIC_KEY_ROUTE1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//queue2--交换机--匹配规则2</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(TOPIC_KEY_ROUTE2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQSender：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息1与topic.key1和topic.#都匹配；</span></span><br><span class="line"><span class="comment">//消息2与topic.key1不匹配，只与topic.#匹配，那么只能被queue2接收</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopic</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"send topic msg:&#123;&#125;"</span>,message);</span><br><span class="line">    amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE_NAME,<span class="string">"topic.key1"</span>,message+<span class="string">"--1"</span>);</span><br><span class="line">    amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE_NAME,<span class="string">"topic.key2"</span>,message+<span class="string">"--2"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQReceiver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.TOPIC_QUEUE_NAME1)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopic1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"topic queue1 receive:&#123;&#125;"</span>,message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.TOPIC_QUEUE_NAME2)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopic2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"topic queue2 receive:&#123;&#125;"</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试一把：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mq/topic"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">mq_topic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mqSender.sendTopic(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-05-26 18:59:40.281  INFO 9920 --- [nio-8080-exec-1] com.swg.miaosha.mq.MQSender : send topic msg:hello world</span><br><span class="line">2018-05-26 18:59:40.303  INFO 9920 --- [cTaskExecutor-1] com.swg.miaosha.mq.MQReceiver : topic queue2 receive:hello world--1</span><br><span class="line">2018-05-26 18:59:40.303  INFO 9920 --- [TaskExecutor-10] com.swg.miaosha.mq.MQReceiver : topic queue2 receive:hello world--2</span><br><span class="line">2018-05-26 18:59:40.303  INFO 9920 --- [cTaskExecutor-1] com.swg.miaosha.mq.MQReceiver : topic queue1 receive:hello world--1</span><br></pre></td></tr></table></figure><p>运行结果与初期的分析结果一致。</p><h2>5. rabbitMQ-Fanout交换机</h2><p>这种就是广播模式，即所有的绑定到指定的<code>exchange</code>上的<code>queue</code>都可以接收消息。</p><p>MQConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE_NAME = <span class="string">"fanoutExchage"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_NAME1 = <span class="string">"fanout.queue1"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_NAME2 = <span class="string">"fanout.queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_QUEUE_NAME1,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_QUEUE_NAME2,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUT_EXCHANGE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQSender：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFanout</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"send fanout msg:&#123;&#125;"</span>,message);</span><br><span class="line">    amqpTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE_NAME,<span class="string">""</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQReceiver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.FANOUT_QUEUE_NAME1)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveFanout1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"fanout queue1 receive:&#123;&#125;"</span>,message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.FANOUT_QUEUE_NAME2)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveFanout2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"fanout queue2 receive:&#123;&#125;"</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-26 20:03:29.592  INFO 16680 --- [nio-8080-exec-1] com.swg.miaosha.mq.MQSender              : send fanout msg:hello world</span><br><span class="line">2018-05-26 20:03:29.619  INFO 16680 --- [cTaskExecutor-1] com.swg.miaosha.mq.MQReceiver            : fanout queue1 receive:hello world</span><br><span class="line">2018-05-26 20:03:29.619  INFO 16680 --- [cTaskExecutor-1] com.swg.miaosha.mq.MQReceiver            : fanout queue2 receive:hello world</span><br></pre></td></tr></table></figure><p>queue1和queue2都接受到了消息。</p><h2>6. rabbitMQ-Headers交换机</h2><p>MQConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADERS_EXCHANGE_NAME = <span class="string">"headersExchage"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADERS_QUEUE_NAME = <span class="string">"headers.queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeadersExchange <span class="title">headersExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeadersExchange(HEADERS_EXCHANGE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">headersQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(HEADERS_QUEUE_NAME,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//就是说要完全匹配这个Map才能进入queue中发送出去</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">headersBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"header1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">    map.put(<span class="string">"header2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(headersQueue()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQSender：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map要一样</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHeaders</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">    String msg = RedisService.beanToString(message);</span><br><span class="line">    log.info(<span class="string">"send fanout msg:&#123;&#125;"</span>,message);</span><br><span class="line">    MessageProperties properties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    properties.setHeader(<span class="string">"header1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">    properties.setHeader(<span class="string">"header2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">    Message obj = <span class="keyword">new</span> Message(msg.getBytes(),properties);</span><br><span class="line">    amqpTemplate.convertAndSend(MQConfig.HEADERS_EXCHANGE_NAME,<span class="string">""</span>,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQReceiver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.HEADERS_QUEUE_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveHeaders</span><span class="params">(<span class="keyword">byte</span>[] message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"fanout queue2 receive:&#123;&#125;"</span>,<span class="keyword">new</span> String(message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>7. 秒杀优化</h2><p>思路：减少数据库访问</p><ul><li>系统初始化，把商品库存数量加载到<code>redis</code></li><li>收到请求，<code>redis</code>预减库存，库存不够，直接返回，否则进入3</li><li>请求入队，立即返回排队中</li><li>请求出队，生成订单，减少库存</li><li>客户端轮询，是否秒杀成功</li></ul><p>对于之前的秒杀接口<code>do_miaosha</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">    <span class="comment">//判断库存</span></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    <span class="keyword">if</span>(goodsVo.getStockCount() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单,需要在一个事务中执行</span></span><br><span class="line">    OrderInfo orderInfo = miaoshaService.miaosha(user,goodsVo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(orderInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里判断库存是直接从数据库查，因为并发量比较大，存在性能问题。后面秒杀到之后，也不是直接减库存， 而是将其放到消息队列中慢慢交给数据库去调整。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.预减库存进行优化</span></span><br><span class="line">    <span class="comment">/*********************************优化1开始*************************************/</span></span><br><span class="line">    <span class="keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line">    <span class="keyword">if</span>(stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************优化1结束*************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************优化2开始*************************************/</span></span><br><span class="line">    <span class="comment">//3.进入消息队列</span></span><br><span class="line">    MiaoshaMessage message = <span class="keyword">new</span> MiaoshaMessage();</span><br><span class="line">    message.setUser(user);</span><br><span class="line">    message.setGoodsId(goodsId);</span><br><span class="line">    sender.sendMiaoshaMessage(message);</span><br><span class="line">    <span class="comment">/*********************************优化2结束*************************************/</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="number">0</span>);<span class="comment">//排队中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在消息队列中对消息进行消化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.MIAOSHA_QUEUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"receive message:&#123;&#125;"</span>,message);</span><br><span class="line">    MiaoshaMessage msg = RedisService.stringToBean(message,MiaoshaMessage.class);</span><br><span class="line">    MiaoshaUser user = msg.getUser();</span><br><span class="line">    <span class="keyword">long</span> goodsId = msg.getGoodsId();</span><br><span class="line">    <span class="comment">//判断数据库库存是否真的足够</span></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    <span class="keyword">if</span>(goodsVo.getStockCount() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单,需要在一个事务中执行</span></span><br><span class="line">    OrderInfo orderInfo = miaoshaService.miaosha(user,goodsVo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>controller</code>中的优化1：<code>redis</code>预减库存。那么需要在系统启动的时候将秒杀商品的库存先添加到<code>redis</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoshaController</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span></span><br></pre></td></tr></table></figure><p>重写<code>afterPropertiesSet()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//将秒杀商品的库存全部先存储到redis中</span></span><br><span class="line">    List&lt;GoodsVo&gt; goodsVoList = goodsService.getGoodsVoList();</span><br><span class="line">    <span class="keyword">if</span>(goodsVoList == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(GoodsVo goods:goodsVoList)&#123;</span><br><span class="line">        redisService.set(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goods.getId(),goods.getStockCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于前端，这时也要进行修改了，因为点击秒杀商品按键后，这里考虑三种情况：排队等待、失败、成功。那么这里规定-1为失败，0为排队，1为秒杀成功已经写入数据库。</p><p>原来的<code>detail.htm</code>中秒杀事件函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMiaosha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"/miaosha/do_miaosha"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+data.data.id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>秒杀到商品就直接返回，现在后端改为消息队列，所以需要增加函数进行判断，必要时需要轮询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+data.data.id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以将其改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他的部分省略</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//window.location.href="/order_detail.htm?orderId="+data.data.id;</span></span><br><span class="line">    <span class="comment">//秒杀到商品的时候，这个时候不是直接返回成功，后端是进入消息队列，所以前端是轮询结果，显示排队中</span></span><br><span class="line">    getMiaoshaResult($(<span class="string">"#goodsId"</span>).val());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMiaoshaResult</span>(<span class="params">goodsId</span>) </span>&#123;</span><br><span class="line">    g_showLoading();</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/miaosha/result"</span>,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = data.data;</span><br><span class="line">                <span class="comment">//失败---    -1</span></span><br><span class="line">                <span class="keyword">if</span>(result &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    layer.msg(<span class="string">"对不起，秒杀失败！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//排队等待，轮询---   0</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;<span class="comment">//继续轮询</span></span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        getMiaoshaResult(goodsId);</span><br><span class="line">                    &#125;,<span class="number">50</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//成功----   1</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    layer.msg(<span class="string">"恭喜你，秒杀成功，查看订单?"</span>,&#123;<span class="attr">btn</span>:[<span class="string">"确定"</span>,<span class="string">"取消"</span>]&#125;,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+result;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.closeAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                layer.msg(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么相应地，后台也要增加一个方法：<code>result</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Long&gt; <span class="title">result</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> result = miaoshaService.getMiaoshaResult(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何标记状态呢？这就是<code>getMiaoshaResult</code>方法所做的事情。</p><p>对于成功的状态判断，很简单，从数据库查，能查到就说明已经秒杀成功，否则就是两种情况：失败或者正在等待生成订单。</p><p>对于这两种状态，我们需要用redis来实现，思路是：在系统初始化的时候，redis中设置秒杀商品是否卖完的状态为false—即未卖完；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMiaoshaResult</span><span class="params">(Long userId, <span class="keyword">long</span> goodsId)</span> </span>&#123;</span><br><span class="line">    MiaoshaOrder orderInfo = orderService.getMiaoshaOrderByUserIdGoodsId(userId,goodsId);</span><br><span class="line">    <span class="keyword">if</span>(orderInfo != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> orderInfo.getId();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isOver = getGoodsOver(goodsId);</span><br><span class="line">        <span class="keyword">if</span>(isOver)&#123;</span><br><span class="line">            <span class="comment">//库存已经没了</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//表示还没入库，继续等待结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>MiaoshaService</code>中的<code>Miaosha</code>方法：数据库减库存失败的话，说明数据库的库存已经小于0了，那么这个时候，立即将redis初始设置的秒杀商品是否卖完的状态为true，表示商品已经全部卖完，返回秒杀失败。否则就是要前端等待等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderInfo <span class="title">miaosha</span><span class="params">(MiaoshaUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单</span></span><br><span class="line">    <span class="keyword">boolean</span> success =goodsService.reduceStock(goods);</span><br><span class="line">    <span class="keyword">if</span>(success)&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.createOrder(user,goods);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        setGoodsOver(goods.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于两个小方法<code>getGoodsOver</code>和<code>setGoodsOver</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setGoodsOver</span><span class="params">(<span class="keyword">long</span> goodId)</span></span>&#123;</span><br><span class="line">    redisService.set(MiaoshaKey.isGoodsOver,<span class="string">""</span>+goodId,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getGoodsOver</span><span class="params">(<span class="keyword">long</span> goodsId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisService.exists(MiaoshaKey.isGoodsOver,<span class="string">""</span>+goodsId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>redis</code>预减库存，然后消息队列来进行创建订单就实现了。</p><p>当然，对于<code>redis</code>预减库存这一点，还有要优化的地方，就是现在的<code>do_miaosha</code>接口是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.预减库存进行优化</span></span><br><span class="line">    <span class="comment">/*********************************优化1开始*************************************/</span></span><br><span class="line">    <span class="keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line">    <span class="keyword">if</span>(stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************优化1结束*************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************优化2开始*************************************/</span></span><br><span class="line">    <span class="comment">//3.进入消息队列</span></span><br><span class="line">    MiaoshaMessage message = <span class="keyword">new</span> MiaoshaMessage();</span><br><span class="line">    message.setUser(user);</span><br><span class="line">    message.setGoodsId(goodsId);</span><br><span class="line">    sender.sendMiaoshaMessage(message);</span><br><span class="line">    <span class="comment">/*********************************优化2结束*************************************/</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="number">0</span>);<span class="comment">//排队中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当秒杀商品已经没了的时候，就没有必要再去<code>redis</code>中进行判断了，毕竟查询<code>redis</code>也是需要网络开销的，解决思路是：在内存中进行判断，如果<code>redisService.decr</code>得到的<code>stock</code>少于零的时候，直接将内存中的一个标志改变一下，那么下次再进入<code>do_miaosha</code>接口，先判断内存这个标记，如果库存已经小于0了，就不再访问<code>redis</code>，而是直接返回秒杀商品已经卖完。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************对redis预减库存再优化***************************</span></span><br><span class="line"><span class="comment">    //内存标记，减少不必要的redis的访问</span></span><br><span class="line"><span class="comment">    boolean over = localOverMap.get(goodsId);</span></span><br><span class="line"><span class="comment">    if(over)&#123;</span></span><br><span class="line"><span class="comment">        return Result.error(CodeMsg.MIAO_SHA_OVER);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    *******************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//预减库存进行优化</span></span><br><span class="line">    <span class="keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line">    <span class="keyword">if</span>(stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        localOverMap.put(goodsId,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入消息队列</span></span><br><span class="line">    MiaoshaMessage message = <span class="keyword">new</span> MiaoshaMessage();</span><br><span class="line">    message.setUser(user);</span><br><span class="line">    message.setGoodsId(goodsId);</span><br><span class="line">    sender.sendMiaoshaMessage(message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="number">0</span>);<span class="comment">//排队中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个<code>map</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Long,Boolean&gt; localOverMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>那么在<code>afterPropertiesSet</code>这个系统加载的初始化方法中对这个<code>map</code>进行初始化，<code>goodsId--stock</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localOverMap.put(goods.getId(),<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>在原来的<code>redis</code>预减库存初，发现库存小于0 ，就改为true:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    localOverMap.put(goodsId,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<code>do_miaosha</code>接口变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内存标记，减少不必要的redis的访问</span></span><br><span class="line">    <span class="keyword">boolean</span> over = localOverMap.get(goodsId);</span><br><span class="line">    <span class="keyword">if</span>(over)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预减库存进行优化</span></span><br><span class="line">    <span class="keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line">    <span class="keyword">if</span>(stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        localOverMap.put(goodsId,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入消息队列</span></span><br><span class="line">    MiaoshaMessage message = <span class="keyword">new</span> MiaoshaMessage();</span><br><span class="line">    message.setUser(user);</span><br><span class="line">    message.setGoodsId(goodsId);</span><br><span class="line">    sender.sendMiaoshaMessage(message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="number">0</span>);<span class="comment">//排队中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，整个关于<code>redis</code>预减库存和<code>rabbitMQ</code>创建订单这个优化已经基本完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端优化完了，后端也需要优化，为了提高系统的健壮性和吞吐量，往往需要结合MQ来进行优化。本文结合rabbitMQ进行操作。但是只是解决了部分问题，其实里面暗含很多其他问题。，比如MQ消费失败问题，事务问题等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>5.页面级高并发秒杀优化（Redis缓存+静态化分离）</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/5.%E9%A1%B5%E9%9D%A2%E7%BA%A7%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96%EF%BC%88Redis%E7%BC%93%E5%AD%98+%E9%9D%99%E6%80%81%E5%8C%96%E5%88%86%E7%A6%BB%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/5.页面级高并发秒杀优化（Redis缓存+静态化分离）/</id>
    <published>2019-04-23T10:48:01.188Z</published>
    <updated>2019-04-23T11:11:39.879Z</updated>
    
    <content type="html"><![CDATA[<p>尝试对前端页面进行相应的优化，比较典型的是缓存，一些东西可以存在浏览器身上或者redis中，提高相应速度，降低后端压力。</p><a id="more"></a><h2>1. 页面缓存</h2><p>这里以商品列表页面为例。</p><p>原来的商品列表页面是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"to_list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toList</span><span class="params">(Model model,MiaoshaUser user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    List&lt;GoodsVo&gt; goodsVoList = goodsService.getGoodsVoList();</span><br><span class="line">    model.addAttribute(<span class="string">"goodsList"</span>,goodsVoList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"goods_list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给他添加页面缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"to_list"</span>,produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toList</span><span class="params">(Model model, MiaoshaUser user, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        response.sendRedirect(<span class="string">"/login/to_login"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="comment">//先尝试从缓存中取</span></span><br><span class="line">    String html = redisService.get(GoodsKey.getGoodsList,<span class="string">""</span>,String.class);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html))&#123;</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取不到，则手动渲染，再保存到redis</span></span><br><span class="line">    List&lt;GoodsVo&gt; goodsVoList = goodsService.getGoodsVoList();</span><br><span class="line">    model.addAttribute(<span class="string">"goodsList"</span>,goodsVoList);</span><br><span class="line">    SpringWebContext ctx = <span class="keyword">new</span> SpringWebContext(request,response,request.getServletContext(),</span><br><span class="line">                                                request.getLocale(), model.asMap(),applicationContext);</span><br><span class="line">    html = thymeleafViewResolver.getTemplateEngine().process(<span class="string">"goods_list"</span>,ctx);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html))&#123;</span><br><span class="line">        redisService.set(GoodsKey.getGoodsList,<span class="string">""</span>,html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于商品详情页面的缓存，原来是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/to_detail/&#123;goodsId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toDetail</span><span class="params">(@PathVariable(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId,Model model, MiaoshaUser user)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    model.addAttribute(<span class="string">"goods"</span>,goodsVo);</span><br><span class="line">    <span class="keyword">long</span> startAt = goodsVo.getStartDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> endAt = goodsVo.getEndDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> miaoshaStatus = <span class="number">0</span>;<span class="comment">//秒杀活动的状态，0-秒杀前；1-正在秒杀；2-秒杀结束</span></span><br><span class="line">    <span class="keyword">int</span> remainSeconds = <span class="number">0</span>;<span class="comment">//秒杀活动还剩多少秒</span></span><br><span class="line">    <span class="keyword">if</span>(now &lt; startAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.BEFORE_START;</span><br><span class="line">        remainSeconds = (<span class="keyword">int</span>)(startAt-now)/<span class="number">1000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (now &gt; endAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.AFTER_MIAOSHA;</span><br><span class="line">        remainSeconds = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.ON_MIAOSHA;</span><br><span class="line">        remainSeconds = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"miaoshaStatus"</span>,miaoshaStatus);</span><br><span class="line">    model.addAttribute(<span class="string">"remainSeconds"</span>,remainSeconds);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"goods_detail"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在改为如下，以<code>goodsid</code>作为区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/to_detail/&#123;goodsId&#125;"</span>,produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toDetail</span><span class="params">(@PathVariable(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId,Model model, MiaoshaUser user, HttpServletRequest request,</span></span><br><span class="line"><span class="function">                       HttpServletResponse response) <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        response.sendRedirect(<span class="string">"/login/to_login"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先尝试从缓存中取</span></span><br><span class="line">    String html = redisService.get(GoodsKey.getGoodsDetail,<span class="string">""</span>+goodsId,String.class);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html))&#123;</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    model.addAttribute(<span class="string">"goods"</span>,goodsVo);</span><br><span class="line">    <span class="keyword">long</span> startAt = goodsVo.getStartDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> endAt = goodsVo.getEndDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> miaoshaStatus = <span class="number">0</span>;<span class="comment">//秒杀活动的状态，0-秒杀前；1-正在秒杀；2-秒杀结束</span></span><br><span class="line">    <span class="keyword">int</span> remainSeconds = <span class="number">0</span>;<span class="comment">//秒杀活动还剩多少秒</span></span><br><span class="line">    <span class="keyword">if</span>(now &lt; startAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.BEFORE_START;</span><br><span class="line">        remainSeconds = (<span class="keyword">int</span>)(startAt-now)/<span class="number">1000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (now &gt; endAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.AFTER_MIAOSHA;</span><br><span class="line">        remainSeconds = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.ON_MIAOSHA;</span><br><span class="line">        remainSeconds = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"miaoshaStatus"</span>,miaoshaStatus);</span><br><span class="line">    model.addAttribute(<span class="string">"remainSeconds"</span>,remainSeconds);</span><br><span class="line"></span><br><span class="line">    SpringWebContext ctx = <span class="keyword">new</span> SpringWebContext(request,response,request.getServletContext(),</span><br><span class="line">            request.getLocale(), model.asMap(),applicationContext);</span><br><span class="line">    html = thymeleafViewResolver.getTemplateEngine().process(<span class="string">"goods_detail"</span>,ctx);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(html))&#123;</span><br><span class="line">        redisService.set(GoodsKey.getGoodsDetail,<span class="string">""</span>+goodsId,html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>2. 对象缓存</h2><p>就是对一个对象进行缓存，比如这里可以对<code>MiaoshaUser</code>这个对象进行缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MiaoshaUser <span class="title">getById</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先去缓存取</span></span><br><span class="line">    MiaoshaUser user = redisService.get(MiaoshaUserKey.getById,<span class="string">""</span>+id,MiaoshaUser.class);</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存没有则去数据库取</span></span><br><span class="line">    user = miaoshaUserDao.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">        redisService.set(MiaoshaUserKey.getById,<span class="string">""</span>+user.getId(),user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个逻辑是十分清晰的，但是如果我是更新一个信息呢？比如更新登录的用户的<code>Nickname</code>。那么就要注意，先更新数据库，在更新好数据库之后，一定要注意处理相关的缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUsername</span><span class="params">(String token,<span class="keyword">long</span> id,String newUsername)</span></span>&#123;</span><br><span class="line">    MiaoshaUser user = getById(id);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GlobalException(CodeMsg.MOBILE_NOT_EXIST);</span><br><span class="line">    <span class="comment">//更新数据库</span></span><br><span class="line">    MiaoshaUser toBeUpdate = <span class="keyword">new</span> MiaoshaUser();</span><br><span class="line">    toBeUpdate.setId(id);</span><br><span class="line">    toBeUpdate.setNickname(newUsername);</span><br><span class="line">    miaoshaUserDao.update(toBeUpdate);</span><br><span class="line">    <span class="comment">//处理缓存</span></span><br><span class="line">    redisService.del(MiaoshaUserKey.getById,<span class="string">""</span>+id);</span><br><span class="line">    user.setNickname(newUsername);</span><br><span class="line">    redisService.set(MiaoshaUserKey.token,token,user);<span class="comment">//token不能直接删除，否则会要求重新登录</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>3. 商品详情页面静态化</h2><p>之前我们队商品详情页面进行了<code>redis</code>缓存，因为这个接口只是展示相应产品详情和秒杀倒计时等信息，只要显示几个关键信息即可，其他的都可以进行静态化。</p><p>这种技术，我们其实已经做过了，在之前的电商项目中，前端用<code>vue.js</code>等其他js框架或者不用框架，直接<code>jquery</code>。前端分为两部分，一部分是不改变的<code>html</code>块，还有一块就是数据，他只要后端传数据到前端即可，用到<code>ajax</code>技术。</p><p>确定哪些是需要传到前端的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> miaoshaStatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remainSeconds = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> GoodsVo goods;</span><br><span class="line">    <span class="keyword">private</span> MiaoshaUser user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>detail</code>这个接口改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/detail/&#123;goodsId&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;DetailVo&gt; <span class="title">toDetail</span><span class="params">(@PathVariable(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId, MiaoshaUser user, HttpServletRequest request,</span></span><br><span class="line"><span class="function">                                 HttpServletResponse response) <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">        response.sendRedirect(<span class="string">"/login/to_login"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startAt = goodsVo.getStartDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> endAt = goodsVo.getEndDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> miaoshaStatus = <span class="number">0</span>;<span class="comment">//秒杀活动的状态，0-秒杀前；1-正在秒杀；2-秒杀结束</span></span><br><span class="line">    <span class="keyword">int</span> remainSeconds = <span class="number">0</span>;<span class="comment">//秒杀活动还剩多少秒</span></span><br><span class="line">    <span class="keyword">if</span>(now &lt; startAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.BEFORE_START;</span><br><span class="line">        remainSeconds = (<span class="keyword">int</span>)(startAt-now)/<span class="number">1000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (now &gt; endAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.AFTER_MIAOSHA;</span><br><span class="line">        remainSeconds = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.ON_MIAOSHA;</span><br><span class="line">        remainSeconds = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DetailVo detailVo = <span class="keyword">new</span> DetailVo();</span><br><span class="line">    detailVo.setUser(user);</span><br><span class="line">    detailVo.setGoods(goodsVo);</span><br><span class="line">    detailVo.setMiaoshaStatus(miaoshaStatus);</span><br><span class="line">    detailVo.setRemainSeconds(remainSeconds);</span><br><span class="line">    <span class="keyword">return</span> Result.success(detailVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端的数据已经有了，那么前端只要接收这些数据即可。</p><p>首先是在<code>static</code>目录下新建<code>goods_detail.htm</code>页面，里面讲<code>themeleaf</code>的动态获取的对象全部去除。改为最普通的<code>html</code>，只要用<code>id</code>来标识一下，然后在<code>js</code>中赋值即可。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品原价<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">id</span>=<span class="string">"goodsPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>秒杀价<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>  <span class="attr">id</span>=<span class="string">"miaoshaPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>库存数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>  <span class="attr">id</span>=<span class="string">"stockCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>js</code>部分，首先是打开页面就执行这个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//countDown();</span></span><br><span class="line">getDetail();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>里面的<code>getDetail</code>方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> goodsId = g_getQueryString(<span class="string">"goodsId"</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"/goods/detail/"</span>+goodsId,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">render(data.data);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取<code>goods_id</code>，因为<code>list</code>页面的商品详情请求是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&lt;a th:href=&quot;&apos;/goods_detail.htm?goodsId=&apos;+$&#123;goods.id&#125;&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>所以下面要获取这个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g_getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line"><span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line"><span class="keyword">if</span>(r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取到之后就请求后端接口，获取数据去渲染：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">detail</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> miaoshaStatus = detail.miaoshaStatus;</span><br><span class="line"><span class="keyword">var</span>  remainSeconds = detail.remainSeconds;</span><br><span class="line"><span class="keyword">var</span> goods = detail.goods;</span><br><span class="line"><span class="keyword">var</span> user = detail.user;</span><br><span class="line"><span class="keyword">if</span>(user)&#123;</span><br><span class="line">$(<span class="string">"#userTip"</span>).hide();</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"#goodsName"</span>).text(goods.goodsName);</span><br><span class="line">$(<span class="string">"#goodsImg"</span>).attr(<span class="string">"src"</span>, goods.goodsImg);</span><br><span class="line">$(<span class="string">"#startTime"</span>).text(<span class="keyword">new</span> <span class="built_in">Date</span>(goods.startDate).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br><span class="line">$(<span class="string">"#remainSeconds"</span>).val(remainSeconds);</span><br><span class="line">$(<span class="string">"#goodsId"</span>).val(goods.id);</span><br><span class="line">$(<span class="string">"#goodsPrice"</span>).text(goods.goodsPrice);</span><br><span class="line">$(<span class="string">"#miaoshaPrice"</span>).text(goods.miaoshaPrice);</span><br><span class="line">$(<span class="string">"#stockCount"</span>).text(goods.stockCount);</span><br><span class="line">countDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒计时<code>countDown()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> remainSeconds = $(<span class="string">"#remainSeconds"</span>).val();</span><br><span class="line"><span class="keyword">var</span> timeout;</span><br><span class="line"><span class="keyword">if</span>(remainSeconds &gt; <span class="number">0</span>)&#123;<span class="comment">//秒杀还没开始，倒计时</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">   $(<span class="string">"#miaoshaTip"</span>).html(<span class="string">"秒杀倒计时："</span>+remainSeconds+<span class="string">"秒"</span>);</span><br><span class="line">timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#countDown"</span>).text(remainSeconds - <span class="number">1</span>);</span><br><span class="line">$(<span class="string">"#remainSeconds"</span>).val(remainSeconds - <span class="number">1</span>);</span><br><span class="line">countDown();</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainSeconds == <span class="number">0</span>)&#123;<span class="comment">//秒杀进行中</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span>(timeout)&#123;</span><br><span class="line">clearTimeout(timeout);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"#miaoshaTip"</span>).html(<span class="string">"秒杀进行中"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//秒杀已经结束</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">$(<span class="string">"#miaoshaTip"</span>).html(<span class="string">"秒杀已经结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的日期格式化为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设定时间格式化函数，使用new Date().format("yyyyMMddhhmmss");</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">format</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = &#123;</span><br><span class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>,</span><br><span class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(),</span><br><span class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(),</span><br><span class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(),</span><br><span class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(format))</span><br><span class="line">        format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> args) &#123;</span><br><span class="line">        <span class="keyword">var</span> n = args[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + i + <span class="string">")"</span>).test(format))</span><br><span class="line">            format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span> ? n : (<span class="string">"00"</span> + n).substr((<span class="string">""</span> + n).length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2>4. 订单详情页面静态化</h2><p>之前的<code>do_miaosha</code>要进行修改，不能再返回<code>String</code>了，而是要返回<code>Json</code>数据，原来是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/do_miaosha"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="comment">//判断库存</span></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    <span class="keyword">if</span>(goodsVo.getStockCount() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.MIAO_SHA_OVER.getMsg());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.REPEATE_MIAOSHA.getMsg());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单,需要在一个事务中执行</span></span><br><span class="line">    OrderInfo orderInfo = miaoshaService.miaosha(user,goodsVo);</span><br><span class="line">    model.addAttribute(<span class="string">"orderInfo"</span>, orderInfo);</span><br><span class="line">    model.addAttribute(<span class="string">"goods"</span>, goodsVo);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"order_detail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/do_miaosha"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;OrderInfo&gt; <span class="title">do_miaosha</span><span class="params">(Model model, MiaoshaUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断库存</span></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    <span class="keyword">if</span>(goodsVo.getStockCount() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">    MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line">    <span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单,需要在一个事务中执行</span></span><br><span class="line">    OrderInfo orderInfo = miaoshaService.miaosha(user,goodsVo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(orderInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面按秒杀按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"buyButton"</span><span class="attr">onclick</span>=<span class="string">"doMiaosha()"</span>&gt;</span>立即秒杀<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"goodsId"</span>  <span class="attr">id</span>=<span class="string">"goodsId"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMiaosha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"/miaosha/do_miaosha"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+data.data.id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦抢到商品，那么就跳转到订单详情页面，<code>order_detail.htm</code>中的处理与上面的一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">detail</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> goods = detail.goods;</span><br><span class="line"><span class="keyword">var</span> order = detail.order;</span><br><span class="line">$(<span class="string">"#goodsName"</span>).text(goods.goodsName);</span><br><span class="line">$(<span class="string">"#goodsImg"</span>).attr(<span class="string">"src"</span>, goods.goodsImg);</span><br><span class="line">$(<span class="string">"#orderPrice"</span>).text(order.goodsPrice);</span><br><span class="line">$(<span class="string">"#createDate"</span>).text(<span class="keyword">new</span> <span class="built_in">Date</span>(order.createDate).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br><span class="line"><span class="keyword">var</span> status = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(order.status == <span class="number">0</span>)&#123;</span><br><span class="line">status = <span class="string">"未支付"</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(order.status == <span class="number">1</span>)&#123;</span><br><span class="line">status = <span class="string">"待发货"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"#orderStatus"</span>).text(status);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">getOrderDetail();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrderDetail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> orderId = g_getQueryString(<span class="string">"orderId"</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"/order/detail"</span>,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">orderId:orderId</span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">render(data.data);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要显示<code>order_detail</code>,他请求<code>/order/detail</code>这个接口，需要<code>order</code>和<code>goods</code>两个对象，所以新建一个<code>vo</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDetailVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> GoodsVo goods;</span><br><span class="line"><span class="keyword">private</span> OrderInfo order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>OrderController</code>增加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detail"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;OrderDetailVo&gt; <span class="title">info</span><span class="params">(MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"orderId"</span>)</span> <span class="keyword">long</span> orderId) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">OrderInfo order = orderService.getOrderById(orderId);</span><br><span class="line"><span class="keyword">if</span>(order == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.ORDER_NOT_EXIST);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> goodsId = order.getGoodsId();</span><br><span class="line">GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">OrderDetailVo vo = <span class="keyword">new</span> OrderDetailVo();</span><br><span class="line">vo.setOrder(order);</span><br><span class="line">vo.setGoods(goods);</span><br><span class="line"><span class="keyword">return</span> Result.success(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就ok了，对于商品详情和订单详情两个页面完成了静态化。</p><h2>5. 页面缓存</h2><p><code>Cache-Control</code>:指定缓存有多少时间</p><p>为了在浏览器端进行缓存，以及控制缓存时间，这里可以添加一些配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    resources:</span><br><span class="line">        <span class="keyword">static</span>-locations: classpath:/<span class="keyword">static</span>/</span><br><span class="line">        add-mappings: <span class="keyword">true</span></span><br><span class="line">        cache-period: <span class="number">3600</span></span><br><span class="line">        chain:</span><br><span class="line">          cache: <span class="keyword">true</span></span><br><span class="line">          enabled: <span class="keyword">true</span></span><br><span class="line">          gzipped: <span class="keyword">true</span></span><br><span class="line">          html-application-cache: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2>6. 解决超卖</h2><p>先解决卖成负数的问题：</p><p>在<code>reduceStock(MiaoshaGoods g);</code>这个方法里，<code>sql</code>要多加一个<code>stock_count &gt; 0</code>即：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> miaosha_goods <span class="keyword">set</span> stock_count = stock_count<span class="number">-1</span> <span class="keyword">where</span> goods_id=#&#123;goodsId&#125; <span class="keyword">and</span> stock_count &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>给<code>miaosha_order</code>中的<code>user_id</code>和<code>goods_id</code>建立唯一联合索引。保证同一个人不能秒杀都两个商品。</p><p>但是从压测结果来看，虽然解决了上面两个问题。但是仍然发生了超卖现象，即比如只有10件秒杀商品，但是有22个人抢到了。</p><p>— <strong>2019/4/17号补充</strong></p><p>关于这里的超卖问题，视频中的解决是用数据库的锁来实现，但是这样的话显然效率会比较低，我觉得可以交给redis+MQ来解决，redis结合lua脚本可以实现原子性，这样子可以保证redis中库存扣减不会出问题，再结合MQ的队列，可以避免高并发下发生库存扣减错误问题。这个在mama-buy这个项目中进行了一些演示和说明。</p><h2>7. 静态资源优化</h2><ul><li>js/css压缩</li><li>多个js/css组合，减少连接数</li><li>CDN就近访问</li><li>nginx加缓存，页面缓存，对象缓存</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试对前端页面进行相应的优化，比较典型的是缓存，一些东西可以存在浏览器身上或者redis中，提高相应速度，降低后端压力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>4.JMeter压测</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/4.JMeter%E5%8E%8B%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/4.JMeter压测/</id>
    <published>2019-04-23T10:47:47.386Z</published>
    <updated>2019-04-23T11:06:14.423Z</updated>
    
    <content type="html"><![CDATA[<p>要想知道一个系统的承受能力，那么必然要用一些工具进行压测，本节使用jmeter来进行压测，看看效果作为参考。</p><a id="more"></a><h2>1. JMeter入门</h2><ul><li>官网：<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a></li><li>使用：点击bat文件即可用运行</li><li>步骤：添加线程组、添加监听器(聚合报告)、线程组右键-&gt;添加sampler-》http请求</li></ul><p>在本地对<code>/goods/to_list</code>这个简单的压力测试，其实这个接口里面就一个任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GoodsVo&gt; goodsVoList = goodsService.getGoodsVoList();</span><br></pre></td></tr></table></figure><p>那么，我以1000的并发，循环10次，尽快执行完。测试结果发现吞吐量最高大约是350。这个并发量比较小。</p><h2>2. 自定义变量模拟多用户</h2><p>模拟多个不同用户同时操作。其实就是建立一个文件，然后引用配置文件中变量即可。下面有示例。</p><ol><li>测试计划-&gt;添加配置元件-&gt;<code>CSV Data Set Config</code></li><li>引用变量${}</li></ol><h2>3. JMeter命令行使用</h2><p>先在本地用软件生成一个<code>jmx</code>文件，将其上传到<code>Liunx</code>服务器上，这个服务器上现在跑当前程序的<code>war</code>包，如何生成这个<code>war</code>见下面介绍。</p><p>在<code>linux</code>上安装好<code>jmeter</code>执行：</p><blockquote><p><a href="http://jmeter.sh" target="_blank" rel="noopener">jmeter.sh</a> -n -t xxx.jmx -l result.jtl</p></blockquote><p>生成结果保存到<code>result.jtl</code>文件中。可以在图形化界面软件中打开这个结果进行查看。</p><p>在一台<code>linux</code>上进行测试，接口就上面提到的<code>to_list</code>。5000并发量，循环10次，在上面的测试结果大概是1267的QPS。记录此值，下面进行优化。</p><h4>3.1 秒杀接口测试</h4><p>我们的重点是对<code>do_miaosha</code>这个接口进行测试。但是呢，我们不能用一个user来测试，所以在压测之前，我们需要准备好数据：</p><p>整体思路是：先往数据库插入5000条数据，然后生成5000个<code>token</code>到一个<code>txt</code>文件中。</p><h4>3.2 连接数据库的工具类:DBUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">InputStream in = DBUtil.class.getClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>);</span><br><span class="line">props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.load(in);</span><br><span class="line">in.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String url = props.getProperty(<span class="string">"spring.datasource.url"</span>);</span><br><span class="line">String username = props.getProperty(<span class="string">"spring.datasource.username"</span>);</span><br><span class="line">String password = props.getProperty(<span class="string">"spring.datasource.password"</span>);</span><br><span class="line">String driver = props.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>);</span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(url,username, password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>3.3 db.properties文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/miaosha?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.filters=stat</span><br></pre></td></tr></table></figure><h4>3.4 执行程序，要先启动web程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(<span class="keyword">int</span> count)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">List&lt;MiaoshaUser&gt; users = <span class="keyword">new</span> ArrayList&lt;MiaoshaUser&gt;(count);</span><br><span class="line"><span class="comment">//生成用户</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line">MiaoshaUser user = <span class="keyword">new</span> MiaoshaUser();</span><br><span class="line">user.setId(<span class="number">13000000000L</span>+i);</span><br><span class="line">user.setLoginCount(<span class="number">1</span>);</span><br><span class="line">user.setNickname(<span class="string">"user"</span>+i);</span><br><span class="line">user.setRegisterDate(<span class="keyword">new</span> Date());</span><br><span class="line">user.setSalt(<span class="string">"1a2b3c"</span>);</span><br><span class="line">user.setPassword(MD5Util.inputPassToDbPass(<span class="string">"123456"</span>, user.getSalt()));</span><br><span class="line">users.add(user);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"create user"</span>);</span><br><span class="line"><span class="comment">////插入数据库</span></span><br><span class="line">Connection conn = DBUtil.getConn();</span><br><span class="line">String sql = <span class="string">"insert into miaosha_user(login_count, nickname, register_date, salt, password, id)values(?,?,?,?,?,?)"</span>;</span><br><span class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;users.size();i++) &#123;</span><br><span class="line">MiaoshaUser user = users.get(i);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, user.getLoginCount());</span><br><span class="line">pstmt.setString(<span class="number">2</span>, user.getNickname());</span><br><span class="line">pstmt.setTimestamp(<span class="number">3</span>, <span class="keyword">new</span> Timestamp(user.getRegisterDate().getTime()));</span><br><span class="line">pstmt.setString(<span class="number">4</span>, user.getSalt());</span><br><span class="line">pstmt.setString(<span class="number">5</span>, user.getPassword());</span><br><span class="line">pstmt.setLong(<span class="number">6</span>, user.getId());</span><br><span class="line">pstmt.addBatch();</span><br><span class="line">&#125;</span><br><span class="line">pstmt.executeBatch();</span><br><span class="line">pstmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">System.out.println(<span class="string">"insert to db"</span>);</span><br><span class="line"><span class="comment">//登录，生成token</span></span><br><span class="line">String urlString = <span class="string">"http://localhost:8080/login/do_login"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"D:/tokens.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(file.exists()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"rw"</span>);</span><br><span class="line">file.createNewFile();</span><br><span class="line">raf.seek(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;users.size();i++) &#123;</span><br><span class="line">MiaoshaUser user = users.get(i);</span><br><span class="line">URL url = <span class="keyword">new</span> URL(urlString);</span><br><span class="line">HttpURLConnection co = (HttpURLConnection)url.openConnection();</span><br><span class="line">co.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">co.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">OutputStream out = co.getOutputStream();</span><br><span class="line">String params = <span class="string">"mobile="</span>+user.getId()+<span class="string">"&amp;password="</span>+MD5Util.inputPassToFormPass(<span class="string">"123456"</span>);</span><br><span class="line">out.write(params.getBytes());</span><br><span class="line">out.flush();</span><br><span class="line">InputStream inputStream = co.getInputStream();</span><br><span class="line">ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="keyword">byte</span> buff[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = inputStream.read(buff)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">bout.write(buff, <span class="number">0</span> ,len);</span><br><span class="line">&#125;</span><br><span class="line">inputStream.close();</span><br><span class="line">bout.close();</span><br><span class="line">String response = <span class="keyword">new</span> String(bout.toByteArray());</span><br><span class="line">JSONObject jo = JSON.parseObject(response);</span><br><span class="line">String token = jo.getString(<span class="string">"data"</span>);</span><br><span class="line">System.out.println(<span class="string">"create token : "</span> + user.getId());</span><br><span class="line"></span><br><span class="line">String row = user.getId()+<span class="string">","</span>+token;</span><br><span class="line">raf.seek(raf.length());</span><br><span class="line">raf.write(row.getBytes());</span><br><span class="line">raf.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"write to file : "</span> + user.getId());</span><br><span class="line">&#125;</span><br><span class="line">raf.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">createUser(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后查看数据库是否生成了5000条用户信息，以及是否在D盘下生成了相应的<code>token</code>文件。</p><p>我们的目标是生成<code>userId</code>和<code>token</code>的文件，所以我们需要对<code>doLogin</code>这个方法进行修改，原来是返回<code>Result&lt;Boolean&gt;</code>，现在返回<code>Result&lt;String&gt;</code>,这个<code>String</code>就是生成的<code>token</code>。</p><p>如果顺利的话，生成的文件是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">13000000000,3e9e716b555047f2af8ccdb3224da4f2</span><br><span class="line">13000000001,53f55f4b1b3247669c5c2588548d8ee8</span><br><span class="line">13000000002,87a313072df74b2d944c3227b14c2d4a</span><br><span class="line">13000000003,77c7e4a834fd4986952a78c18c27d22c</span><br></pre></td></tr></table></figure><p>下面，打开<code>JMeter</code>软件，首先是按照上面的步骤<code>CSV Data Set Config</code>，引入<code>tokens.txt</code>这个文件。在<code>Variable Names</code>这一项写上<code>userId,token</code>，这样，就可以获取到这两个参数。</p><p><img src="http://bloghello.oursnail.cn/%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7token-JMeter%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE.png" alt="image"></p><p>然后配置好<code>http</code>请求：</p><p><img src="http://bloghello.oursnail.cn/JMeter-HTTP%E8%AF%B7%E6%B1%82.png" alt="image"></p><p>用<code>Aggregate Report</code>来查看结果。这里用5000的并发来发请求。</p><p>我在数据库准备5个秒杀商品。</p><p>在测试中，发现数据库的秒杀商品数量竟然变成了负数。。这个时候出现了线程安全，我们的超卖现象。</p><p>有的时候也能根据预期执行完，我们会发现5000个用户只有5个人抢到了。数据库里只有五条记录。秒杀的压力测试效果我们已经达到了，下面就是线程安全和提高并发量的工作了。</p><h2>4. redis压测工具redis-benchmark</h2><blockquote><p>redis-benchmark -h 127.0.0.1 p 6379 -c 100 -n 100000</p></blockquote><p>100个并发连接，100000个请求。</p><blockquote><p>redis-benchmark -h 127.0.0.1 p 6379 -q -d 100</p></blockquote><p>存取大小为100字节的数据包</p><h2>5. spring Boot打war包</h2><blockquote><p>添加<code>spring-boot-starter-tomcat</code>的<code>provided</code>依赖</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>maven-war-plugin</code>插件</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>不要忘记上面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>最后，修改启动函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoshaApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MiaoshaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(MiaoshaApplication.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>mvn clean package</code>命令，执行成功，就可以看到<code>war</code>包了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要想知道一个系统的承受能力，那么必然要用一些工具进行压测，本节使用jmeter来进行压测，看看效果作为参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>3.秒杀功能实现</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/3.%E7%A7%92%E6%9D%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/3.秒杀功能实现/</id>
    <published>2019-04-23T10:47:32.538Z</published>
    <updated>2019-04-23T11:03:17.131Z</updated>
    
    <content type="html"><![CDATA[<p>做秒杀，先把功能做出来再进行优化，因此本节主要实现下单的一个基本流程。</p><a id="more"></a><h2>1. 表设计</h2><p>商品表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`goods`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'商品ID'</span>,</span><br><span class="line"><span class="string">`goods_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</span><br><span class="line"><span class="string">`goods_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品标题'</span>,</span><br><span class="line"><span class="string">`goods_img`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品图片'</span>,</span><br><span class="line"><span class="string">`goods_detail`</span> LONGTEXT <span class="keyword">COMMENT</span> <span class="string">'商品的详情介绍'</span>,</span><br><span class="line"><span class="string">`goods_price`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'0.00'</span> <span class="keyword">COMMENT</span> <span class="string">'商品单价'</span>,</span><br><span class="line"><span class="string">`goods_stock`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'商品库存，-1表示没有限制'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>秒杀商品表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`miaosha_goods`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'秒杀商品ID'</span>,</span><br><span class="line"><span class="string">`goods_id`</span> <span class="built_in">BIGINT</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</span><br><span class="line"><span class="string">`miaosha_price`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'0.00'</span> <span class="keyword">COMMENT</span> <span class="string">'秒杀价'</span>,</span><br><span class="line"><span class="string">`stock_count`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'库存数量'</span>,</span><br><span class="line"><span class="string">`start_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'秒杀开始时间'</span>,</span><br><span class="line"><span class="string">`end_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'秒杀结束时间'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>订单信息表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`order_info`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'order ID'</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line"><span class="string">`goods_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</span><br><span class="line"><span class="string">`delivery_addr_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'收货地址'</span>,</span><br><span class="line"><span class="string">`goods_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</span><br><span class="line"><span class="string">`goods_count`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'商品数量'</span>,</span><br><span class="line"><span class="string">`goods_price`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'0.00'</span> <span class="keyword">COMMENT</span> <span class="string">'商品单价'</span>,</span><br><span class="line"><span class="string">`order_channel`</span> TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1pc,2android,3ios'</span>,</span><br><span class="line"><span class="string">`status`</span> TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'0新建未支付，2已支付，3已发货4，已收货，5已完成'</span>,</span><br><span class="line"><span class="string">`create_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单创建时间'</span>,</span><br><span class="line"><span class="string">`pay_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付时间'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>秒杀订单表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`miaosha_order`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'秒杀 order ID'</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line"><span class="string">`order_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单id'</span>,</span><br><span class="line"><span class="string">`goods_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2>2. 商品列表页展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select g.*,mg.stock_count,mg.start_date,mg.end_date,mg.miaosha_price from miaosha_goods mg left join goods g on mg.goods_id = g.id"</span>)</span><br><span class="line">    <span class="function">List&lt;GoodsVo&gt; <span class="title">getGoodsVoList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要创建一个vo对象来承载goods和miaosha_goods两个对象。</p><p>另外注意，之前的yml中对于mybatis的配置，忘记了配置驼峰写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configuration:</span><br><span class="line">    map-underscore-to-camel-<span class="keyword">case</span>: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>jsp就不贴在这了。</p><h2>3. 商品详情页面</h2><p>接收前端传来的<code>goods_id</code>，因为要处理显示秒杀活动还剩多少秒，所以进行了相应的判断，以及秒杀的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/to_detail/&#123;goodsId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toList</span><span class="params">(@PathVariable(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId,Model model, MiaoshaUser user)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">    GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">    model.addAttribute(<span class="string">"goods"</span>,goodsVo);</span><br><span class="line">    <span class="keyword">long</span> startAt = goodsVo.getStartDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> endAt = goodsVo.getEndDate().getTime();</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> miaoshaStatus = <span class="number">0</span>;<span class="comment">//秒杀活动的状态，0-秒杀前；1-正在秒杀；2-秒杀结束</span></span><br><span class="line">    <span class="keyword">int</span> remainSeconds = <span class="number">0</span>;<span class="comment">//秒杀活动还剩多少秒</span></span><br><span class="line">    <span class="keyword">if</span>(now &lt; startAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.BEFORE_START;</span><br><span class="line">        remainSeconds = (<span class="keyword">int</span>)(startAt-now)/<span class="number">1000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (now &gt; endAt)&#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.AFTER_MIAOSHA;</span><br><span class="line">        remainSeconds = -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        miaoshaStatus = Constants.MiaoshaStatus.ON_MIAOSHA;</span><br><span class="line">        remainSeconds = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"miaoshaStatus"</span>,miaoshaStatus);</span><br><span class="line">    model.addAttribute(<span class="string">"remainSeconds"</span>,remainSeconds);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"goods_detail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于前端，只需要拿到这个<code>remainSeconds</code>就可以了，可以对应显示秒杀还剩多久、秒杀是否结束等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">countDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">var remainSeconds = $(<span class="string">"#remainSeconds"</span>).val();</span><br><span class="line">var timeout;</span><br><span class="line"><span class="keyword">if</span>(remainSeconds &gt; <span class="number">0</span>)&#123;<span class="comment">//秒杀还没开始，倒计时</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="keyword">true</span>);</span><br><span class="line">timeout = setTimeout(function()&#123;</span><br><span class="line">$(<span class="string">"#countDown"</span>).text(remainSeconds - <span class="number">1</span>);</span><br><span class="line">$(<span class="string">"#remainSeconds"</span>).val(remainSeconds - <span class="number">1</span>);</span><br><span class="line">countDown();</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(remainSeconds == <span class="number">0</span>)&#123;<span class="comment">//秒杀进行中</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span>(timeout)&#123;</span><br><span class="line">clearTimeout(timeout);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"#miaoshaTip"</span>).html(<span class="string">"秒杀进行中"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//秒杀已经结束</span></span><br><span class="line">$(<span class="string">"#buyButton"</span>).attr(<span class="string">"disabled"</span>, <span class="keyword">true</span>);</span><br><span class="line">$(<span class="string">"#miaoshaTip"</span>).html(<span class="string">"秒杀已经结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>4. 秒杀功能实现</h2><pre><code>判断库存   |根据userId和goodsId判断是否已经抢过了   |减库存，下订单，并且写入秒杀订单(同一事务中完成)</code></pre><p>判断库存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断库存</span></span><br><span class="line">GoodsVo goodsVo = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line"><span class="keyword">if</span>(goodsVo.getStockCount() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.MIAO_SHA_OVER.getMsg());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否已经抢过了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">MiaoshaOrder miaoshaOrder = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line"><span class="keyword">if</span>(miaoshaOrder != <span class="keyword">null</span>)&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.REPEATE_MIAOSHA.getMsg());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减库存，下订单，并且写入秒杀订单(同一事务中完成)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//减库存、下订单、写入秒杀订单,需要在一个事务中执行</span></span><br><span class="line">OrderInfo orderInfo = miaoshaService.miaosha(user,goodsVo);</span><br></pre></td></tr></table></figure><p>在MiaoshaService中写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderInfo <span class="title">miaosha</span><span class="params">(MiaoshaUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//减库存、下订单、写入秒杀订单</span></span><br><span class="line">    <span class="keyword">boolean</span> success =goodsService.reduceStock(goods);</span><br><span class="line">    <span class="keyword">if</span>(success)&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.createOrder(user,goods);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于减库存：</p><p>这里只需要减<code>miaosha_goods</code>表里的库存即可。因为秒杀的数据是先从<code>goods</code>表里得到的，所以<code>goods</code>表里的库存此段已经减掉了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"update miaosha_goods set stock_count = stock_count-1 where goods_id=#&#123;goodsId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reduceStock</span><span class="params">(MiaoshaGoods g)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reduceStock</span><span class="params">(GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    MiaoshaGoods g = <span class="keyword">new</span> MiaoshaGoods();</span><br><span class="line">    g.setGoodsId(goods.getId());</span><br><span class="line">    <span class="keyword">int</span> ret = goodsDao.reduceStock(g);</span><br><span class="line">    <span class="keyword">return</span> ret &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于创建订单：先是普通的<code>order_info</code>表插入，还有一个是<code>miaosha_order</code>表插入，那么就要在一个事务中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderInfo <span class="title">createOrder</span><span class="params">(MiaoshaUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    OrderInfo orderInfo = <span class="keyword">new</span> OrderInfo();</span><br><span class="line">    orderInfo.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">    orderInfo.setDeliveryAddrId(<span class="number">0L</span>);</span><br><span class="line">    orderInfo.setGoodsCount(<span class="number">1</span>);</span><br><span class="line">    orderInfo.setGoodsId(goods.getId());</span><br><span class="line">    orderInfo.setGoodsName(goods.getGoodsName());</span><br><span class="line">    orderInfo.setGoodsPrice(goods.getMiaoshaPrice());</span><br><span class="line">    orderInfo.setOrderChannel(<span class="number">1</span>);</span><br><span class="line">    orderInfo.setStatus(Constants.OrderStatus.NOT_PAID.getStatus());<span class="comment">//新建未支付</span></span><br><span class="line">    orderInfo.setUserId(user.getId());</span><br><span class="line"></span><br><span class="line">    orderDao.insert(orderInfo);</span><br><span class="line"></span><br><span class="line">    MiaoshaOrder miaoshaOrder = <span class="keyword">new</span> MiaoshaOrder();</span><br><span class="line">    miaoshaOrder.setGoodsId(goods.getId());</span><br><span class="line">    miaoshaOrder.setOrderId(orderInfo.getId());</span><br><span class="line">    miaoshaOrder.setUserId(user.getId());</span><br><span class="line"></span><br><span class="line">    orderDao.insertMiaoshaOrder(miaoshaOrder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> orderInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于，<code>orderDao.insert(orderInfo)</code>的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into order_info(user_id,goods_id,goods_name,goods_price,goods_count,order_channel,status,create_date) "</span> +</span><br><span class="line">            <span class="string">"values(#&#123;userId&#125;,#&#123;goodsId&#125;,#&#123;goodsName&#125;,#&#123;goodsPrice&#125;,#&#123;goodsCount&#125;,#&#123;orderChannel&#125;,#&#123;status&#125;,#&#123;"</span> +</span><br><span class="line">            <span class="string">"createDate&#125;)"</span>)</span><br><span class="line"><span class="meta">@SelectKey</span>(keyColumn = <span class="string">"id"</span>,keyProperty = <span class="string">"id"</span>,resultType = <span class="keyword">long</span>.class,before = <span class="keyword">false</span>,statement = <span class="string">"select last_insert_id()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">insert</span><span class="params">(OrderInfo orderInfo)</span></span>;</span><br></pre></td></tr></table></figure><p>对于<code>orderDao.insertMiaoshaOrder(miaoshaOrder)</code>的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into miaosha_order(user_id,goods_id,order_id)values(#&#123;userId&#125;,#&#123;goodsId&#125;,#&#123;orderId&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertMiaoshaOrder</span><span class="params">(MiaoshaOrder miaoshaOrder)</span></span>;</span><br></pre></td></tr></table></figure><p>下单成功的话，就跳到订单详情页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"order_detail"</span>;</span><br></pre></td></tr></table></figure><p>否则跳到错误提示页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做秒杀，先把功能做出来再进行优化，因此本节主要实现下单的一个基本流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>2.整合redis</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/2.%E6%95%B4%E5%90%88redis/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/2.整合redis/</id>
    <published>2019-04-23T10:47:19.167Z</published>
    <updated>2019-04-23T11:00:08.152Z</updated>
    
    <content type="html"><![CDATA[<p>先针对用户分布式session问题引入redis，并且解决了冗余代码问题。可以借鉴一下写法。</p><a id="more"></a><p>目标：整合<code>redis</code>实现分布式<code>session</code>存储</p><h4>1. 添加依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--fastJson--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.38&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4>2. yml配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis:</span><br><span class="line">    host: <span class="number">127.0</span>.0.1</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    max-idle: <span class="number">5</span></span><br><span class="line">    max-total: <span class="number">10</span></span><br><span class="line">    max-wait-millis: <span class="number">3000</span></span><br></pre></td></tr></table></figure><h4>3. 读取这些配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/*****redis config start*******/</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.host&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String redisHost;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> redisPort;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.max-idle&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> redisMaxTotal;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.max-total&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> redisMaxIdle;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redis.max-wait-millis&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> redisMaxWaitMillis;</span><br><span class="line"><span class="comment">/*****redis config end*******/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>4. RedisPoolFactory构建redisPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisConfig redisConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPool <span class="title">JedisPoolFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxIdle(redisConfig.getRedisMaxIdle());</span><br><span class="line">poolConfig.setMaxTotal(redisConfig.getRedisMaxTotal());</span><br><span class="line">poolConfig.setMaxWaitMillis(redisConfig.getRedisMaxWaitMillis());</span><br><span class="line">JedisPool jp = <span class="keyword">new</span> JedisPool(poolConfig, redisConfig.getRedisHost(), redisConfig.getRedisPort());</span><br><span class="line"><span class="keyword">return</span> jp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>5. 在用redisPool进行操作之前，先解决一下key的生成问题</h4><p>接口（定义契约）----抽象类（通用方法）----实现类（具体实现）</p><p>接口：接口定义两个方法声明，一个是获取key的前缀，一个是过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyPrefix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expireSeconds</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePrefix</span> <span class="keyword">implements</span> <span class="title">KeyPrefix</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> expireSeconds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasePrefix</span><span class="params">(String prefix)</span> </span>&#123;<span class="comment">//0代表永不过期</span></span><br><span class="line"><span class="keyword">this</span>(<span class="number">0</span>, prefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasePrefix</span><span class="params">( <span class="keyword">int</span> expireSeconds, String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expireSeconds = expireSeconds;</span><br><span class="line"><span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expireSeconds</span><span class="params">()</span> </span>&#123;<span class="comment">//默认0代表永不过期</span></span><br><span class="line"><span class="keyword">return</span> expireSeconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String className = getClass().getSimpleName();</span><br><span class="line"><span class="keyword">return</span> className+<span class="string">":"</span> + prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现类，这里先以<code>MiaoshaUserKey</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoshaUserKey</span> <span class="keyword">extends</span> <span class="title">BasePrefix</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOKEN_EXPIRE = <span class="number">3600</span>*<span class="number">24</span> * <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MiaoshaUserKey</span><span class="params">(<span class="keyword">int</span> expireSeconds, String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(expireSeconds, prefix);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MiaoshaUserKey token = <span class="keyword">new</span> MiaoshaUserKey(TOKEN_EXPIRE, <span class="string">"tk"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么构造出来的<code>prefix</code>显然是<code>MiaoshaUserKey:tk</code>，超时时间也被传递进<code>expireSeconds</code>。</p><p>下面我们执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String token = UUIDUtil.uuid();</span><br><span class="line">redisService.set(MiaoshaUserKey.token,token,user);</span><br></pre></td></tr></table></figure><p>那么就相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisService.set(<span class="string">"MiaoshaUserKey:tk"</span>,UUID,user对象);</span><br></pre></td></tr></table></figure><p>那么，redis 的set方法具体是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">set</span><span class="params">(KeyPrefix prefix, String key,  T value)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jedis =  jedisPool.getResource();</span><br><span class="line">        String str = beanToString(value);<span class="comment">//序列化成字符串</span></span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成真正的key</span></span><br><span class="line">        String realKey  = prefix.getPrefix() + key;<span class="comment">//MiaoshaUserKey:tkUUID</span></span><br><span class="line">        <span class="keyword">int</span> seconds =  prefix.expireSeconds();<span class="comment">//超时时间</span></span><br><span class="line">        <span class="keyword">if</span>(seconds &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            jedis.set(realKey, str);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            jedis.setex(realKey, seconds, str);<span class="comment">//set进redis中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        returnToPool(jedis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再下一步是将<code>UUID</code>写到<code>cookie</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CookieUtil.writeLoginToken(response,token);</span><br></pre></td></tr></table></figure><p>写入cookie：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String COOKIE_NAME = <span class="string">"login_token"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeLoginToken</span><span class="params">(HttpServletResponse response, String token)</span></span>&#123;</span><br><span class="line">    Cookie ck = <span class="keyword">new</span> Cookie(COOKIE_NAME,token);</span><br><span class="line">    <span class="comment">//ck.setDomain(COOKIE_DOMAIN);</span></span><br><span class="line">    ck.setPath(<span class="string">"/"</span>);<span class="comment">//设值在根目录</span></span><br><span class="line">    ck.setHttpOnly(<span class="keyword">true</span>);<span class="comment">//不允许通过脚本访问cookie,避免脚本攻击</span></span><br><span class="line">    ck.setMaxAge(MiaoshaUserKey.token.expireSeconds());</span><br><span class="line">    log.info(<span class="string">"write cookieName:&#123;&#125;,cookieValue:&#123;&#125;"</span>,ck.getName(),ck.getValue());</span><br><span class="line">    response.addCookie(ck);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，下面继续访问的时候，先根据<code>cookie</code>拿到<code>UUID</code>，再根据<code>UUID</code>从<code>redis</code> 中拿到<code>User</code>对象。</p><p>以浏览商品列表为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"to_list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toList</span><span class="params">(@CookieValue(value= CookieUtil.COOKIE_NAME,required = <span class="keyword">false</span>)</span> String cookieToken,</span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(value = CookieUtil.COOKIE_NAME,required = <span class="keyword">false</span>)</span> String paramToken,</span></span><br><span class="line"><span class="function">                     Model model,HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;</span><br><span class="line">    MiaoshaUser user = userService.getByToken(token,response);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"goods_list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他是根据前面传来的<code>token</code>做下面的操作，当然还可以从后端读前面的<code>cookie</code>，取出相应的值。</p><p>其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MiaoshaUser user = userService.getByToken(token,response);</span><br></pre></td></tr></table></figure><p>的具体实现是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MiaoshaUser <span class="title">getByToken</span><span class="params">(String token,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先判断token是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据token到redis中拿到相应的value</span></span><br><span class="line">    MiaoshaUser user = redisService.get(MiaoshaUserKey.token,token,MiaoshaUser.class);</span><br><span class="line">    redisService.set(MiaoshaUserKey.token,token,user);<span class="comment">//key---&gt;UserKey:tkUUID,value---&gt;Serialized User</span></span><br><span class="line">    <span class="comment">//如果此时拿到user成功了，这里要重新设置一下redis过期时间</span></span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">        redisService.set(MiaoshaUserKey.token,token,user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里重新设置<code>redis</code>过期时间方式，在这里页面比较少的情况下，临时这样，但是在页面比较多的情况下，显然是不合适的，可以用一个过滤器，拦截所有的请求，然后在这个过滤器里进行登录过期时间的刷新。</p><h4>6. 修改代码</h4><p>我们发现，后面涉及到商品等其他的接口，按照这种写法，每次都要先获取<code>cookie</code>，然后从<code>redis</code>中获取<code>user</code>信息，获取成功，我们才能进行下一步操作。显然太过冗余，我们可以将其剥离出来，写在一个地方，避免冗余的代码。</p><p>我们的<code>controller</code>可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"to_list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toList</span><span class="params">(Model model,HttpServletResponse response,MiaoshaUser user)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"goods_list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我们在一个地方统一判断<code>user</code>是否能获取到。就要用到<code>springmvc</code>的机制了，我们可以试想<code>springmvc</code>支持的参数都是如何进来的呢？比如这里的<code>MiaoShaUser</code>是从什么地方注入进来的呢？</p><p>其实在<code>UserArgumentResolver</code>这个类中就可以拿到输入的参数，比如<code>MiaoShaUser</code>这个对象，然后再在<code>resolveArgument</code>这个方法里，对这个参数进行相应的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MiaoshaUserService userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class="line">        <span class="keyword">return</span> clazz== MiaoshaUser.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line">        String paramToken = request.getParameter(CookieUtil.COOKIE_NAME);</span><br><span class="line">        String cookieToken = CookieUtil.readLoginToken(request);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;</span><br><span class="line">        <span class="keyword">return</span> userService.getByToken(token,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这个对传入的参数进行修改的<code>UserArgumentResolver</code>要被重新加入进<code>argumentResolvers</code>中，相当于完成对原始的<code>argumentResolvers</code>中某个参数的重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserArgumentResolver userArgumentResolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line">        argumentResolvers.add(userArgumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只要某个方法中传入了<code>MiaoShaUser</code>这个对象，那么就会进入<code>resolveArgument()</code>这个方法进行判断是否能拿到这个对象。</p><p>当然，我们可能更加常用的方式是<code>springmvc</code>拦截器来实现这个功能。并且在拦截器中，还可以实现更加复杂的逻辑，比如不仅可以判断<code>user</code>是否已经登陆，还可以针对特殊的<code>url</code>进行特别的处理。更加方便，在蜗牛商城电商项目中就是这样干的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先针对用户分布式session问题引入redis，并且解决了冗余代码问题。可以借鉴一下写法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>1.登录功能</title>
    <link href="http://yoursite.com/2019/04/23/miaosha/1.%20%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/04/23/miaosha/1. 登录功能/</id>
    <published>2019-04-23T10:45:48.194Z</published>
    <updated>2019-04-23T10:56:14.124Z</updated>
    
    <content type="html"><![CDATA[<p>这个笔记是根据慕课网上一门叫做<a href="https://coding.imooc.com/class/168.html" target="_blank" rel="noopener">《Java秒杀系统方案优化 高性能高并发实战》</a>学习整理的笔记。学习应对高并发场景如何设计接口，以及后端架构如何优化等知识，觉得还是学到一些东西的，就分享在这里。第一篇主要是完成用户登陆模块，借此搭建起一个基本的系统。</p><a id="more"></a><p>目标：初步实现用户登录功能.</p><h2>1. user表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`NewTable`</span> (</span><br><span class="line"><span class="string">`id`</span>  <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'手机号码'</span> ,</span><br><span class="line"><span class="string">`nickname`</span>  <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'登录名'</span> ,</span><br><span class="line"><span class="string">`password`</span>  <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'md5(md5(pass+固定salt)+salt)'</span> ,</span><br><span class="line"><span class="string">`salt`</span>  <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'盐值'</span> ,</span><br><span class="line"><span class="string">`head`</span>  <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'头像'</span> ,</span><br><span class="line"><span class="string">`register_date`</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'注册时间'</span> ,</span><br><span class="line"><span class="string">`last_login_date`</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'上次登录时间'</span> ,</span><br><span class="line"><span class="string">`login_count`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span> ,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>两次<code>MD5</code>：</p><ul><li>用户端：PASS=MD5(明文+固定salt)：防止明文密码在网络传输时被截取</li><li>服务端：PASS=MD5(用户输入+随机salt)：防止数据库被盗</li></ul><h2>2. 代码逻辑</h2><h4>2.1 前端处理</h4><p>这里在前端对密码进行了一次<code>md5</code>加密。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#loginForm"</span>).validate(&#123;</span><br><span class="line">        submitHandler:<span class="function"><span class="keyword">function</span>(<span class="params">form</span>)</span>&#123;</span><br><span class="line">             doLogin();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">g_showLoading();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputPass = $(<span class="string">"#password"</span>).val();</span><br><span class="line"><span class="keyword">var</span> salt = g_passsword_salt;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>+salt.charAt(<span class="number">0</span>)+salt.charAt(<span class="number">2</span>) + inputPass +salt.charAt(<span class="number">5</span>) + salt.charAt(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> password = md5(str);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"/login/do_login"</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">    mobile:$(<span class="string">"#mobile"</span>).val(),</span><br><span class="line">    password: password</span><br><span class="line">    &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    layer.closeAll();</span><br><span class="line">    <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">    layer.msg(<span class="string">"成功"</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.href=<span class="string">"/goods/to_list"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layer.msg(data.msg);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    layer.closeAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这里前端的渲染模板用的是<code>thymeleaf</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>后端如何优雅地处理呢？</p><h4>2.2 定义一个vo来接收前端数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>2.3 数据校验</h4><p>我们可以用jsr303来进行校验，而不需要写很多代码来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@IsMobile</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length</span>(min=<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--jsr303--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>对于其中的判断手机号码是否存在，我们需要自己来实现一下这个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;IsMobileValidator.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  IsMobile &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "手机号码格式错误"</span>;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解的功能是由<code>IsMobileValidator.class</code>来完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsMobileValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsMobile</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> required = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> </span>&#123;</span><br><span class="line">required = constraintAnnotation.required();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(required) &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ValidatorUtil.isMobile(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>ValidatorUtil.isMobile(value)</code>是真正用来验证手机格式的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern mobile_pattern = Pattern.compile(<span class="string">"1\\d&#123;10&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMobile</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(src)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Matcher m = mobile_pattern.matcher(src);</span><br><span class="line"><span class="keyword">return</span> m.matches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以实现对前端传来的参数进行校验了：<code>@Valid LoginVo loginVo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/do_login"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">doLogin</span><span class="params">(@Valid LoginVo loginVo)</span></span>&#123;</span><br><span class="line">    userService.login(loginVo);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>2.4 全局异常</h4><p>当校验参数时，这个参数时有问题时，我们需要一个全局异常来进行处理，将异常信息以合适的形式传给前端：</p><p>GlobalException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CodeMsg cm;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GlobalException</span><span class="params">(CodeMsg cm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(cm.toString());</span><br><span class="line"><span class="keyword">this</span>.cm = cm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CodeMsg <span class="title">getCm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就是需要对异常进行拦截和处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value=Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">exceptionHandler</span><span class="params">(HttpServletRequest request, Exception e)</span></span>&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> GlobalException) &#123;<span class="comment">//自定义的全局异常</span></span><br><span class="line">GlobalException ex = (GlobalException)e;</span><br><span class="line"><span class="keyword">return</span> Result.error(ex.getCm());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException) &#123;<span class="comment">//数据参数校验的异常</span></span><br><span class="line">BindException ex = (BindException)e;</span><br><span class="line">List&lt;ObjectError&gt; errors = ex.getAllErrors();</span><br><span class="line">ObjectError error = errors.get(<span class="number">0</span>);</span><br><span class="line">String msg = error.getDefaultMessage();</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.BIND_ERROR.fillArgs(msg));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SERVER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>2.5 返回结果封装类</h4><p>我们给前端返回的结果要有一个统一的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  成功时候的调用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result&lt;T&gt;(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  失败时候的调用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">error</span><span class="params">(CodeMsg codeMsg)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result&lt;T&gt;(codeMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(CodeMsg codeMsg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(codeMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.code = codeMsg.getCode();</span><br><span class="line"><span class="keyword">this</span>.msg = codeMsg.getMsg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>2.6 异常信息分类</h4><p>因为会产生各种异常，为了方便出现问题时很快定位到异常的类型，我们需要对异常的类型进行统一的管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeMsg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的错误码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SUCCESS = <span class="keyword">new</span> CodeMsg(<span class="number">0</span>, <span class="string">"success"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SERVER_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500100</span>, <span class="string">"服务端异常"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg BIND_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500101</span>, <span class="string">"参数校验异常：%s"</span>);</span><br><span class="line"><span class="comment">//登录模块 5002XX</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SESSION_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500210</span>, <span class="string">"Session不存在或者已经失效"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg PASSWORD_EMPTY = <span class="keyword">new</span> CodeMsg(<span class="number">500211</span>, <span class="string">"登录密码不能为空"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg MOBILE_EMPTY = <span class="keyword">new</span> CodeMsg(<span class="number">500212</span>, <span class="string">"手机号不能为空"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg MOBILE_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500213</span>, <span class="string">"手机号格式错误"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg MOBILE_NOT_EXIST = <span class="keyword">new</span> CodeMsg(<span class="number">500214</span>, <span class="string">"手机号不存在"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CodeMsg PASSWORD_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500215</span>, <span class="string">"密码错误"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//商品模块 5003XX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//订单模块 5004XX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//秒杀模块 5005XX</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CodeMsg <span class="title">fillArgs</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> code = <span class="keyword">this</span>.code;</span><br><span class="line">String message = String.format(<span class="keyword">this</span>.msg, args);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CodeMsg(code, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>2.7 login登录逻辑</h4><p>手机号码不存在或者密码不匹配，直接抛出全局异常异常，这个异常信息会被拦截，最后处理成相应的统一的格式进行返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(LoginVo loginVo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (loginVo == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> GlobalException(CodeMsg.SERVER_ERROR);</span><br><span class="line">String mobile = loginVo.getMobile();</span><br><span class="line">String password = loginVo.getPassword();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断手机号码是否存在</span></span><br><span class="line">MiaoshaUser user = getById(Long.parseLong(mobile));</span><br><span class="line"><span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> GlobalException(CodeMsg.MOBILE_NOT_EXIST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证密码是否匹配</span></span><br><span class="line">String dbPass = user.getPassword();</span><br><span class="line">String dbSalt = user.getSalt();</span><br><span class="line"><span class="keyword">if</span>(!MD5Util.formPassToDBPass(password,dbSalt).equals(dbPass))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> GlobalException(CodeMsg.PASSWORD_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要一个<code>MD5</code>的工具类，不贴了，但是注意要添加依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个笔记是根据慕课网上一门叫做&lt;a href=&quot;https://coding.imooc.com/class/168.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Java秒杀系统方案优化 高性能高并发实战》&lt;/a&gt;学习整理的笔记。学习应对高并发场景如何设计接口，以及后端架构如何优化等知识，觉得还是学到一些东西的，就分享在这里。第一篇主要是完成用户登陆模块，借此搭建起一个基本的系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="秒杀实战" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>10-用户下单</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/10-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/10-用户下单/</id>
    <published>2019-04-17T02:42:12.513Z</published>
    <updated>2019-04-17T02:44:13.056Z</updated>
    
    <content type="html"><![CDATA[<p>又到了订单模块，这里直接将购物车这一块省略，假设用户已经在购物车选了很多商品之后，现在开始准备下订单。</p><p>我们知道，在库存服务中，我们已经将库存充足的商品记录在<code>Map</code>中，并且将每个商品库存扣减状态和锁定库存扣减状态都记录下来了。</p><p>在我们的下单服务中，最先想到的是为订单号生成全局唯一的ID，这里利用之前提到过的雪花算法来实现。具体的实现过程是从<code>ShardingJDBC</code>中的ID生成复制过来的：</p><p><img src="http://bloghello.oursnail.cn/mama10-1.png" alt="image"></p><h2>一、全局唯一ID生成服务</h2><p>新建<code>mama-buy-keygen-service</code>工程：</p><p><img src="http://bloghello.oursnail.cn/mama10-2.png" alt="image"></p><p>参照上一个写法即可，注入自己的zk地址。</p><p>要写一个接口供其他的服务调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyGeneratorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"snowFlakeKeyGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> KeyGenerator keyGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/keygen"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(keyGenerator.generateKey().longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>二、购物车、订单表结构分析</h2><p><img src="http://bloghello.oursnail.cn/mama10-3.png" alt="image"></p><p>其实这个关系是很明朗的了，但是我们要注意一点就是，我们知道，扣减库存服务，如果发现库存不足了或者其他问题，那么返回的是<code>&lt;skuId,-1&gt;</code>，如果扣减成功，返回的是<code>&lt;skuId,1&gt;</code>。用户在下订单的时候，可能有部分商品库存已经不足，但是又不能影响其他库存足的商品导致整个订单出问题，所以在生成订单的时候，需要将库存不足的给移除出订单详情表，价格肯定是不能算进去的，并且要提示用户这个商品库存已经不足，无法购买，继续支付的话，只能支付其他库存充足的产品。</p><p>Ok，对于关系和注意点说明清楚之后，下面就要进行实际的编码了。</p><h2>三、创建订单逻辑</h2><p>我们首先注意到订单有几种状态，我们这里简化一下状态，用枚举来表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TradeStatus &#123;</span><br><span class="line"></span><br><span class="line">    WAITING_PAY(<span class="string">"等待支付"</span>,(<span class="keyword">byte</span>)<span class="number">1</span>),</span><br><span class="line">    TRADE_CANCEL(<span class="string">"订单取消"</span>,(<span class="keyword">byte</span>)<span class="number">2</span>),</span><br><span class="line">    TRADE_PAIED(<span class="string">"订单已支付"</span>,(<span class="keyword">byte</span>)<span class="number">3</span>),</span><br><span class="line">    TRADE_CLOSE(<span class="string">"订单关闭"</span>,(<span class="keyword">byte</span>)<span class="number">4</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    TradeStatus(String desc, <span class="keyword">byte</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">byte</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略get和set方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层去创建订单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;TradeItem&gt;&gt; createOrder(<span class="meta">@RequestBody</span> List&lt;TradeItem&gt; tradeItemList)&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;List&lt;TradeItem&gt;&gt; result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"订单提交成功"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;TradeItem&gt; tradeItemSuccResult =tradeService.createOrder(tradeItemList);</span><br><span class="line">    result.setData(tradeItemSuccResult);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来到我们的service层，进行创建订单的细节。思路为：</p><ul><li>第一步：为订单生成唯一订单号（已经在ID生成服务中解决，调用接口即可）</li><li>第二步：构建扣减库存用到的reduceList（遍历传进来的<code>tradeItemList</code>接口）</li><li>第三步：扣减完库存，获取到是<code>Map&lt;skuID,status&gt;</code>，status为-1说明库存不足，无法购买；为1说明库存充足，扣减成功；</li><li>第四步：根据<code>skuID</code>可以拿到<code>skuList</code>，并且遍历<code>Map&lt;skuID,status&gt;</code>根据status将扣减失败的商品移除出<code>tradeItemList</code></li><li>第五步：创建订单主表</li><li>第六步：遍历处理完后的<code>tradeItemList</code>配合<code>skuList</code>写入订单详情表</li><li>第七步：返回<code>tradeItemList</code>结束。</li></ul><p>关于调用ID生成服务，那就需要用到<code>Feign</code>了，首先在引入依赖后在主函数上声明注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p>然后找到对应的服务名+接口就可以去调用了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"key-generator"</span>,fallback = KeyGeneratorServiceFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyGenServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/keygen"</span>)</span><br><span class="line">    <span class="function">String <span class="title">keyGenerator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取不到的时候就返回null</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyGeneratorServiceFallback</span> <span class="keyword">implements</span> <span class="title">KeyGenServiceClient</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的service层逻辑代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TradeItem&gt; <span class="title">createOrder</span><span class="params">(List&lt;TradeItem&gt; tradeItemList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到唯一ID</span></span><br><span class="line">    String orderNo = keyGenServiceClient.keyGenerator();</span><br><span class="line">    Long tradeNo = Long.parseLong(orderNo);</span><br><span class="line">    Long userId = tradeItemList.get(<span class="number">0</span>).getUserUuid();</span><br><span class="line">    <span class="comment">//构建扣减库存用到的reduceList</span></span><br><span class="line">    List&lt;StockReduce&gt; stockReduceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    tradeItemList.stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                StockReduce stockReduce = <span class="keyword">new</span> StockReduce();</span><br><span class="line">                stockReduce.setOrderNo(tradeNo);</span><br><span class="line">                stockReduce.setSkuId(param.getSkuId());</span><br><span class="line">                stockReduce.setReduceCount(-param.getQuantity());</span><br><span class="line"></span><br><span class="line">                stockReduceList.add(stockReduce);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//扣减库存,只是从redis中预减库存和写入流水表，真正的库存表是在定时任务中用流水表去同步</span></span><br><span class="line">    ApiResult&lt;Map&lt;Long,Integer&gt;&gt; stockResult =  stockServiceClient.reduceStock(stockReduceList);</span><br><span class="line">    Map&lt;Long,Integer&gt; stockResultMap = stockResult.getData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询相关SKU的属性</span></span><br><span class="line">    List&lt;ProductSku&gt; skuResult = productSkuMapper.selectBySkuIdList(stockResultMap.keySet());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断库存逻辑  插入订单</span></span><br><span class="line">    Trade trade = <span class="keyword">new</span> Trade();</span><br><span class="line">    trade.setTradeNo(tradeNo);</span><br><span class="line">    trade.setStatus(TradeStatus.WAITING_PAY.getValue());</span><br><span class="line">    trade.setUserUuid(userId);</span><br><span class="line">    tradeMapper.insertSelective(trade);</span><br><span class="line">    <span class="comment">//将扣减库存失败的商品选出来，然后去tradeItems中去移除</span></span><br><span class="line">    stockResultMap.keySet().stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                <span class="comment">//扣库存失败的移除</span></span><br><span class="line">                <span class="keyword">if</span>(stockResultMap.get(param)==-<span class="number">1</span>)&#123;</span><br><span class="line">                    TradeItem tradeItem =  tradeItemList.stream().filter(</span><br><span class="line">                            item-&gt;item.getSkuId()==param</span><br><span class="line">                    ).findFirst()</span><br><span class="line">                            .get();</span><br><span class="line">                    tradeItemList.remove(tradeItem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//计算商品价格等信息</span></span><br><span class="line">    tradeItemList.stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                ProductSku sku = skuResult.stream().filter(</span><br><span class="line">                        skuParam-&gt;param.getSkuId()==skuParam.getId()</span><br><span class="line">                ).findFirst()</span><br><span class="line">                        .get();</span><br><span class="line">                param.setTradeNo(tradeNo);</span><br><span class="line">                param.setSkuImageUrl(sku.getImgUrl());</span><br><span class="line">                param.setSkuName(sku.getSkuName());</span><br><span class="line">                param.setCurrentPrice(sku.getSkuPrice());</span><br><span class="line">                param.setTotalPrice(sku.getSkuPrice().multiply(<span class="keyword">new</span> BigDecimal(param.getQuantity())));</span><br><span class="line"></span><br><span class="line">                tradeItemMapper.insertSelective(param);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tradeItemList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>四、创建订单可能存在的问题</h2><p>这个时候，会存在一个问题，如果在redis扣减库存成功之后，后面的数据库插入抛出异常甚至出现错误，那么这个时候，订单没有存进库里，但是redis已经扣减库存成功。由于事务只能保证这里的数据库回滚，但是redis是不会回滚的，就会造成数据的不一致，这里就涉及到了分布式事务，该如何解决呢？</p><p>如果是发生了跨库，还涉及redis等情况，这里可能需要分布式事务来保证，但是这里暂时还用不到，因为这里比较特殊，虽然我库存已经扣了，但是订单没有入库，由于是这边的数据库出问题，用户那边肯定是报错的，然后用户肯定是无法进行支付的，如果还是想买，那么就重新下订单，说不定下次就可以成功，只是流水表中多了一条废弃记录而已和redis中扣了此次废弃记录对应的库存。</p><p>那么，既然还没有支付，那么这个没用的订单只是存在于流水表中。那么，我只需要有一个定时任务，去定时扫描这个流水表，如果发现这个订单已经过期了（或者可以拿着这个订单号去订单表去查，如果连记录都没有，那么说明是下单失败这种场景，直接释放锁定库存即可），这个时候锁定库存就会归位，达到了最终一致性。</p><p>定时扫描是一种比较有效的方法，但是根据其定时间隔，对于订单超时而言，可能会有一定时间的延迟才可能将其库存归位。</p><p>这里还有一种比较及时的方式是，<code>orderNo</code>为key，设置过期时间，比如15分钟，一旦到了15分钟，说明这个订单超时了（如果在超时时间内正常支付了，那么就将这个key删除掉），那么redis就进行一个事件通知，自动告诉程序：这个订单超时了（超时这里就会有两种情况：用户下单成功未支付超时；用户下单失败，订单表压根就没有这条记录，但是已经写到了流水表中并且也扣了库存这种异常情况），那么我就可以根据这个信息，获得超时的那个订单号，如果订单表存在，我将其状态进行更新为“订单超时未支付”状态；如果订单表不存在，啥都不用做或者删除流水表即可；最后，我就可以放心地释放锁定库存（更新redis，更新库存表）。</p><p>要达到redis key过期事件通知的效果，需要现在redis中配置一下过期事件：</p><p><img src="http://bloghello.oursnail.cn/mama10-4.png" alt="image"></p><p>在创建完订单之后设置redis订单号过期:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置redis 订单号过期</span></span><br><span class="line">redisTemplate.opsForValue().set(tradeNo.toString(),tradeNo.toString(),<span class="number">20</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>下面要监听一个事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderKeyExpriedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">configRedisMessageListenerContainer</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisMessageListenerContainer listenerContainer = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        listenerContainer.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        listenerContainer.addMessageListener((message,listener)-&gt;&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//处理key过期事件逻辑，new String(message.getBody())就是设置进去的orderNo</span></span><br><span class="line">            System.out.println(<span class="string">"------redis过期事件"</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="keyword">new</span> PatternTopic(<span class="string">"__keyevent@*__:expired"</span>));</span><br><span class="line">        <span class="keyword">return</span> listenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于网络抖动，可能会出现各种情况，导致这种事件发不出来或者监听不到，所以我们还要用清点库存定时任务来辅助，自动再去扫描一遍流水表或者订单表，看看是不是还有过期没有释放的记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又到了订单模块，这里直接将购物车这一块省略，假设用户已经在购物车选了很多商品之后，现在开始准备下订单。&lt;/p&gt;
&lt;p&gt;我们知道，在库存服务中，我们已经将库存充足的商品记录在&lt;code&gt;Map&lt;/code&gt;中，并且将每个商品库存扣减状态和锁定库存扣减状态都记录下来了。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>09-分布式定时任务</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/09-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/09-分布式定时任务/</id>
    <published>2019-04-17T02:41:59.439Z</published>
    <updated>2019-04-17T02:44:02.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bloghello.oursnail.cn/mama9-3.png" alt="image"></p><p>我们上节进行了库存的扣减，解决了并发扣减库存问题和接口幂等性，操作在库存流水表中进行了记录，下面需要一个定时任务来定时将流水表中的数据同步到库存表中。</p><p>关于定时调度，我们接触过<code>quartz</code>，在单机中应用是完全没有问题的。虽然<code>quartz</code>也给我们提供了集群版本，但是是一种依赖数据库的解决方案。</p><p>本节首先尝试整合<code>Elastic-Job</code>，目标是让其每5秒钟打印一句话，所以也算是<code>Elastic-Job</code>入门demo。</p><p>根据官网整合<a href="https://github.com/elasticjob/elastic-job-example/tree/master/elastic-job-example-lite-springboot" target="_blank" rel="noopener">spring-boot的demo</a>的pom文件中，我们就可以大概知道要导入什么包。</p><h2>一、相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--elastci job核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--操作zk节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...省略其他的spring-boot等依赖</span><br></pre></td></tr></table></figure><h2>二、配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brokers: $&#123;kafka.brokers.host&#125;</span><br><span class="line">          zk-nodes: $&#123;zookeeper.host&#125;</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">        input:</span><br><span class="line">          destination: dis-transation</span><br><span class="line">          group: point-group</span><br><span class="line">  &lt;!--以上是关于spring config的内容，可以删除--&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--自定义数据源--&gt;</span><br><span class="line">  datasource:</span><br><span class="line">    stock:</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/mama-buy-stock</span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line"></span><br><span class="line"># 因为依赖于ZK,所以需要确定zk位置；下面是确定定时时间、分片数</span><br><span class="line">regCenter:</span><br><span class="line">  serverList: $&#123;zookeeper.host&#125;</span><br><span class="line">  namespace: elastic-job-lite-springboot</span><br><span class="line">stockJob:</span><br><span class="line">  cron: 0/5 * * * * ?</span><br><span class="line">  shardingTotalCount: 1 #只分一片</span><br><span class="line">  shardingItemParameters: 0=nanjing</span><br></pre></td></tr></table></figure><p>首先，按照以前的步骤创建<code>mama-buy-schedule-service</code>这个工程。</p><p><img src="http://bloghello.oursnail.cn/mama9-1.png" alt="image"></p><h2>三、代码层面</h2><h3>1，按照官方的demo，首先关闭自动注入数据源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;</span><br><span class="line">        DataSourceAutoConfiguration.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MamaBuyScheduleServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MamaBuyScheduleServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>2，自定义数据源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"stockDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.stock"</span>)<span class="comment">//根据配置文件前缀创建数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">stockDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>3，创建<code>sqlSessionFactory</code>和<code>SqlSessionTemplate</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"com.njupt.swg.mamabuyscheduleservice.stock.dao"</span>&#125;,sqlSessionFactoryRef = <span class="string">"stockSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"stockDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource stockDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stockSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">stockSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        factoryBean.setDataSource(stockDataSource);</span><br><span class="line">        <span class="keyword">return</span>  factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"stockSqlSessionTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">stockSqlSessionTemplate</span> <span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionTemplate template = <span class="keyword">new</span> SqlSessionTemplate(stockSqlSessionFactory());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>4，注册到ZK上：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"'$&#123;regCenter.serverList&#125;'.length() &gt; 0"</span>)<span class="comment">//注解确保有zk，没有就报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRegistryCenterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperRegistryCenter <span class="title">regCenter</span><span class="params">(@Value(<span class="string">"$&#123;regCenter.serverList&#125;"</span>)</span> <span class="keyword">final</span> String serverList, @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;regCenter.namespace&#125;"</span>)</span> <span class="keyword">final</span> String namespace) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistryCenter(<span class="keyword">new</span> ZookeeperConfiguration(serverList, namespace));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>5，定义任务：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockSimpleJob</span> <span class="keyword">implements</span> <span class="title">SimpleJob</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"------Thread ID: %s, 任务总片数: %s, 当前分片项: %s"</span>,</span><br><span class="line">                Thread.currentThread().getId(), shardingContext.getShardingTotalCount(), shardingContext.getShardingItem()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实际开发中，有了任务总片数和当前分片项，就可以对任务进行分片执行了</span></span><br><span class="line"><span class="comment">         * 比如 SELECT * FROM user WHERE status = 0 AND MOD(id, shardingTotalCount) = shardingItem</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>6，任务配置类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockJobConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleJob <span class="title">stockJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StockSimpleJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--直接copy--&gt;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobScheduler <span class="title">simpleJobScheduler</span><span class="params">(<span class="keyword">final</span> SimpleJob simpleJob, @Value(<span class="string">"$&#123;stockJob.cron&#125;"</span>)</span> <span class="keyword">final</span> String cron, @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;stockJob.shardingTotalCount&#125;"</span>)</span> <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;stockJob.shardingItemParameters&#125;"</span>)</span> <span class="keyword">final</span> String shardingItemParameters) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;!--直接copy--&gt;</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@Description</span>  任务配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LiteJobConfiguration <span class="title">getLiteJobConfiguration</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends SimpleJob&gt; jobClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> String cron,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> String shardingItemParameters)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LiteJobConfiguration</span><br><span class="line">                .newBuilder(</span><br><span class="line">                        <span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">                                JobCoreConfiguration.newBuilder(</span><br><span class="line">                                        jobClass.getName(),cron,shardingTotalCount)</span><br><span class="line">                                        .shardingItemParameters(shardingItemParameters)</span><br><span class="line">                                        .build()</span><br><span class="line">                                ,jobClass.getCanonicalName()</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">                .overwrite(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/mama9-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/mama9-3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们上节进行了库存的扣减，解决了并发扣减库存问题和接口幂等性，操作在库存流水表中进行了记录，下面需要一个定时任务来定时将流水表中的
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>08-库存扣减问题</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/08-%E5%BA%93%E5%AD%98%E6%89%A3%E5%87%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/08-库存扣减问题/</id>
    <published>2019-04-17T02:41:51.135Z</published>
    <updated>2019-04-17T02:43:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2>一、扣减库存问题分析</h2><p>在提交订单的时候，要扣减库存，对于sql，是这么写的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>首先这条sql存在超卖问题，很有可能会减成负数。可能会改成如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span> <span class="keyword">and</span> stock &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这样好像解决了超卖问题。但是引入了新的问题。由于库存牵涉进货、补货等系统，所以是个独立的服务。</p><p>并且，比如我是通过MQ去通知库存进行扣减库存，但是由于网络抖动，请求扣减库存没有结果，这个时候可能需要进行重试。重试之后，可能成功了，这个时候，有可能这两次都成功了。那么，一个用户买一样东西，但是库存扣了两遍。这就是幂等。如果不做幂等处理，重试会出现上述这种致命问题。</p><p>那么如何做到幂等呢？</p><p>实际上就是追求数据一致性。那么就可以考虑锁来保证，比如我这里用乐观锁来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stock,<span class="keyword">version</span> <span class="keyword">from</span> t_stock;</span><br><span class="line">if(stock &gt; 用户购买数量)</span><br><span class="line">    <span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">version</span> = last_version</span><br></pre></td></tr></table></figure><p>但是，一旦出现并发，那么可能这个用户是执行update失败的，所以还需要去重试(guava retry或者spring retry都可以优雅地实现重试)，直到成功或者库存已经不足。</p><p>那么，在少量并发的情况下，可以考虑乐观锁，要不然会大量失败，此时需要用悲观锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_stock <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">下面执行<span class="keyword">update</span>操作。。。</span><br></pre></td></tr></table></figure><p>在一个事务内，第一句为<code>select for update</code>，那么这一行数据就会被本线程锁住，整个事务执行完才能允许其他线程进来。</p><p>存在的问题：一个线程锁住这行数据，那么其他线程都要等待，效率很低。</p><p>那么，如何保证数据一致性，还可以提高效率呢？</p><p>对于扣减库存，往往是先在redis中进行扣减库存。redis是单线程，是高速串行执行，不存在并发问题。</p><p>如果是单机redis，可以在同一个事务中保证一次性执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch stock</span><br><span class="line">multi</span><br><span class="line">if stock &gt; count</span><br><span class="line">    stock = stock - count;</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/mama8-1.png" alt="image"></p><p>但是不能在集群中用（分布在不同节点上时），所以用watch不通用。</p><p>redis都是原子操作，比如自增:incrby，用这个就可以判断库存是否够。就是所谓的redis预减库存。</p><p>但是在实际中，库存表里有两个字段：库存和锁定库存。</p><p>锁定库存是表示多少用户真正下单了，但是还没有支付。锁定库存+库存=总库存，等用户真正支付之后，就可以将锁定库存减掉。那么，此时，redis中需要存库存和锁定库存这两个值，上面单一的原子操作就不行了。</p><p>解决方案：redis+lua</p><p>为什么要用lua呢？可以用lua将一系列操作封装起来执行，输入自己的参数即可。lua脚本在redis中执行是串行的、原子性的。</p><p>OK，下面就实战一波：根据skuId查询缓存中的库存值。</p><h2>二、查询库存（设置库存）</h2><p>首先，我们要明确一点，redis中的库存初始值是由后台的系统人工提前配置好的，在进行商品销售时（用户下单时），直接从redis中先进行库存的扣减。</p><p>这里呢，我们没有进行初始化，而是在程序中进行判断：如果redis已经有了这个库存值，就将他查询出来返回；否则，就去数据库查询，然后对redis进行初始化。</p><p>这里的一个问题是：如果存在并发问题，但是我们初始化两个值（库存值和库存锁定值），这里采用lua脚本，在lua脚本中完成初始化，并且对于两个用户同时进行初始化库存的问题，可以在lua中进行判断,因为redis是单线程，lua也是单线程，不用担心会同时初始化两次。</p><p>下面首先写一个接口，根据skuid查询库存(库存和锁定库存)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/query/&#123;skuId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult&lt;Stock&gt; <span class="title">queryStock</span><span class="params">(@PathVariable <span class="keyword">long</span> skuId)</span></span>&#123;</span><br><span class="line">    ApiResult&lt;Stock&gt;  result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"库存查询成功"</span>);</span><br><span class="line">    Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">    stock.setSkuId(skuId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> stockCount = stockService.queryStock(skuId);</span><br><span class="line"></span><br><span class="line">    stock.setStock(stockCount);</span><br><span class="line">    result.setData(stock);</span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryStock</span><span class="params">(<span class="keyword">long</span> skuId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先查redis</span></span><br><span class="line">    Stock stock ;</span><br><span class="line">    String stockKey = Constants.CACHE_PRODUCT_STOCK+<span class="string">":"</span>+skuId;</span><br><span class="line">    String stockLockKey = Constants.CACHE_PRODUCT_STOCK_LOCK+<span class="string">":"</span>+skuId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只需要查询一个即可，比如我这里只查询库存就行</span></span><br><span class="line">    Object stockObj = redisTemplate.opsForValue().get(stockKey);</span><br><span class="line">    Integer stockInRedis = <span class="keyword">null</span> ;</span><br><span class="line">    <span class="keyword">if</span>(stockObj!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        stockInRedis = Integer.valueOf(stockObj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有，那么我就需要将数据库中的数据初始化到redis中</span></span><br><span class="line">    <span class="keyword">if</span>(stockInRedis==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//去数据库查询 然后对redis进行初始化</span></span><br><span class="line">        stock = stockMapper.selectBySkuId(skuId);</span><br><span class="line">        <span class="comment">//两个key和两个库存值通过lua脚本塞到redis中</span></span><br><span class="line">        <span class="comment">//这里如果发生两个用户并发初始化redis，脚本中会进行判断，如果已经初始化了，脚本就会停止执行</span></span><br><span class="line">        <span class="comment">// 设置库存不应该在这配置，应该是后台管理系统进行设置，所以正常情况下，这里redis中应该是必然存在的</span></span><br><span class="line">        <span class="comment">//如果是在后台配置，就没有必要这么复杂了</span></span><br><span class="line">        redisUtils.skuStockInit(stockKey,stockLockKey,stock.getStock().toString(),stock.getLockStock().toString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stockInRedis;<span class="comment">//缓存中有就直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//缓存结果可能会返回设置不成功，所以还是返回数据库查询结果</span></span><br><span class="line">    <span class="keyword">return</span> stock.getStock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个工具类为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看redis是否已经初始化好库存初始值，没有就初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOCK_CACHE_LUA =</span><br><span class="line">        <span class="string">"local stock = KEYS[1] "</span> +</span><br><span class="line">                <span class="string">"local stock_lock = KEYS[2] "</span> +</span><br><span class="line">                <span class="string">"local stock_val = tonumber(ARGV[1]) "</span> +</span><br><span class="line">                <span class="string">"local stock_lock_val = tonumber(ARGV[2]) "</span> +</span><br><span class="line">                <span class="string">"local is_exists = redis.call(\"EXISTS\", stock) "</span> +</span><br><span class="line">                <span class="string">"if is_exists == 1  then "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"else  "</span> +</span><br><span class="line">                <span class="string">"   redis.call(\"SET\", stock, stock_val) "</span> +</span><br><span class="line">                <span class="string">"   redis.call(\"SET\", stock_lock, stock_lock_val) "</span> +</span><br><span class="line">                <span class="string">"   return 1 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 缓存sku库存 以及锁定库存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">skuStockInit</span><span class="params">(String stockKey,String stockLockKey,String stock,String stockLock)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用jedis去执行lua脚本 输入的参数要注意顺序 都是写死的 第一组是key，第二组是stock</span></span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(STOCK_CACHE_LUA, Collections.unmodifiableList(Arrays.asList(stockKey,stockLockKey))</span><br><span class="line">                ,Collections.unmodifiableList(Arrays.asList(stock, stockLock)));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (EXCUTE_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于lua脚本进行稍微的解释一下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//第一组数据是key数组；第二组数据是args数组，是与key数组对应的值，就是库存</span><br><span class="line">//我们这里第一组为[stockKey,stockLockKey],就是存在redis中的名字，这里是在service层中定义好了</span><br><span class="line">//第二组为[<span class="number">50</span>,<span class="number">0</span>]，这个值就是可以从数据库表t_stock中查询出来的</span><br><span class="line">//因为执行这段lua脚本的话，说明redis中没有缓存的数据，所以需要先查询数据库，然后将缓存设置好</span><br><span class="line">//lua中定义变量用<span class="keyword">local</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> stock = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> stock_lock = KEYS[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">local</span> stock_val = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> stock_lock_val = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">//再查询一遍缓存是否存在，防止两个线程同时进来设置缓存</span><br><span class="line">//存在就不用设置缓存了，否则就设置缓存</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> is_exists = redis.call(<span class="string">"EXISTS"</span>, stock)</span><br><span class="line"><span class="keyword">if</span> is_exists == <span class="number">1</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">"SET"</span>, stock, stock_val)</span><br><span class="line">    redis.call(<span class="string">"SET"</span>, stock_lock, stock_lock_val)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>那么，启动工程<code>mama-buy-stock</code>：假如我去查询skuId=1的商品：</p><p><img src="http://bloghello.oursnail.cn/mama8-2.png" alt="image"></p><p>第一次库存不存在，那么就会去查询数据库：</p><p><img src="http://bloghello.oursnail.cn/mama8-3.png" alt="image"></p><p>我们再来看看redis中的数据：</p><p><img src="http://bloghello.oursnail.cn/mama8-4.png" alt="image"></p><h2>三、扣减库存</h2><p>下面来看看扣减库存是如何实现的。因为提交订单后，往往是不止一件商品的，往往购物车内有很多件商品，同时过来，假设有五件商品，但是其中只有一件暂时没有库存了，那么我还是希望其他的四件商品能够卖出去，只是没有库存的商品就不算钱了。所以扣减库存用一个map来装，即<code>Map&lt;skuId,count&gt;</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Map&lt;Long,Integer&gt;&gt; reduceStock(<span class="meta">@RequestBody</span> List&lt;StockReduce&gt; stockReduceList)&#123;</span><br><span class="line">    ApiResult result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"库存扣减成功"</span>);</span><br><span class="line">    Map&lt;Long,Integer&gt; resultMap =  stockService.reduceStock(stockReduceList);</span><br><span class="line">    result.setData(resultMap);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Long, Integer&gt; <span class="title">reduceStock</span><span class="params">(List&lt;StockReduce&gt; stockReduceList)</span> </span>&#123;</span><br><span class="line">    Map&lt;Long, Integer&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历去减redis中库存，增加锁定库存</span></span><br><span class="line">    stockReduceList.stream().forEach(param -&gt; &#123;</span><br><span class="line">        String stockKey = Constants.CACHE_PRODUCT_STOCK+<span class="string">":"</span>+param.getSkuId();</span><br><span class="line">        String stockLockKey = Constants.CACHE_PRODUCT_STOCK_LOCK+<span class="string">":"</span>+param.getSkuId();</span><br><span class="line">        Object result = redisUtils.reduceStock(stockKey,</span><br><span class="line">                                               stockLockKey,</span><br><span class="line">                                               param.getReduceCount().toString(),<span class="comment">//incrby一个负数，就是减</span></span><br><span class="line">                                               String.valueOf(Math.abs(param.getReduceCount())));<span class="comment">//incrby一个正数，就是加</span></span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">instanceof</span> Long)&#123;</span><br><span class="line">            <span class="comment">//库存不存在或者不足 扣减失败 sku下单失败 记录下来</span></span><br><span class="line">            resultMap.put(param.getSkuId(),-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result <span class="keyword">instanceof</span> List)&#123;</span><br><span class="line">            <span class="comment">//扣减成功 记录扣减流水</span></span><br><span class="line">            List resultList =  ((List) result);</span><br><span class="line">            <span class="keyword">int</span> stockAftChange =  ((Long)resultList.get(<span class="number">0</span>)).intValue();</span><br><span class="line">            <span class="keyword">int</span> stockLockAftChange = ((Long) resultList.get(<span class="number">1</span>)).intValue();</span><br><span class="line">            StockFlow stockFlow = <span class="keyword">new</span> StockFlow();</span><br><span class="line">            stockFlow.setOrderNo(param.getOrderNo());</span><br><span class="line">            stockFlow.setSkuId(param.getSkuId());</span><br><span class="line">            stockFlow.setLockStockAfter(stockLockAftChange);</span><br><span class="line">            stockFlow.setLockStockBefore(stockLockAftChange+param.getReduceCount());</span><br><span class="line">            stockFlow.setLockStockChange(Math.abs(param.getReduceCount()));</span><br><span class="line">            stockFlow.setStockAfter(stockAftChange);</span><br><span class="line">            stockFlow.setStockBefore(stockAftChange+Math.abs(param.getReduceCount()));</span><br><span class="line">            stockFlow.setStockChange(param.getReduceCount());</span><br><span class="line">            stockFlowMapper.insertSelective(stockFlow);</span><br><span class="line">            resultMap.put(param.getSkuId(),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于redis的操作，基本与上一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>   扣减库存lua脚本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> 0  key不存在 错误   -1 库存不足  返回list  扣减成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOCK_REDUCE_LUA=</span><br><span class="line">        <span class="string">"local stock = KEYS[1]\n"</span> +</span><br><span class="line">                <span class="string">"local stock_lock = KEYS[2]\n"</span> +</span><br><span class="line">                <span class="string">"local stock_change = tonumber(ARGV[1])\n"</span> +</span><br><span class="line">                <span class="string">"local stock_lock_change = tonumber(ARGV[2])\n"</span> +</span><br><span class="line">                <span class="string">"local is_exists = redis.call(\"EXISTS\", stock)\n"</span> +</span><br><span class="line">                <span class="string">"if is_exists == 1 then\n"</span> +</span><br><span class="line">                <span class="string">"    local stockAftChange = redis.call(\"INCRBY\", stock,stock_change)\n"</span> +</span><br><span class="line">                <span class="string">"    if(stockAftChange&lt;0) then\n"</span> +</span><br><span class="line">                <span class="string">"        redis.call(\"DECRBY\", stock,stock_change)\n"</span> +</span><br><span class="line">                <span class="string">"        return -1\n"</span> +</span><br><span class="line">                <span class="string">"    else \n"</span> +</span><br><span class="line">                <span class="string">"        local stockLockAftChange = redis.call(\"INCRBY\", stock_lock,stock_lock_change)\n"</span> +</span><br><span class="line">                <span class="string">"        return &#123;stockAftChange,stockLockAftChange&#125;\n"</span> +</span><br><span class="line">                <span class="string">"    end "</span> +</span><br><span class="line">                <span class="string">"else \n"</span> +</span><br><span class="line">                <span class="string">"    return 0\n"</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">reduceStock</span><span class="params">(String stockKey,String stockLockKey,String stockChange,String stockLockChange)</span></span>&#123;</span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(STOCK_REDUCE_LUA, Collections.unmodifiableList(Arrays.asList(stockKey,stockLockKey))</span><br><span class="line">                ,Collections.unmodifiableList(Arrays.asList(stockChange, stockLockChange)));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，一旦数据库发生异常，那么就会回滚，但是redis中是无法回滚的。这个问题不用担心，因为数据库发生异常是及其严重的问题，是很少会发生的，一旦发生，只需要去这个流水的表中去查看情况，然后去执行脚本去初始化这个redis即可。所以是可以补救的。</p><p>但是接口的幂等性还没有做。重复尝试调用这个接口（通常是发生在MQ的失败重传机制，客户端的连续点击一般是可以避免的），可能会重复减redis库存并且重复地去插入流水记录。这个问题该如何解决呢？</p><h2>四、redis分布式锁来实现幂等性</h2><p>主流的方案，比如有用一张表来控制，比如以这个orderID为唯一主键，一旦插入成功，就可以根据这个唯一主键的存在与否判断是否为重复请求（也就是说，这里的扣减库存和插入去重表放在一个事务里，去重表中有一个字段为orderId，全局唯一不重复，用唯一索引进行约束，那么插入的时候判断这个去重表是否可以插入成功，如果不成功，那么数据库操作全部回滚）。</p><p>可以用redis分布式锁给这个订单上锁。以订单id为锁，不会影响其他线程来扣减库存，所以不影响性能。</p><p>针对这个订单，第一次肯定是可以去扣减库存的，但是第二次再接收到这个请求，那么就要返回已经成功了，不要再重复扣减。</p><p>对于<code>reduceStock()</code>这个方法最前面增加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止扣减库存时MQ正常重试时的不幂等</span></span><br><span class="line"><span class="comment">//以订单ID 加个缓存锁 防止程序短时间重试 重复扣减库存 不用解锁 自己超时</span></span><br><span class="line">Long orderNo = stockReduceList.get(<span class="number">0</span>).getOrderNo();</span><br><span class="line"><span class="keyword">boolean</span> lockResult = redisUtils.distributeLock(Constants.ORDER_RETRY_LOCK+orderNo.toString(),orderNo.toString(),<span class="number">300000</span>);</span><br><span class="line"><span class="keyword">if</span>(!lockResult)&#123;</span><br><span class="line">    <span class="comment">//锁定失败 重复提交 返回一个空map</span></span><br><span class="line">    <span class="keyword">return</span>  Collections.EMPTY_MAP;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long EXCUTE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**lua脚本  在redis中 lua脚本执行是串行的 原子的 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNLOCK_LUA=</span><br><span class="line">        <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then "</span> +</span><br><span class="line">                <span class="string">"   return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">distributeLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span></span>&#123;</span><br><span class="line">    String result = redisTemplate.execute((RedisCallback&lt;String&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        JedisCommands commands = (JedisCommands)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> commands.set(lockKey,requestId,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);<span class="comment">//一条命令实现setnx和setexpire这些操作，原子性</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 释放分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseDistributelock</span><span class="params">(String lockKey, String requestId)</span></span>&#123;</span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(UNLOCK_LUA, Collections.singletonList(lockKey), Collections.singletonList(requestId));<span class="comment">//lua脚本中原子性实现：get查询和delete删除这两个操作</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (EXCUTE_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里不需要我们主动去释放分布式锁，只要设置一个大于重试时间的过期时间即可。让它自己删除。</p><p>注意redis在集群下做分布式锁，最好要用Redission。这里如果用于集群，如何lua脚本在一个事务里同时操作多个key的时候，如果要保证这个事务生效，就需要保证这几个key都要在同一个节点上。但是，比如我们这里的两个key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK = <span class="string">"product:stock"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK_LOCK = <span class="string">"product:stock:lock"</span>;</span><br></pre></td></tr></table></figure><p>因为我们这里要同时对库存和锁定库存这两个key进行操作，需要放在一个事务内执行，不处理的话，一旦他们不在一个节点，那么事务就不会生效，解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK = <span class="string">"&#123;product:stock&#125;"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK_LOCK = <span class="string">"&#123;product:stock&#125;:lock"</span>;</span><br></pre></td></tr></table></figure><p>如果加上花括号，那么在进行计算hash值的时候，他们两就会是一样的，会被投放到同一个slot中，自然就保证了在同一个节点上。</p><h2>五、测试一下</h2><p><img src="http://bloghello.oursnail.cn/mama8-6.png" alt="image"></p><p><img src="http://bloghello.oursnail.cn/mama8-5.png" alt="image"></p><p><img src="http://bloghello.oursnail.cn/mama8-7.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、扣减库存问题分析&lt;/h2&gt;
&lt;p&gt;在提交订单的时候，要扣减库存，对于sql，是这么写的：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>07-交易工程(下)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/07-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/07-交易工程(下)/</id>
    <published>2019-04-17T02:41:41.622Z</published>
    <updated>2019-04-17T02:43:37.190Z</updated>
    
    <content type="html"><![CDATA[<h2>一、JEST客户端实现产品搜索接口</h2><p>上节完成了ELK平台的搭建，经过检验，确实可以实现全文检索的功能，这里在代码层面真正完成产品搜索等服务。</p><h3>controller层非常简单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/search"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;Product&gt;&gt; searchProduct(<span class="meta">@RequestBody</span> PageSearch pageSearch) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    ApiResult&lt;List&lt;Product&gt;&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"检索数据成功"</span>);</span><br><span class="line">    List&lt;Product&gt; data = productService.search(pageSearch.getPageNumber(),pageSearch.getPageSize(),pageSearch.getSearchContent());</span><br><span class="line">    result.setData(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>首先引入相关的依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全文搜索 这里用于商品搜索--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全文检索 工具类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里说一说jest。</p><p>Jest 是一个Java 版的ElasticSearch Http Rest 客户端，基于HttpClient 封装实现。</p><p>因为我们在上一节中用kibana可视化平台发送类似于这样的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /jdbc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;spu_name&quot;: &quot;蓝&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;require_field_match&quot;: false,</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;*&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是说，我们通过kibana给elasticsearch发送了一个restful的一个http get请求，那么现在的问题就是：如何用java代码来封装成这样一个请求。最先想到的肯定是用HttpClient，但是不够方便，正好jest这个工具类帮助我们实现了这个功能。</p><p>它就是在httpclient的基础上进行封装，将请求包装成上面那种形式发送给ES，ES给相应信息，它可以接收到，然后我们再解析即可。</p><p>要将这个客户端注册到spring中，service层中才能注入使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JestHttpClient <span class="title">getESClient</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">    factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">            .Builder(<span class="string">"http://"</span>+parameters.getEsHost())</span><br><span class="line">            .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">            .readTimeout(<span class="number">10000</span>)</span><br><span class="line">            .build());</span><br><span class="line">    JestHttpClient client = (JestHttpClient)factory.getObject();</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>具体来看看service层：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES全文检索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">search</span><span class="params">(<span class="keyword">int</span> pageNumber, <span class="keyword">int</span> pageSize, String searchContent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pageSize==<span class="number">0</span>) &#123;</span><br><span class="line">        pageSize = PAGE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pageNumber&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        pageNumber = PAGE_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//查询，是一种链式的风格，很容易拼接，就是拼接根据上面字段进行匹配，并且支持分页</span></span><br><span class="line">    searchSourceBuilder.query(QueryBuilders<span class="comment">//组合查询</span></span><br><span class="line">            .boolQuery()</span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">"spu_name"</span>,searchContent))<span class="comment">//must：必须匹配，相当于and；should：相当于or；must not：不匹配</span></span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">"status"</span>,<span class="number">1</span>)))<span class="comment">//第二个条件是必须是在架的商品</span></span><br><span class="line">            .from(pageNumber*pageSize)<span class="comment">//分页展示的起始位置</span></span><br><span class="line">            .size(pageSize);<span class="comment">//每页展示多少</span></span><br><span class="line">    <span class="comment">//这里就是高亮显示的设置</span></span><br><span class="line">    searchSourceBuilder.highlight()</span><br><span class="line">            .field(<span class="string">"spu_name"</span>)</span><br><span class="line">            .preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>)</span><br><span class="line">            .fragmentSize(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//索引，根据索引来查的，我们在logstash中已经设置了这个索引名称</span></span><br><span class="line">    Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">            .addIndex(<span class="string">"jdbc"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//响应结果</span></span><br><span class="line">    SearchResult response = esClient.execute(search);</span><br><span class="line">    String jsonString = response.getJsonString();</span><br><span class="line">    <span class="comment">//json字符串的解析</span></span><br><span class="line">    List&lt;Product&gt; productList = parseResult(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> productList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>下面进行测试：</h3><p><img src="http://bloghello.oursnail.cn/mama7-1.png" alt="image"></p><h2>二、spring cache来实现分类的查询和缓存</h2><h3>controller接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/category"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;Category&gt;&gt; listCategory()&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;List&lt;Category&gt;&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"查询分类成功"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list =  productService.listCategory();</span><br><span class="line"></span><br><span class="line">    result.setData(list);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>其中service层：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span>(cacheNames = Constants.CACHE_PRODUCT_CATEGORY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">listCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> categoryMapper.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，这里添加了注解<code>@Cacheable</code>，这一行注解就可以将其查询出来的结果缓存到redis中，是不是特别地方便。不能忘记在启动类上添加注解开启缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure><p>这里要注意，分类是有层级的，那么展示所有层级的分类有两种方式，一种是直接在sql中实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Category_Column_List"</span> &gt;</span></span><br><span class="line">    p.id p_id, p.parent_id p_parent_id, p.name p_name, p.status p_status, p.sort_order p_sort_order,</span><br><span class="line">    p.create_time p_create_time, p.update_time p_update_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Children_Column_List"</span> &gt;</span></span><br><span class="line">    c.id c_id, c.parent_id c_parent_id, c.name c_name, c.status c_status, c.sort_order c_sort_order,</span><br><span class="line">    c.create_time c_create_time, c.update_time c_update_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"CategoryResultMap"</span> &gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Category_Column_List"</span> /&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Children_Column_List"</span> /&gt;</span></span><br><span class="line">    from t_category p</span><br><span class="line">    left join t_category c on c.parent_id = p.id</span><br><span class="line">    where p.parent_id = 0 and c.status = 1 and p.status=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一种就是在代码层面实现，思路很简单，就是用一个Set集合，先存放所有的一级分类，然后递归查询它下面的所有子分类。这个方式在电商项目中用到的。本节用的是sql方式直接去查询。</p><p><img src="http://bloghello.oursnail.cn/mama7-2.png" alt="image"></p><p>测试缓存是否生效：</p><p><img src="http://bloghello.oursnail.cn/mama7-3.png" alt="image"></p><h2>三、商品详情展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示商品详情，就是sku</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detail/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult&lt;Product&gt; <span class="title">productDetail</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;Product&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"获取商品详情成功"</span>);</span><br><span class="line"></span><br><span class="line">    Product product =  productService.productDetail(id);</span><br><span class="line"></span><br><span class="line">    result.setData(product);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在《交易工程上》中分析了一下，这一块是比较复杂的，因为涉及的东西比较多。这个产品下面有很多的sku，再将那张图拿过来：</p><p><img src="http://bloghello.oursnail.cn/mama5-9.png" alt="image"></p><p>对应着实际页面是：</p><p><img src="http://bloghello.oursnail.cn/mama7-4.png" alt="image"></p><p>那么，从表中我们可以看出，要完成这个详情页面，借助于三张表，那么就对应着三个bean。就是<code>product</code>里面包含着<code>ProductSku</code>，而<code>ProductSku</code>里面包含着<code>SkuPropertyOption</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectByPrimaryKeyWithSku" resultMap="ProductResultMapWithSku" parameterType="java.lang.Long" &gt;</span><br><span class="line">  <span class="keyword">select</span></span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Product_Column_List"</span> /&gt;,</span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Sku_Column_List"</span> /&gt;,</span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Sku_Option_Column_List"</span> /&gt;</span><br><span class="line">  <span class="keyword">from</span> t_product p</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> t_sku s <span class="keyword">on</span> s.spu_id = p.id</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> t_sku_property_option o <span class="keyword">on</span>  o.sku_id = s.id</span><br><span class="line">  <span class="keyword">where</span> p.id = #&#123;<span class="keyword">id</span>,jdbcType=<span class="built_in">BIGINT</span>&#125; <span class="keyword">and</span> s.enable_flag = <span class="number">1</span> <span class="keyword">and</span> o.enable_flag = <span class="number">1</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>库存工程当然还没有结束，交易这个功能将会持续集成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、JEST客户端实现产品搜索接口&lt;/h2&gt;
&lt;p&gt;上节完成了ELK平台的搭建，经过检验，确实可以实现全文检索的功能，这里在代码层面真正完成产品搜索等服务。&lt;/p&gt;
&lt;h3&gt;controller层非常简单：&lt;/h3&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>06-交易工程(中)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/06-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%AD)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/06-交易工程(中)/</id>
    <published>2019-04-17T02:41:22.091Z</published>
    <updated>2019-04-17T02:43:25.912Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>因为要完成产品的全文搜索这个功能，所以需要准备一下ES的环境。本节安装ELK。</p><p>ELK由Elasticsearch、Logstash和Kibana三部分组件组成。</p><p><img src="http://bloghello.oursnail.cn/mama6-2.png" alt="image"></p><p>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>简单来说，他是个全文搜索引擎，可以快速地储存、搜索和分析海量数据。</p><p>Logstash是一个完全开源的工具，它可以把分散的、多样化的日志日志，或者是其他数据源的数据信息进行收集、分析、处理，并将其存储供以后使用。</p><p>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</p><p>你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</p><p>你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。</p><p>Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><h2>一、安装ES</h2><h3>1.1 首先是安装JDK：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</span><br><span class="line"></span><br><span class="line">tar xzf jdk-8u141-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3>1.2 添加环境变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/opt/jdk1.8.0_141</span><br><span class="line">JAVA_JRE=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3>1.3 下载6.2.4版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.tar.gz</span><br><span class="line">tar -xzvf elasticsearch-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf elasticsearch-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line">mv elasticsearch-6.2.4 elasticsearch</span><br></pre></td></tr></table></figure><h3>1.4 配置sysctl.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#修改sysctl配置</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"> </span><br><span class="line">#添加如下配置</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"> </span><br><span class="line">#让配置生效</span><br><span class="line">sysctl -p</span><br><span class="line"> </span><br><span class="line">#查看配置的数目</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br></pre></td></tr></table></figure><h3>1.5 elasticsearch从5.0版本之后不允许root账户启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#添加用户</span><br><span class="line">adduser dev</span><br><span class="line"> </span><br><span class="line">#设定密码</span><br><span class="line">passwd dev</span><br><span class="line"> </span><br><span class="line">#添加权限</span><br><span class="line">chown -R dev /opt/elasticsearch</span><br><span class="line"> </span><br><span class="line">#切换用户</span><br><span class="line">su dev</span><br><span class="line"> </span><br><span class="line">#查看当前用户</span><br><span class="line">who am i</span><br><span class="line"> </span><br><span class="line">#启动</span><br><span class="line">./elasticsearch/bin/elasticsearch</span><br><span class="line"> </span><br><span class="line">#后台启动</span><br><span class="line">./elasticsearch/bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h3>1.6 配置limits.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"> </span><br><span class="line">把</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line"> </span><br><span class="line">改为</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line"> </span><br><span class="line">#切换用户</span><br><span class="line">su dev</span><br><span class="line"> </span><br><span class="line">#查看配置是否生效</span><br><span class="line">ulimit -Hn</span><br></pre></td></tr></table></figure><h3>1.7 配置所有用户访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><h3>1.8 添加一下内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3>1.9 重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep elastic</span><br><span class="line">kill -9 xxxx</span><br></pre></td></tr></table></figure><h3>1.10 测试：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/</span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;MmiaBfA&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;zjX-q5PDRLyrWMy5TiBDkw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.2.4&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ccec39f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-04-12T20:37:28.497551Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就说明成功了。</p><h2>二、安装Kibana 6.2.4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mv kibana-6.2.4-linux-x86_64 kibana</span><br><span class="line"></span><br><span class="line">vim /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><h3>2.1 添加以下内容：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure><h3>2.2 切换到bin目录下，启动即可。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#不能关闭终端</span><br><span class="line">./kibana  </span><br><span class="line"></span><br><span class="line">#可关闭终端</span><br><span class="line">nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><h3>2.3 开放防火墙和安全组对应的这个端口</h3><p>浏览器访问：<a href="http://106.14.163.235:5601" target="_blank" rel="noopener">http://106.14.163.235:5601</a> 看到一个控制台页面就成功啦。</p><p><img src="http://bloghello.oursnail.cn/mama6-1.png" alt="image"></p><h3>2.4 关闭这个进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ps -ef|grep kibana</span><br><span class="line"> </span><br><span class="line">ps -ef|grep 5601</span><br><span class="line"> </span><br><span class="line">都找不到 </span><br><span class="line"> </span><br><span class="line">尝试 使用 fuser -n tcp 5601</span><br><span class="line"> </span><br><span class="line">kill -9  端口</span><br><span class="line"> </span><br><span class="line">启动即可 ./kibana</span><br><span class="line"></span><br><span class="line">或者去这个目录下的.out日志中可以看到看到它占用的pid</span><br></pre></td></tr></table></figure><h2>三、logstash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf logstash-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line"># 重命名</span><br><span class="line">mv logstash-6.2.4.tar.gz logstash</span><br><span class="line"></span><br><span class="line"># 进入</span><br><span class="line">cd logstash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个配置文件 我这里是mysqltones.conf</span><br><span class="line">input &#123;</span><br><span class="line">    stdin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    jdbc &#123;</span><br><span class="line">      jdbc_connection_string =&gt; &quot;jdbc:mysql://127.0.0.1:3306/mama-buy-trade&quot;</span><br><span class="line">      jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">      jdbc_password =&gt; &quot;22Daguozi@&quot;</span><br><span class="line"></span><br><span class="line">      jdbc_driver_library =&gt; &quot;/opt/logstash/mysql-connector-java-5.1.46-bin.jar&quot;</span><br><span class="line">      # the name of the driver class for mysql</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">      jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">      jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line"></span><br><span class="line">      # mysql文件, 也可以直接写SQL语句在此处，如下：</span><br><span class="line">      statement =&gt; &quot;SELECT * from t_product&quot;</span><br><span class="line">      # statement_filepath =&gt; &quot;/opt/logstash/conf/jdbc.sql&quot;</span><br><span class="line"></span><br><span class="line">      # 这里类似crontab,可以定制定时操作，比如每10分钟执行一次同步(分 时 天 月 年)</span><br><span class="line">      schedule =&gt; &quot;*/10 * * * *&quot;</span><br><span class="line">      type =&gt; &quot;jdbc&quot;</span><br><span class="line"></span><br><span class="line">      # 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中</span><br><span class="line">      record_last_run =&gt; &quot;true&quot;</span><br><span class="line"></span><br><span class="line">      # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.</span><br><span class="line">      use_column_value =&gt; &quot;true&quot;</span><br><span class="line"></span><br><span class="line">      # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键</span><br><span class="line">      tracking_column =&gt; &quot;id&quot;</span><br><span class="line"></span><br><span class="line">      last_run_metadata_path =&gt; &quot;/opt/logstash/conf/last_id&quot;</span><br><span class="line"></span><br><span class="line">      # 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录</span><br><span class="line">      clean_run =&gt; &quot;false&quot;</span><br><span class="line"></span><br><span class="line">      # 是否将 字段(column) 名称转小写</span><br><span class="line">      lowercase_column_names =&gt; &quot;false&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 此处我不做过滤处理,如果需要，也可参考elk安装那篇</span><br><span class="line">filter &#123;&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    # 输出到elasticsearch的配置</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">        index =&gt; &quot;jdbc&quot;</span><br><span class="line"></span><br><span class="line">        # 将&quot;_id&quot;的值设为mysql的autoid字段</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">        template_overwrite =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 这里输出调试，正式运行时可以注释掉</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">./bin/logstash -f ./mysqltones.conf</span><br></pre></td></tr></table></figure><p>看到这个就说明成功了：</p><p><img src="http://bloghello.oursnail.cn/mama6-3.png" alt="image"></p><h2>安装mysql数据库</h2><p>这一步要在执行logstash之前搞定，我的是阿里云centos7.3版本，mysql版本是5.7，安装过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 下载MySQL源安装包: </span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 安装MySQL源：</span><br><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm </span><br><span class="line"></span><br><span class="line"># 检查MySQL源安装情况： </span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"></span><br><span class="line"># 安装MySQL: </span><br><span class="line">yum install mysql-community-server</span><br><span class="line"></span><br><span class="line"># 启动MySQL: </span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"># 查看MySQL状态: </span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line"># 设置开机启动MySQL：</span><br><span class="line">systemctl enable mysqld </span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 查找并修改MySQL默认密码（注意密码要符合规范，否则会失败）：</span><br><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log </span><br><span class="line"></span><br><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">alter user root@localhost identified by &apos;你的新密码&apos;;</span><br><span class="line"></span><br><span class="line"># 远程连接测试添加远程账户：</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;用户&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"># 立即生效：</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 退出MySQL：</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 最后远程将数据给导入数据库</span><br></pre></td></tr></table></figure><h2>安装分词器</h2><p><code>ik_max_word</code>是分词比较细腻的一款，我们就用它来做分词，首先需要安装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 直接安装</span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip</span><br><span class="line"> </span><br><span class="line"># 重新启动ES</span><br><span class="line">ps -ef | grep elastic</span><br><span class="line">kill -9 xxxx</span><br><span class="line">su dev</span><br><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><p>对这个分词器在<code>kibana</code>中进行测试：</p><p><img src="http://bloghello.oursnail.cn/mama6-5.png" alt="image"></p><p>下面结合数据库模拟一下：</p><p><img src="http://bloghello.oursnail.cn/mama6-4.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因为要完成产品的全文搜索这个功能，所以需要准备一下ES的环境。本节安装ELK。&lt;/p&gt;
&lt;p&gt;ELK由Elasticsearch、Logstash和Kibana三部分组件组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bloghello.ou
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>05-交易工程(上)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/05-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/05-交易工程(上)/</id>
    <published>2019-04-17T02:40:50.201Z</published>
    <updated>2019-04-17T02:41:15.964Z</updated>
    
    <content type="html"><![CDATA[<h2>一、前言</h2><p>回顾一下之前的内容，在单体应用中，我们可以用<code>select .. for update</code>，这样子可以在这个事务内锁定这一行数据，避免了并发问题。还可以用唯一约束来限制。对于分布式应用，必须要由一个全局锁来控制，比如ZK来实现的分布式锁。</p><p>对于分表之后，如何保证ID的不重复呢？一般我们可能会想到用UUID来实现嘛。但是UUID一般可以获取当前时间的毫秒数再加点随机数，但是在高并发下仍然可能重复。最重要的是，如果我要用这种UUID来生成分表的唯一ID的话，重复不谈，这种随机的字符串对于我们的innodb存储引擎的插入效率是很低的。所以我们生成的ID如果作为主键，最好有两种特性：<strong>分布式唯一和有序</strong>。</p><p>唯一性就不用说了，有序保证了对索引字段的插入的高效性。我们来具体看看ShardingJDBC的分布式ID生成策略是如何保证。</p><h2>二、ShardingJDBC的分布式ID生成策略</h2><h3>snowflake算法</h3><p><img src="http://bloghello.oursnail.cn/mama5-10.png" alt="image"></p><p>sharding-jdbc的分布式ID采用twitter开源的snowflake算法，不需要依赖任何第三方组件，这样其扩展性和维护性得到最大的简化；但是snowflake算法的缺陷（<strong>强依赖时间，如果时钟回拨，就会生成重复的ID</strong>）。</p><p>雪花算法是由Twitter公布的分布式主键生成算法，<strong>它能够保证不同进程主键的不重复性，以及相同进程主键的有序性</strong>。</p><p><strong>在同一个进程中</strong>，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。 同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。例如MySQL的Innodb存储引擎的主键。</p><p>使用雪花算法生成的主键，二进制表示形式包含4部分，从高位到低位分表为：1bit符号位、41bit时间戳位、10bit工作进程位以及12bit序列号位。</p><ul><li>符号位(1bit)</li></ul><p>预留的符号位，恒为零。</p><ul><li>时间戳位(41bit)</li></ul><p>41位的时间戳可以容纳的毫秒数是2的41次幂，一年所使用的毫秒数是：365 * 24 * 60 * 60 * 1000。通过计算可知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 41) / (365 * 24 * 60 * 60 * 1000L);</span><br></pre></td></tr></table></figure><p>结果约等于69.73年。<code>ShardingSphere</code>的雪花算法的时间纪元从2016年11月1日零点开始，可以使用到2086年，相信能满足绝大部分系统的要求。</p><ul><li>工作进程位(10bit)</li></ul><p>该标志在Java进程内是唯一的，如果是分布式应用部署应保证每个工作进程的id是不同的。该值默认为0，可通过调用静态方法<code>DefaultKeyGenerator.setWorkerId()</code>设置。</p><ul><li>序列号位(12bit)</li></ul><p>该序列是用来在同一个毫秒内生成不同的ID。如果在这个毫秒内生成的数量超过4096(2的12次幂)，那么生成器会等待到下个毫秒继续生成。</p><h3>时钟回拨</h3><p>服务器时钟回拨会导致产生重复序列，因此默认分布式主键生成器提供了一个最大容忍的时钟回拨毫秒数。 如果时钟回拨的时间超过最大容忍的毫秒数阈值，则程序报错；如果在可容忍的范围内，默认分布式主键生成器会等待时钟同步到最后一次主键生成的时间后再继续工作。 最大容忍的时钟回拨毫秒数的默认值为0，可通过调用静态方法<code>DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds()</code>设置。</p><p>雪花算法主键的详细结构见下图。</p><p><img src="http://bloghello.oursnail.cn/mama5-1.png" alt="image"></p><h2>三、ES</h2><p>对于商品搜索这种功能，为什么要用ES呢？</p><p>在数据库中可以用%这种模糊搜索，比如我要搜<code>世界你好</code>,那么我们可能可以这样:<code>like '%世界%'</code>来进行模糊搜索。但是如果我要搜<code>世好</code>咋办呢？另一方面，不能走索引，并且<strong>全表扫描</strong>，数据量大的时候就凉了。</p><p>ES基本原理是实现了一个分词匹配器，比如一句话叫<code>你好世界，我是JAVA</code>,它可能会将其分解为<code>你好</code>,<code>世界</code>,<code>我是</code>,<code>JAVA</code>这几个词，然后根据你输入的关键字来一一匹配，按照匹配度的高低排个序展示出来。</p><p>下面具体的安装下节再说。</p><h2>四、核心-商品表设计</h2><p>我们先来看看华为官网手机详情，比如我们看看<code>HUAWEI Mate 20</code>这一款（<strong>此处非广告…还没用过华为手机</strong>）：</p><p><img src="http://bloghello.oursnail.cn/mama5-2.png" alt="image"></p><p>这是一个真正的页面详情，主要的特点是针对不同的颜色、版本、套餐等条件会动态地改变价格。也就是说一组独立的属性决定了一个库存。这就是SKU（最小库存单位）。其实是非常复杂的，这里的手机算是比较简单的。</p><p>那么如何设计呢？</p><p>从页面上看，这个SKU有个名字：“HUAWEI Mate 20 6GB+64GB 全网通版（亮黑色）”，下面是若干属性。</p><p>首先整体来看一下交易数据库有几张表：</p><p><img src="http://bloghello.oursnail.cn/mama5-3.png" alt="image"></p><p>我们分解来看，从简单到复杂。首先是<code>t_brand</code>,<code>t_category</code>和<code>t_product</code>这三张表，分别是品牌，可能有华为，也可能有小米等等。现在假设就只有华为这一个牌子，下面有几种分类，我们可以看页面：</p><p><img src="http://bloghello.oursnail.cn/mama5-4.png" alt="image"></p><p>我们看到，有手机、笔记本、智能家居等几种分类。每种分类下面有好几种子分类，比如这里的荣耀、P系列、Mate系列等分类。</p><p>对于<code>t_brand</code>，十分简单，表设计如图：</p><p><img src="http://bloghello.oursnail.cn/mama5-5.png" alt="image"></p><p>对于<code>t_category</code>也简单，简单来说就是用一个<code>parent_id</code>来实现递归的自相关：</p><p><img src="http://bloghello.oursnail.cn/mama5-6.png" alt="image"></p><p><code>t_category</code>和<code>t_product</code>的关联就简单啦，就是一对多的关系嘛！</p><p><img src="http://bloghello.oursnail.cn/mama5-7.png" alt="image"></p><p>下面是比较麻烦一点的是属性，<code>t_property</code>是与<code>t_category</code>挂钩的，这样设计的原因是，在后台配置的时候，选完分类，比如这里的荣耀系列之后，我就可以配置对应的属性：颜色、容量、制式、套餐和定制这五种属性了。<code>t_property</code>与<code>t_property_option</code>就是一对多的关系了，比如颜色有沙滩金、极光蓝、幻夜黑以及魅力红。</p><p><img src="http://bloghello.oursnail.cn/mama5-8.png" alt="image"></p><p>ok，下面就是设计SKU了，简单来说，就是每种产品对应的版本，我们再看一眼第一幅图：</p><p><img src="http://bloghello.oursnail.cn/mama5-2.png" alt="image"></p><p>我们可以看到，首先这是一款具体的产品，然后呢，每款产品下有产品的名字、产品对应于各种不同的属性而显示不同的价格。</p><p>我们思考一下，我们已经拥有了<code>t_product</code>,<code>t_property</code>,<code>t_property_option</code>这三张表。其实，我们的页面，就是说SKU，其实就是这三张表的再组合。</p><p>首先一个产品，比如荣耀V10这一款产品，我首先有一个总的SKU来说明这个产品，我只需要一个简单的信息，比如<code>sku_name</code>和<code>sku_price</code>即可，因为我这款手机有很多的配置选项可以选择，那么就需要一张<code>t_sku_option</code>这张表来承载，就是<code>sku_id</code>,<code>property_id</code>和<code>property_option_id</code>这三者的结合，后面我们根据这三者才能真正的到库存系统去削减库存，然后下单。</p><p>比如我买的是荣耀V10 6G+128G 幻夜黑 官方标配 全网通 这一款，那么我对应到<code>t_sku</code>表的是第7条记录，对应到<code>t_sku_option</code>表的是有下面几条记录：</p><ul><li>7 1 3 表示: skuID=7,颜色为幻夜黑</li><li>7 2 7 表示：skuID=7,容量为6G+128G</li><li>7 3 8 表示：skuID=7,全网通标配版</li><li>7 4 11 表示：skuID=7,官方标配</li><li>…</li></ul><p>Ok，这样我就真正选择了一个具体的手机款式，后面就可以根据这些属性去扣减库存，下订单啦！</p><p>注1：下面这张图有个错误，就是下面个绿的箭头指向的应该是<code>t_sku</code>的第一行id=1的记录，懒得改了。</p><p>注2：上面举的例子与下面的数据库中数据是一致的，可以对比看一下。</p><p><img src="http://bloghello.oursnail.cn/mama5-9.png" alt="image"></p><p>这样，就完成了比较简单的产品表的设计了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;回顾一下之前的内容，在单体应用中，我们可以用&lt;code&gt;select .. for update&lt;/code&gt;，这样子可以在这个事务内锁定这一行数据，避免了并发问题。还可以用唯一约束来限制。对于分布式应用，必须要由一个全局锁来控制，比如ZK来实现
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
</feed>
