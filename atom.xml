<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FourColor</title>
  
  <subtitle>学习技术一口吃不成胖子，慢慢走，每天只要进步一丢丢！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-22T02:08:54.400Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FourColor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot通用知识深入--切面、异常、单元测试</title>
    <link href="http://yoursite.com/2019/02/21/miscellany/SupringBoot%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E6%B7%B1%E5%85%A5--%E5%88%87%E9%9D%A2%E3%80%81%E5%BC%82%E5%B8%B8%E3%80%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/02/21/miscellany/SupringBoot通用知识深入--切面、异常、单元测试/</id>
    <published>2019-02-21T13:35:00.787Z</published>
    <updated>2019-02-22T02:08:54.400Z</updated>
    
    <content type="html"><![CDATA[<p>对于小白来说，下面的知识都是满满的干货，值得好好学习，具体的视频是学习的廖师兄的<a href="http://www.imooc.com/learn/810" target="_blank" rel="noopener">Spring Boot进阶之Web进阶</a>，值得一看，下面是笔记总结。</p><a id="more"></a><h2>一、面向切面编程</h2><p><img src="http://bloghello.oursnail.cn/zaji16-1.png" alt="image"></p><p>访问 <code>localhost:8080/dev/add</code> 日志打印结果是：</p><p><img src="http://bloghello.oursnail.cn/zaji16-2.png" alt="image"></p><h2>二、校验和返回结果封装</h2><p>1、首先是在<code>student</code>类中对<code>username</code>增加注解：<code>@NotNull(message = &quot;用户名不能为空&quot;)</code></p><p>2、在增加一个学生的方法上进行参数的验证：</p><p><img src="http://bloghello.oursnail.cn/zaji16-3.png" alt="image"></p><p>3、在http工具上输入</p><blockquote><p><a href="http://localhost:8080/dev/add?username=hello&amp;age=10" target="_blank" rel="noopener">http://localhost:8080/dev/add?username=hello&amp;age=10</a></p></blockquote><p>返回正确信息，即学生的json流：{“id”:5,“username”:“hello”,“age”:10}</p><p>如果不传<code>username</code>，即必填的那一项不给，则发生异常：</p><blockquote><p><a href="http://localhost:8080/dev/add?age=10" target="_blank" rel="noopener">http://localhost:8080/dev/add?age=10</a></p></blockquote><p>返回信息为：用户名不能为空</p><p>4、我们会发现，正确返回是新添加学生的json格式，错误返回就是一个字符串，这样对于前台来说是无法处理的，所以需要一个封装类来包装一下。</p><p><img src="http://bloghello.oursnail.cn/zaji16-4.png" alt="image"></p><p>5、下面对controller层进行改造，返回统一的格式。</p><p><img src="http://bloghello.oursnail.cn/zaji16-5.png" alt="image"></p><p>6、controller曾进行结果封装的时候，发现代码重复，进行优化。</p><p>新建一个工具类，用来封装结果。</p><p><img src="http://bloghello.oursnail.cn/zaji16-6.png" alt="image"></p><p>继而改造controller:</p><p><img src="http://bloghello.oursnail.cn/zaji16-7.png" alt="image"></p><p>结果与上面一致。</p><h2>三、统一异常处理</h2><p>如果service层业务逻辑是：</p><p><img src="http://bloghello.oursnail.cn/zaji16-8.png" alt="image"></p><p>1、我们第一个想到的方案可能是给每一种情况加上一个标记，controller层根据标记的不同进行不同的返回处理：</p><p>service层方法：</p><p><img src="http://bloghello.oursnail.cn/zaji16-9.png" alt="image"></p><p>相应的controller层为：</p><p><img src="http://bloghello.oursnail.cn/zaji16-10.png" alt="image"></p><p>对于逻辑比较简单的情况下，是可以到达我们的预期效果，但是一旦业务量逻辑复杂度高一点，就会非常地混乱。解决方案是统一异常处理。</p><p>2、加上异常处理</p><p>service层处理为:</p><p><img src="http://bloghello.oursnail.cn/zaji16-11.png" alt="image"></p><p>controller层处理为:</p><p><img src="http://bloghello.oursnail.cn/zaji16-12.png" alt="image"></p><p>返回结果为：</p><p><img src="http://bloghello.oursnail.cn/zaji16-13.png" alt="image"></p><p>显然格式都是不统一的，解决方案是对默认的exception返回信息再进行一次封装。</p><p>3、修改exception返回信息格式：</p><p>新建一个handle类：</p><p><img src="http://bloghello.oursnail.cn/zaji16-14.png" alt="image"></p><p>但是对于这种方式，如果我想让上小学的学硕状态码为100,上初中的学生的状态码为101，就无法实现了。解决方案：自定义异常。</p><p>4、自定义异常</p><p>新建一个异常类：</p><p><img src="http://bloghello.oursnail.cn/zaji16-15.png" alt="image"></p><p>在<code>service</code>层抛出异常为<code>throw new StudentException(100,&quot;还在上小学&quot;)</code>。</p><p>在刚才写的默认异常处理类中进行判断处理：</p><p><img src="http://bloghello.oursnail.cn/zaji16-16.png" alt="image"></p><p>这样，当属于小学生时，状态码为100,当属于初中生时，状态码为101，就区分开了。当不属于这个异常的异常，就会抛出未知错误。这样也不好，最好用日志将未知错误打印出来。</p><p>5、系统异常(默认异常处理):</p><p><img src="http://bloghello.oursnail.cn/zaji16-17.png" alt="image"></p><p>到现在仍然存在一些问题：状态码与状态信息都是自己在程序中临时定义的，是不规范的行为，需要有一个地方统一管理，便于区分和防止混乱重复。</p><p>6、枚举定义异常状态</p><p><img src="http://bloghello.oursnail.cn/zaji16-18.png" alt="image"></p><p>改造service层：</p><p><img src="http://bloghello.oursnail.cn/zaji16-19.png" alt="image"></p><p><img src="http://bloghello.oursnail.cn/zaji16-20.png" alt="image"></p><p>这样就完成了异常的统一管理。</p><h2>四、springboot测试</h2><p>1、对于service层的测试<br>创建：方法名右击—go to–test</p><p><img src="http://bloghello.oursnail.cn/zaji16-21.png" alt="image"></p><p>2、对于controller层的api的测试</p><p><img src="http://bloghello.oursnail.cn/zaji16-22.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于小白来说，下面的知识都是满满的干货，值得好好学习，具体的视频是学习的廖师兄的&lt;a href=&quot;http://www.imooc.com/learn/810&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot进阶之Web进阶&lt;/a&gt;，值得一看，下面是笔记总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="miscellany" scheme="http://yoursite.com/tags/miscellany/"/>
    
  </entry>
  
  <entry>
    <title>10.Sleuth服务追踪</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/10.Sleuth%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/10.Sleuth服务追踪/</id>
    <published>2019-02-21T08:27:32.524Z</published>
    <updated>2019-02-21T08:38:13.508Z</updated>
    
    <content type="html"><![CDATA[<p>在以前，所有的东西放在一起打包，放到服务器上也就不管了，但是到了分布式场景下，可能一个请求要经过十几个服务的周转，如果不进行链路的追踪，这些对于我们来说都是透明的，那么哪个节点存在问题或者存在超时隐患我们都是很难知道的，因此服务追踪是我们必须要做的一样事情。</p><a id="more"></a><h2>一、为什么需要进行分布式链路追踪springcloud-sleuth呢？</h2><p>随着分布式系统越来越复杂，你的一个请求发过发过去，各个微服务之间的跳转，有可能某个请求某一天压力太大了，一个请求过去没响应，一个请求下去依赖了三四个服务，但是你去不知道哪一个服务出来问题，这时候我是不是需要对微服务进行追踪呀？监控一个请求的发起，从服务之间传递之间的过程，我最好记录一下，记录每一个的耗时多久，一旦出了问题，我们就可以针对性的进行优化，是要增加节点，减轻压力，还是服务继续拆分，让逻辑更加简单点呢？这时候springcloud-sleuth集成zipkin能帮我们解决这些服务追踪问题。</p><h2>二、创建工程</h2><p>本工程的<code>Spring Boot</code>的版本为<code>1.5.8</code>，<code>Spring Cloud</code>版本为<code>Dalston.RELEASE</code>。包含了<code>eureka-server</code>工程，作为服务注册中心，<code>eureka-server</code>的创建过程这里不重复；<code>zipkin-server</code>作为链路追踪服务中心，负责存储链路数据；<code>gateway-service</code>作为服务网关工程，负责请求的转发,同时它也作为链路追踪客户端，负责产生数据，并上传给<code>zipkin-service</code>；<code>user-service</code>为一个应用服务，对外暴露API接口，同时它也作为链路追踪客户端，负责产生数据。</p><h3>1.构建eureka-server</h3><p>这个服务就比较简单了，就是eureka的服务端，用来注册服务。见代码<code>eureka-server</code>.</p><h3>2.构建zipkin-server</h3><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--eureka服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--zipkin服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示的页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主函数上打上两个注解开启<code>ZipkinServer</code>的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br></pre></td></tr></table></figure><p>配置文件上也很简单，注册到<code>eureka</code>上和指定好启动的端口即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 9411</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zipkin-server</span><br></pre></td></tr></table></figure><h3>3.构建user-service</h3><p>新建一个工程，取名为<code>user-service</code>，作为应用服务，对外暴露API接口.</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打上<code>eureka</code>注解。配置文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: user-service</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:9411</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      percentage: 1.0</span><br></pre></td></tr></table></figure><p><code>Zipkin Server</code>地址为<code>http://localhost:9411</code>。<br><code>spring.sleuth.sampler.percentage</code>为1.0,即100%的概率将链路的数据上传给<code>Zipkin Server</code>，在默认的情况下，该值为0.1.</p><p>测试的api为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello user!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>4.构建gateway-service</h3><p>新建一个名为<code>gateway-service</code>工程，这个工程作为服务网关，将请求转发到<code>user-service</code>，作为<code>Zipkin</code>客户端，需要将链路数据上传给<code>Zipkin Server</code>，同时它也作为<code>Eureka Client</code>。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-service</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      percentage: 1.0</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:9411</span><br><span class="line"></span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    api-a:</span><br><span class="line">      path: /user-api/**</span><br><span class="line">      serviceId: user-service</span><br></pre></td></tr></table></figure><p>以<code>“/user-api/**”</code>开头的Uri请求，转发到服务名为 <code>user-service</code> 的服务</p><h2>三、演示效果</h2><p>完整的项目搭建完毕，依次启动<code>eureka-server</code>、<code>zipkin-server</code>、<code>user-service</code>、<code>gateway-service</code>。在浏览器上访问http://localhost:8081/user-api/user/hi</p><p>访问http://localhost:9411，即访问Zipkin的展示界面，界面显示如图所示：</p><p><img src="http://bloghello.oursnail.cn/sleuth%E6%95%88%E6%9E%9C1.png" alt="image"></p><p>这个界面主要用来查找服务的调用情况，可以根据服务名、开始时间、结束时间、请求消耗的时间等条件来查找。点击“Find Traces”按钮，界面如图所示。从图可知服务的调用情况，比如服务调用时间、服务的消耗时间，服务调用的链路情况。</p><p>点击<code>Dependences</code>按钮，可以查看服务的依赖关系，在本案例中，<code>gateway-service</code>将请求转发到了<code>user-service</code>，它们的依赖关系如图：</p><p><img src="http://bloghello.oursnail.cn/sleuth%E6%95%88%E6%9E%9C2.png" alt="image"></p><p>参考文章：<a href="https://blog.csdn.net/forezp/article/details/76795269" target="_blank" rel="noopener">Spring Cloud Sleuth进阶实战</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在以前，所有的东西放在一起打包，放到服务器上也就不管了，但是到了分布式场景下，可能一个请求要经过十几个服务的周转，如果不进行链路的追踪，这些对于我们来说都是透明的，那么哪个节点存在问题或者存在超时隐患我们都是很难知道的，因此服务追踪是我们必须要做的一样事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>9.Stream消息驱动</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/9.Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/9.Stream消息驱动/</id>
    <published>2019-02-21T08:26:42.981Z</published>
    <updated>2019-02-21T08:27:23.578Z</updated>
    
    <content type="html"><![CDATA[<p>对于MQ我们并不陌生，市面上也有形形色色的MQ，各有各的特点，原理上多多少少有一点区别，那么在进行MQ的更换的时候可能会出现代码的大片修改，这显然是很不好的，有没有一种方式来屏蔽掉这种MQ间的差异呢？这就引出了今天讨论的主角：Spring Cloud Stream.</p><a id="more"></a><h2>一、为什么需要SpringCloud Stream消息驱动呢？</h2><p>比方说我们用到了<code>RabbitMQ</code>和<code>Kafka</code>，由于这两个消息中间件的架构上的不同，像<code>RabbitMQ</code>有<code>exchange</code>，<code>kafka</code>有<code>Topic</code>，<code>partitions</code>分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，</p><p>后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候<code>springcloud Stream</code>给我们提供了一种解耦合的方式。</p><p><img src="http://bloghello.oursnail.cn/SpringCloudStream%E6%9E%B6%E6%9E%84.png" alt="image"></p><p><code>Spring Cloud Stream</code>由一个中间件中立的核组成。应用通过<code>Spring Cloud Stream</code>插入的<code>input</code>(相当于消费者<code>consumer</code>，它是从队列中接收消息的)和<code>output</code>(相当于生产者<code>producer</code>，它是从队列中发送消息的。)通道与外界交流。</p><p>通道通过指定中间件的<code>Binder</code>实现与外部代理连接。业务开发者不再关注具体消息中间件，只需关注<code>Binder</code>对应用程序提供的抽象概念来使用消息中间件实现业务即可。</p><p>Binder:</p><p>通过定义绑定器作为中间层，实现了应用程序与消息中间件(<code>Middleware</code>)细节之间的隔离。通过向应用程序暴露统一的<code>Channel</code>通道，使得应用程序不需要再考虑各种不同的消息中间件的实现。当需要升级消息中间件，或者是更换其他消息中间件产品时，我们需要做的就是更换对应的<code>Binder</code>绑定器而不需要修改任何应用逻辑 。甚至可以任意的改变中间件的类型而不需要修改一行代码。目前只提供了<code>RabbitMQ</code>和<code>Kafka</code>的<code>Binder</code>实现。</p><p><code>Springcloud Stream</code>还有个好处就是像<code>Kafka</code>一样引入了一点分区的概念，像<code>RabbitMQ</code>不支持分区的队列，你用了<code>SpringCloud Stream</code>技术，它就会帮<code>RabbitMQ</code>引入了分区的特性，<code>SpringCloud Stream</code>就是天然支持分区的，我们用起来还是很方便的。</p><h2>二、简单的演示</h2><p>首先我们要新建三个项目，分别是<code>spring-cloud-stream</code>，<code>spring-cloud-stream1</code>，<code>spring-cloud-stream2</code>，其中<code>spring-cloud-stream</code>作为生产者进行发消息模块，<code>spring-cloud-stream-1</code>，<code>spring-cloud-stream-2</code>作为消息接收模块。</p><h3>第一步：</h3><p>对于这三个项目，都要引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.swg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-stream-producer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Elmhurst.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>第二步：</h3><p>对于<code>spring-cloud-stream</code>，是信息的生产方，配置文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: producer</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          #Kafka的消息中间件服务器</span><br><span class="line">          brockers: localhost:9092</span><br><span class="line">          #Zookeeper的节点，如果集群，后面加,号分隔</span><br><span class="line">          zk-nodes: localhost:2181</span><br><span class="line">          #如果设置为false,就不会自动创建Topic 有可能你Topic还没创建就直接调用了。</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">        #这里用stream给我们提供的默认output，后面会讲到自定义output</span><br><span class="line">        output:</span><br><span class="line">          #消息发往的目的地</span><br><span class="line">          destination: stream-demo</span><br><span class="line">          #消息发送的格式，接收端不用指定格式，但是发送端要</span><br><span class="line">          content-type: text/plain</span><br></pre></td></tr></table></figure><p>这里指定了kafka和zk的地址，最终的是，指定了我们要用的<code>output</code>，就是消息的生产通道，这里用的是自定义。下面指定了消息的目的地。</p><p>发送的程序<code>SendService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(Source.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        source.output().send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是接口一个字符串，然后把消息通过<code>output</code>发送到指定的目的地。<code>@EnableBinding(Source.class)</code>这个注解给我们绑定消息通道的，Source是Stream给我们提供的，可以点进去看源码，可以看到output和input,这和配置文件中的output，input对应的。</p><p>最后就是浏览器传入值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendService sendService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/send/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送了。。。"</span>+msg);</span><br><span class="line">        sendService.sendMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>第三步：</h3><p>消息的发送端已经搞好了，下面配置消息的消费端。配置文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer_1</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brockers: localhost:9092</span><br><span class="line">          zk-nodes: localhost:2181</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">        #input是接收，注意这里不能再像前面一样写output了</span><br><span class="line">        input:</span><br><span class="line">          destination: stream-demo</span><br></pre></td></tr></table></figure><p>接收的service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息接受端，stream给我们提供了Sink,Sink源码里面是绑定input的，要跟我们配置文件的imput关联的。</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecieveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)<span class="comment">//其实就是@StreamListener(“input”)，监听这个通道有没有消息过来，有就消费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieve</span><span class="params">(Object payload)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====="</span>+payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>第四步</h3><p>启动kafka和zk，上一章已经讲过了如何启动。打开浏览器输入对应的url进行测试，看两个消费端是否都可以打印出来传入的信息。</p><h3>总结</h3><p>其实上面的一个流程就可以概括为下面一张图：</p><p><img src="http://bloghello.oursnail.cn/stream%E6%A8%A1%E5%9E%8B.png" alt="image"></p><p>一个是产品的生产者，一个是商店消费者，生产者将产品通过通道，这里就是<code>Source</code>中默认的<code>output</code>，将产品发送到<code>binder</code>中，给他一个<code>topic</code>，告诉消费者这个消息的名字(位置，这里是<code>stream-demo</code>)。消费者通过监听<code>Sink</code>中的默认的<code>input</code>通道来看看有没有自己感兴趣的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    String OUTPUT = <span class="string">"output"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(<span class="string">"output"</span>)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sink</span> </span>&#123;</span><br><span class="line">    String INPUT = <span class="string">"input"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"input"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，最基本的一个消息的生产消费流程就走完了。</p><h2>三、自定义消息通道</h2><p>到现在为止，我们进行了一个简单的消息发送和接收，用的是<code>Stream</code>给我们提供的默认<code>Source</code>，<code>Sink</code>，接下来我们要自己进行自定义，这种方式在工作中还是用的比较多的，因为我们要往不同的消息通道发消息，</p><p>必然不能全都叫input,output的，那样的话就乱套了，因此首先自定义一个接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by cong on 2018/5/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MySource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(<span class="string">"myOutput"</span>)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">myOutput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是将默认的<code>Source</code>里的<code>output</code>改个名字而已，十分简单，在配置文件中指定通道的地方就要响应地修改为我们自己定义的通道就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7888</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: producer</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">#Kafka的消息中间件服务器</span><br><span class="line">          brockers: localhost:9092</span><br><span class="line">#Zookeeper的节点，如果集群，后面加,号分隔</span><br><span class="line">          zk-nodes: localhost:2181</span><br><span class="line">#如果设置为false,就不会自动创建Topic 有可能你Topic还没创建就直接调用了。</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">#自定义output</span><br><span class="line">        myOutput:</span><br><span class="line">#消息发往的目的地</span><br><span class="line">            destination: stream-demo</span><br><span class="line">#消息发送的格式，接收端不用指定格式，但是发送端要</span><br><span class="line">            content-type: text/plain</span><br></pre></td></tr></table></figure><p>下面发送消息的时候，就是注入我们自己定义的<code>source</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(MySource.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MySource source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        source.myOutput().send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者同样如此，就是改一下<code>Sink</code>的名字即可。</p><h2>四、消息中转站</h2><p>这是一个比较有意思的功能，就是消息经过中间一个加工一下，再传给下一个消费者。就是一个链式的调用。</p><p>那么，我们这里改造一下<code>spring-cloud-stream-consumer-1</code>为<code>spring-cloud-stream-trans</code>:</p><p>第一步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7889</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer_1</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brockers: localhost:9092</span><br><span class="line">          zk-nodes: localhost:2181</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">#input是接收，注意这里不能再像前面一样写output了</span><br><span class="line">          input:</span><br><span class="line">            destination: stream-demo</span><br><span class="line"> #进行消息中转处理后，在进行转发出去           </span><br><span class="line">          output:</span><br><span class="line">            destination: stream-demo-trans</span><br></pre></td></tr></table></figure><p>第二步：接着在新建一个消息中转类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hjc.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Processor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.annotation.ServiceActivator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransFormService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = Processor.INPUT,outputChannel = Processor.OUTPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object payload)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息中转站："</span>+payload);</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得要将拷贝过来的工程中的<code>SendService</code>里面的注解全部删除掉，要不然程序启动会报错。</p><p>接着要修改消息中转站发送消息出去的接收端springcloud-stream2的配置,<code>input</code>的值改为<code>stream-demo-trans</code>即可。</p><h2>五、消息分组</h2><p>我们都是一端发消息，两个消息接受者都接收到了，但是有时候有些业务场景我只想让其中一个消息接收者接收到消息，那么该怎么办呢？</p><p><code>Group</code>，如果使用过 <code>Kafka</code> 的读者并不会陌生。<code>Spring Cloud Stream</code> 的这个分组概念的意思基本和 <code>Kafka</code> 一致。微服务中动态的缩放同一个应用的数量以此来达到更高的处理能力是非常必须的。对于这种情况，同一个事件防止被重复消费，</p><p>只要把这些应用放置于同一个 <code>group</code> 中，就能够保证消息只会被其中一个应用消费一次。不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费。</p><p>修改消费段的配置文件，将他们都配置到同一个组下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7889</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer_1</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brockers: localhost:9092</span><br><span class="line">          zk-nodes: localhost:2181</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">          #input是接收，注意这里不能再像前面一样写output了</span><br><span class="line">          input:</span><br><span class="line">            destination: stream-demo</span><br><span class="line">            #分组的组名</span><br><span class="line">            group: group</span><br></pre></td></tr></table></figure><p>可以看到<code>springcloud-stream1</code>和<code>springcloud-stream2</code>是属于同一组的。<code>springcloud-stream</code>模块的发的消息只能被<code>springcloud-stream1</code>或<code>springcloud-stream2</code>其中一个接收到，这样避免了重复消费。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于MQ我们并不陌生，市面上也有形形色色的MQ，各有各的特点，原理上多多少少有一点区别，那么在进行MQ的更换的时候可能会出现代码的大片修改，这显然是很不好的，有没有一种方式来屏蔽掉这种MQ间的差异呢？这就引出了今天讨论的主角：Spring Cloud Stream.&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>8.Bus消息总线</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/8.Bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/8.Bus消息总线/</id>
    <published>2019-02-21T08:10:31.419Z</published>
    <updated>2019-02-21T08:33:10.534Z</updated>
    
    <content type="html"><![CDATA[<p>为了实现依次redresh自动刷新所有服务的配置文件，所以需要引入消息总线进行消息的通知，本文主要采用kafka作为消息队列来实现，当然了，rabbitMQ也是比较简单的。</p><a id="more"></a><h2>一、前言</h2><p>注：本篇文章是基于<code>spring boot 2.x</code>，主要参考 <a href="https://www.cnblogs.com/huangjuncong/p/9077099.html" target="_blank" rel="noopener">SpringCloud实战8-Bus消息总线</a> 这篇文章而写。但是他的版本比较低，有一两个坑需要注意。</p><p>上一篇我们讲到，我们如果要去更新所有微服务的配置，在不重启的情况下去更新配置，只能依靠<code>spring cloud config</code>了，但是，是我们要一个服务一个服务的发送post请求，我们能受的了吗？</p><p>虽然这比之前的没配置中心好多了，那但是我们如何继续避免挨个挨个的向服务发送Post请求来告知服务你的配置信息改变了，需要及时修改内存中的配置信息呢？</p><p>这时候我们就不要忘记消息队列的发布订阅模型。让所有为服务来订阅这个事件，当这个事件发生改变了，就可以通知所有微服务去更新它们的内存中的配置信息。这时Bus消息总线就能解决，你只需要在<code>springcloud Config Server</code>端发出<code>refresh</code>，就可以触发所有微服务更新了。</p><p>如下架构图所示：</p><p><img src="http://bloghello.oursnail.cn/Spring-cloud-1-1.jpg" alt="image"></p><p>根据此图我们可以看出利用Spring Cloud Bus做配置更新的步骤:</p><ul><li>1、提交代码触发post给客户端A发送bus/refresh</li><li>2、客户端A接收到请求从Server端更新配置并且发送给Spring Cloud Bus</li><li>3、Spring Cloud bus接到消息并通知给其它客户端</li><li>4、其它客户端接收到通知，请求Server端获取最新配置</li><li>5、全部客户端均获取到最新的配置</li></ul><p><code>Spring Cloud Bus</code>除了支持<code>RabbitMQ</code>的自动化配置之外，还支持现在被广泛应用的<code>Kafka</code>。在本文中，我们将搭建一个Kafka的本地环境，并通过它来尝试使用<code>Spring Cloud Bus</code>对<code>Kafka</code>的支持，实现消息总线的功能。</p><h2>二、Kafka</h2><p><code>Kafka</code>使用<code>Scala</code>实现，被用作LinkedIn的活动流和运营数据处理的管道，现在也被诸多互联网企业广泛地用作为数据流管道和消息系统。</p><p>Kafak架构图如下:</p><p><img src="http://bloghello.oursnail.cn/kafka%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="image"></p><p><code>Kafka</code>是基于消息发布/订阅模式实现的消息系统，其主要设计目标如下：</p><ol><li><strong>消息持久化</strong>：以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</li><li><strong>高吞吐</strong>：在廉价的商用机器上也能支持单机每秒100K条以上的吞吐量</li><li><strong>分布式</strong>：支持消息分区以及分布式消费，并保证分区内的消息顺序</li><li><strong>跨平台</strong>：支持不同技术平台的客户端（如：Java、PHP、Python等）</li><li><strong>实时性</strong>：支持实时数据处理和离线数据处理</li><li><strong>伸缩性</strong>：支持水平扩展</li></ol><p><code>Kafka</code>中涉及的一些基本概念：</p><ol><li><strong>Broker</strong>：Kafka集群包含一个或多个服务器，这些服务器被称为Broker。</li><li><strong>Topic</strong>：逻辑上同Rabbit的Queue队列相似，每条发布到Kafka集群的消息都必须有一个Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个Broker上，但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li><li><strong>Partition</strong>：Partition是物理概念上的分区，为了提供系统吞吐率，在物理上每个Topic会分成一个或多个Partition，每个Partition对应一个文件夹（存储对应分区的消息内容和索引文件）。</li><li><strong>Producer</strong>：消息生产者，负责生产消息并发送到Kafka Broker。</li><li><strong>Consumer</strong>：消息消费者，向Kafka Broker读取消息并处理的客户端。</li><li><strong>Consumer Group</strong>：每个Consumer属于一个特定的组（可为每个Consumer指定属于一个组，若不指定则属于默认组），组可以用来实现一条消息被组内多个成员消费等功能。</li></ol><p>可以从<code>kafka</code>的架构图看到<code>Kafka</code>是需要<code>Zookeeper</code>支持的，你需要在你的<code>Kafka</code>配置里面指定<code>Zookeeper</code>在哪里，它是通过<code>Zookeeper</code>做一些可靠性的保证，做<code>broker</code>的主从，我们还要知道<code>Kafka</code>的消息是以<code>topic</code>形式作为组织的，<code>Producers</code>发送<code>topic</code>形式的消息，<br><code>Consumer</code>是按照组来分的，所以，一组<code>Consumers</code>都会接收同样的<code>topic</code>形式的消息。在服务端，它还做了一些分片，那么一个<code>Topic</code>可能分布在不同的分片上面，方便我们拓展部署多个机器，<code>Kafka</code>是天生分布式的。</p><p>首先是要下载对应的kafka：<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz</a></p><p>解压之后进去/bin/windows/目录下：</p><p>首先启动<code>zookeeper</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\zookeeper-server-start.bat D:\kafka_2.11-2.1.0\config\zookeeper.properties</span><br></pre></td></tr></table></figure><p>如果出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令语法不正确。</span><br><span class="line">错误: 找不到或无法加载主类 Files\Java\jdk1.8.0_121\lib\dt.jar;C:\Program</span><br><span class="line">PS D:\kafka_2.11-2.1.0\bin\windows&gt; .\zookeeper-server-start.bat D:\kafka_2.11-2.1.0\config/zookeeper.properties</span><br></pre></td></tr></table></figure><p>方法是：</p><blockquote><p>首先我们进到下载好的Kafka目录中kafka_2.11-1.1.0\bin\windows 下编辑kafka-run-class.bat如下：</p><p>找到这条配置 如下：</p><p>set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp %CLASSPATH% %KAFKA_OPTS% %*</p><p>可以看到%CLASSPATH%没有双引号，</p><p>因此用双引号括起来，不然启动不起来的，报你JDK没安装好，修改后如下：</p><p>set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp “%CLASSPATH%” %KAFKA_OPTS% %*</p></blockquote><p>后面启动<code>kafka</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\kafka-server-start.bat D:\kafka_2.11-2.1.0\config\server.properties</span><br></pre></td></tr></table></figure><p>这两者配置文件直接默认即可。启动成功之后，就放那吧！</p><h2>消息总线</h2><p>在上一章的<code>spring-cloud-config-server</code>以及<code>client</code>继续集成。<code>spring boot</code>版本是<code>2.0.3.RELEASE</code>.</p><p>第一步：<code>spring cloud config</code>服务端和客户端(搞两个客户端)都要引入<code>kafka</code>依赖，以<code>config server</code>端为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--config server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--kafka MQ--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：配置文件(服务端)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8085</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/sunweiguo/spring-cloud-config-center.git</span><br><span class="line">          username: sunweiguo</span><br><span class="line">          password: xxxxxxxxx</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: bus-refresh</span><br></pre></td></tr></table></figure><p>注意，在1.x版本中一般配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#是否需要权限拉取，默认是true,如果不false就不允许你去拉取配置中心Server更新的内容</span><br><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: false</span><br></pre></td></tr></table></figure><p>而在2.x版本中已经把这个改掉了。所以要注意。不配置的话会报错405.可以尝试去掉，用postman测试一把。</p><p>第三步：添加注解</p><p>在服务端和客户端的启动函数上都增加一条注解<code>@RefreshScope</code></p><p>ok,至此，集成完毕。消息总线的功能就有了。</p><p>启动全部工程。修改git上的内容。然后发现客户端都没更新。下面启动postman来对<code>config server</code>发送一条post请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8085/actuator/bus-refresh</span><br></pre></td></tr></table></figure><p>再刷新浏览器，就会发现所有的客户端都自动更新了。我们也可以指定要刷新的客户端具体实例或者通配符符合的客户端。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了实现依次redresh自动刷新所有服务的配置文件，所以需要引入消息总线进行消息的通知，本文主要采用kafka作为消息队列来实现，当然了，rabbitMQ也是比较简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>7.Config分布式配置管理</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/7.Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/7.Config分布式配置管理/</id>
    <published>2019-02-21T07:34:17.162Z</published>
    <updated>2019-02-21T07:34:58.033Z</updated>
    
    <content type="html"><![CDATA[<p>关于集中的配置管理已经在 <a href="http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/10.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E9%9B%86%E4%B8%AD%E5%8C%96%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">10.天气预报系统-集中化配置</a> 中详细介绍了。本文为了方便引出问题，所以重新介绍一下它的基本使用。</p><a id="more"></a><h2>服务端</h2><p>第一步：新建一个工程，引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8085</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/sunweiguo/spring-cloud-config-center.git</span><br><span class="line">          username: sunweiguo</span><br><span class="line">          password: *********</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br></pre></td></tr></table></figure><p>第四步：在这个仓库里新建两个文件<code>cloud-config-dev.properties</code>和<code>cloud-config-test.properties</code>，里面有一些简单内容：<code>name=sunweiguo-dev</code>和<code>name=sunweiguo-test</code></p><p>第四步：启动配置的服务端</p><p>浏览器输入：<code>http://localhost:8085/cloud-config-dev.properties</code>，如果可以看到里面配置的内容，那么就配置成功了。</p><h2>客户端</h2><p>第一步：新建一个sb项目，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--健康监控包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：添加注解使其注册到eureka上，不再赘述</p><p>第三步：配置文件</p><p>注意，这里必须是<code>bootstrap.yml</code>，他的优先级别比<code>application.yml</code>要高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8086</span><br><span class="line"># 这个cloud-config要与git上的文件名一致，文件的命名规则在开头的链接中已经详细介绍了</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-config</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      profile: dev </span><br><span class="line">      discovery:</span><br><span class="line">        service-id: config-server # 致命服务端</span><br><span class="line">        enabled: true</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;  # 这是一个2.x的坑，需要配置这个暴露所有端点，否则refresh报404</span><br></pre></td></tr></table></figure><p>第四步：写一个简单的controller来显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello."</span>+<span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五步：在浏览器中输入对应的url看是否显示正确，下面就是在git上修改一下对应的文件内容。我们会发现，服务端上面已经更新了，但是客户端没有更新。那么就需要我们手动去触发他更新</p><p>第六步：打开<code>postman</code>工具。输入Url：<code>localhost:8086/actuator/refresh</code></p><p>如果返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &quot;config.client.version&quot;,</span><br><span class="line">    &quot;name&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么表示更新成功。此时再刷新之前的页面，会发现客户端的内容已经同步过来了。</p><h2>总结</h2><p>我们实现了将配置文件放在git上集中管理，但是在修改中心仓库中的配置后，客户端是没有更新的，后来我们用更新包手动去更新，虽然不用重启服务，但是还是比较麻烦。那么，如何避免，对每个服务发送post请求去更新呢？</p><p>其实很简单，就是利用发布订阅的原理，利用消息来通知从而触发更新，是比较好的方式。下一节介绍消息总线。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于集中的配置管理已经在 &lt;a href=&quot;http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/10.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E9%9B%86%E4%B8%AD%E5%8C%96%E9%85%8D%E7%BD%AE/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;10.天气预报系统-集中化配置&lt;/a&gt; 中详细介绍了。本文为了方便引出问题，所以重新介绍一下它的基本使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>6.Zuul网关服务</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/6.Zuul%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/6.Zuul网关服务/</id>
    <published>2019-02-21T07:17:20.055Z</published>
    <updated>2019-02-21T07:20:36.016Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/9.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-API%E7%BD%91%E5%85%B3/" target="_blank" rel="noopener">9.天气预报系统-API网关</a> 中已经对API网关进行了详细的介绍。基础的概念就不再赘述了。下面着重看一下zuul中如何实现过滤器。</p><a id="more"></a><h2>基本使用</h2><p>第一步:创建一个springboot工程，引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--zuul--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：在启动函数上增加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: api-gateway</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    service-hi:</span><br><span class="line">      path: /service-hi/**/</span><br><span class="line">      serviceId: service-hi</span><br><span class="line">server:</span><br><span class="line">  port: 8084</span><br></pre></td></tr></table></figure><p>主要就是配置路由规则，以<code>service-hi</code>为前缀的都去<code>serivce-hi</code>为名字的服务下找对应的映射。</p><p>这样，就完成了基本的整合。启动其他的项目：<code>spring-cloud-eureka-server-1</code>,<code>spring-cloud-eureka-server-2</code>,<code>spring-cloud-eureka-client-1</code>,<code>spring-cloud-eureka-client-1</code>.</p><p>在我的<code>spring-cloud-eureka-client-1</code>有一个路径叫<code>localhost:8080/test</code>返回一个字符串。那么此时用网关来访问的话应该是：<code>localhost:8084/service-hi/test</code>.</p><h2>过滤器</h2><p>新建一个类，假设我们要检验token，如果token为空，就返回未授权。</p><p>TokenFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//pre 在路由表寻找路由时生效</span></span><br><span class="line">    <span class="comment">//routing 找到路由开始进行请求转发时生效</span></span><br><span class="line">    <span class="comment">//error 出错时生效</span></span><br><span class="line">    <span class="comment">//post routing或者error之后最后阶段生效</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//越小，优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true表示过滤器生效</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span>)&#123;</span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            context.setResponseBody(<span class="string">"unsutherized"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要将其注册到spring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TokenFilter <span class="title">tokenFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问<code>localhost:8084/service-hi/test</code>时，显示<code>unsutherized</code>，当访问<code>localhost:8084/service-hi/test?token=123</code>时访问通过。</p><p>如果在<code>run()</code>中出现异常，但是这个异常不能抛出来显示在页面上。那么如何在页面上如何显示呢？在<code>catch</code>的代码中这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.set(error.status_code,<span class="number">401</span>);</span><br><span class="line">context.set(<span class="string">"error.exception"</span>,e);</span><br><span class="line">context.set(<span class="string">"error.message"</span>,<span class="string">"提示信息"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/9.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-API%E7%BD%91%E5%85%B3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;9.天气预报系统-API网关&lt;/a&gt; 中已经对API网关进行了详细的介绍。基础的概念就不再赘述了。下面着重看一下zuul中如何实现过滤器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>4.Hystrix请求合并</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/4.Hystrix%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/4.Hystrix请求合并/</id>
    <published>2019-02-21T07:07:39.993Z</published>
    <updated>2019-02-21T07:30:09.947Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构中，我们将一个项目拆分成很多个独立的模块，这些独立的模块通过远程调用来互相配合工作，但是，在高并发情况下，通信次数的增加会导致总的通信时间增加，同时，线程池的资源也是有限的，高并发环境会导致有大量的线程处于等待状态，进而导致响应延迟，为了解决这些问题，我们需要来了解Hystrix的请求合并。</p><a id="more"></a><h2>一、请求合并</h2><p>hystrix中的请求合并，就是利用一个合并处理器，将对同一个服务发起的连续请求合并成一个请求进行处理(这些连续请求的时间窗默认为10ms)，在这个过程中涉及到的一个核心类就是<code>HystrixCollapser</code>。</p><p>请求不合并之前：</p><p>下图展示了在未使用<code>HystrixCollapser</code>请求合并器之前的线程使用情况。可以看到当服务消费者同时对<code>USER-SERVICE</code>的<code>/users/{id}</code>接口发起了五个请求时，会向该依赖服务的独立线程池中申请五个线程来完成各自的请求操作。</p><p><img src="http://bloghello.oursnail.cn/hystrix%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B61.png" alt="image"></p><p>而在使用了<code>HystrixCollapser</code>请求合并器之后，相同情况下的线程占用如下图所示。由于同一时间发生的五个请求处于请求合并器的一个时间窗内，这些发向<code>/users/{id}</code>接口的请求被请求合并器拦截下来，并在合并器中进行组合，然后将这些请求合并成一个请求发向USER-SERVICE的批量接口<code>/users?ids={ids}</code>，在获取到批量请求结果之后，通过请求合并器再将批量结果拆分并分配给每个被合并的请求。从图中我们可以看到以来，通过使用请求合并器有效地减少了对线程池中资源的占用。所以在资源有效并且在短时间内会产生高并发请求的时候，为避免连接不够用而引起的延迟可以考虑使用请求合并器的方式来处理和优化。</p><p><img src="http://bloghello.oursnail.cn/hystrix%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B62.png" alt="image"></p><p>本着简单的目的，所以非注解的方式我就没做。具体参考文章：<a href="https://blog.csdn.net/u012702547/article/details/78213270" target="_blank" rel="noopener">Spring Cloud中Hystrix的请求合并</a></p><h3>1.1 服务提供者</h3><p>首先是需要服务提供者提供两个接口，一个是返回集合，模拟在同一时间多个线程同时来请求书籍信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getbooks"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">books</span><span class="params">(String ids)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ids&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> + ids);</span><br><span class="line">    ArrayList&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    books.add(<span class="keyword">new</span> Book(<span class="string">"《李自成》"</span>, <span class="number">55</span>, <span class="string">"姚雪垠"</span>, <span class="string">"人民文学出版社"</span>));</span><br><span class="line">    books.add(<span class="keyword">new</span> Book(<span class="string">"中国文学简史"</span>, <span class="number">33</span>, <span class="string">"林庚"</span>, <span class="string">"清华大学出版社"</span>));</span><br><span class="line">    books.add(<span class="keyword">new</span> Book(<span class="string">"文学改良刍议"</span>, <span class="number">33</span>, <span class="string">"胡适"</span>, <span class="string">"无"</span>));</span><br><span class="line">    books.add(<span class="keyword">new</span> Book(<span class="string">"ids"</span>, <span class="number">22</span>, <span class="string">"helloworld"</span>, <span class="string">"haha"</span>));</span><br><span class="line">    <span class="keyword">return</span> books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>1.2 服务消费者</h3><p>首先在BookService中添加两个方法用来调用服务提供者提供的接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCollapser</span>(batchMethod = <span class="string">"test11"</span>,collapserProperties = &#123;<span class="meta">@HystrixProperty</span>(name =<span class="string">"timerDelayInMilliseconds"</span>,value = <span class="string">"100"</span>)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;Book&gt; <span class="title">test10</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">test11</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test9---------"</span>+ids+<span class="string">"Thread.currentThread().getName():"</span> + Thread.currentThread().getName());</span><br><span class="line">    Book[] books = restTemplate.getForObject(<span class="string">"http://SERVICE-HI/getbooks?ids=&#123;1&#125;"</span>, Book[].class, StringUtils.join(ids, <span class="string">","</span>));</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>test10</code>方法上添加<code>@HystrixCollapser</code>注解实现请求合并，用<code>batchMethod</code>属性指明请求合并后的处理方法，<code>collapserProperties</code>属性指定其他属性:<strong>为请求合并器设置了时间延迟属性，合并器会在该时间窗内收集获取单个Book的请求并在时间窗结束时进行合并组装成单个批量请求</strong>。</p><h3>1.3 调用消费服务</h3><p>下面就是直接调用<code>test10</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class="line">    Future&lt;Book&gt; f1 = bookService.test10(<span class="number">1l</span>);</span><br><span class="line">    Future&lt;Book&gt; f2 = bookService.test10(<span class="number">2l</span>);</span><br><span class="line">    Future&lt;Book&gt; f3 = bookService.test10(<span class="number">3l</span>);</span><br><span class="line">    Book b1 = f1.get();</span><br><span class="line">    Book b2 = f2.get();</span><br><span class="line">    Book b3 = f3.get();</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    Future&lt;Book&gt; f4 = bookService.test10(<span class="number">4l</span>);</span><br><span class="line">    Book b4 = f4.get();</span><br><span class="line">    System.out.println(<span class="string">"b1&gt;&gt;&gt;"</span>+b1);</span><br><span class="line">    System.out.println(<span class="string">"b2&gt;&gt;&gt;"</span>+b2);</span><br><span class="line">    System.out.println(<span class="string">"b3&gt;&gt;&gt;"</span>+b3);</span><br><span class="line">    System.out.println(<span class="string">"b4&gt;&gt;&gt;"</span>+b4);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>1.4 运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test9---------[3, 1, 2]Thread.currentThread().getName():hystrix-BookService-6</span><br><span class="line">test9---------[4]Thread.currentThread().getName():hystrix-BookService-7</span><br><span class="line">b1&gt;&gt;&gt;com.swg.springcloudeureka.Book@5a901d44</span><br><span class="line">b2&gt;&gt;&gt;com.swg.springcloudeureka.Book@3305e39</span><br><span class="line">b3&gt;&gt;&gt;com.swg.springcloudeureka.Book@2282567c</span><br><span class="line">b4&gt;&gt;&gt;com.swg.springcloudeureka.Book@52e7b4ea</span><br></pre></td></tr></table></figure><p>前三个请求会进行合并，即1，2，3三个id被合并到一个list中传给<code>test11</code>，第四个请求会单独执行.</p><h2>二、总结</h2><p>请求合并的优点小伙伴们已经看到了，多个请求被合并为一个请求进行一次性处理，可以有效节省网络带宽和线程池资源，但是，有优点必然也有缺点，设置请求合并之后，本来一个请求可能5ms就搞定了，但是现在必须再等10ms看看还有没有其他的请求一起的，这样一个请求的耗时就从5ms增加到15ms了，不过，如果我们要发起的命令本身就是一个高延迟的命令，那么这个时候就可以使用请求合并了，因为这个时候时间窗的时间消耗就显得微不足道了，另外高并发也是请求合并的一个非常重要的场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构中，我们将一个项目拆分成很多个独立的模块，这些独立的模块通过远程调用来互相配合工作，但是，在高并发情况下，通信次数的增加会导致总的通信时间增加，同时，线程池的资源也是有限的，高并发环境会导致有大量的线程处于等待状态，进而导致响应延迟，为了解决这些问题，我们需要来了解Hystrix的请求合并。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3.Hystrix请求熔断服务降级</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/3.Hystrix%E8%AF%B7%E6%B1%82%E7%86%94%E6%96%AD%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/3.Hystrix请求熔断服务降级/</id>
    <published>2019-02-21T06:58:40.400Z</published>
    <updated>2019-02-21T07:01:12.362Z</updated>
    
    <content type="html"><![CDATA[<p>基本的介绍和基本的演示都已经在<a href="http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/11.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">11.天气预报系统-熔断机制</a>中说明和演示了。下面来说点不一样的东西吧！</p><a id="more"></a><h2>一、前言</h2><p>比如拿我上一章中的代码，我们将<code>spring-eureka-ribbon</code>升级为<code>spring-cloud-ribbon-hystrix</code>:</p><p>无非是引入依赖，主函数添加一个允许熔断的声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloServie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"helloFallBack"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://SERVICE-HI/hello?name="</span>+name,String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloFallBack</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;font color='red'&gt;error&lt;/font&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们的fallBack方法的参数必须与被注解的方法的参数一致，否则会报错。</p><p>启动项目：<code>spring-cloud-eureka-server-1</code>,<code>spring-cloud-eureka-server-2</code>,<code>spring-cloud-eureka-client-1</code>,<code>spring-cloud-eureka-client-2</code>,<code>spring-cloud-ribbon-hystrix</code>.</p><p>然后关闭一个client，看是否触发服务降级，显示红色的error.</p><h2>二、用法进阶-实现异步消费</h2><p>我们不用<code>@HystrixCommand</code>注解来实现上面个功能。代码见<code>spring-cloud-eureka-ribbon-hystrix-02</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloServiceCommand command = <span class="keyword">new</span> HelloServiceCommand(<span class="string">"hello"</span>,restTemplate);</span><br><span class="line">        String res = command.execute();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中核心的<code>HelloServiceCommand</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServiceCommand</span><span class="params">(String commandGroupKey,RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(commandGroupKey));</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://SERVICE-HI/hello?name='swg'"</span>,String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;font color='red'&gt;error&lt;/font&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以用代码实现上面的注解的功能。</p><p>我们可以发现，<code>run()</code>方法里调用其他的服务（多个），如果是串行执行，那么时间是所有服务执行时间之和。那么，有没有办法使他并行执行呢？达到一种NIO的效果。</p><p>NIO的两个实现方式：<code>Future</code>将来式和<code>Callable</code>回调式，这里使用将来式。</p><p>其实核心就是<code>Future&lt;String&gt; future = command.queue();</code>，让这个方法自己另开一个线程去默默执行，本线程还继续往下，等我想到结果的时候，再去调用<code>String res = future.get();</code>阻塞地获取结果，如果结果已经准备好了，那么就直接拿到。</p><p>在代码<code>spring-cloud-eureka-ribbon-hystrix-03</code>中的<code>controller</code>中进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    HelloServiceCommand command = <span class="keyword">new</span> HelloServiceCommand(<span class="string">"hello"</span>,restTemplate);</span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">    Future&lt;String&gt; future = command.queue();</span><br><span class="line">    System.out.println(<span class="string">"start"</span>);</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - now);</span><br><span class="line">    String res = future.get();</span><br><span class="line">    <span class="keyword">long</span> last = System.currentTimeMillis()-end;</span><br><span class="line">    System.out.println(last);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的目的就是看调用<code>command.queue()</code>之后会不会阻塞本线程的执行，我们让被<code>restTemplate</code>调用的方法睡眠一会：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name) <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"方法开始执行。。。"</span>);</span><br><span class="line">    Thread.sleep(<span class="number">800</span>);</span><br><span class="line">    System.out.println(<span class="string">"方法执行结束。。。"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hi "</span>+ name +<span class="string">",you are from "</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">1</span><br><span class="line">817</span><br></pre></td></tr></table></figure><p>就是说将执行其他服务这个操作异步到了另外一个线程中执行，本线程立即执行下面的逻辑。这样，提高了效率。</p><p>好了，用非注解的方式来实现了一下NIO的实现方式，那么肯定还是使用注解比较方便，那么基于注解的话，我们如何实现<code>future</code>的方式来执行呢？代码<code>spring-cloud-eureka-ribbon-hystrix-04</code></p><p>我们只需要将原来的<code>HelloServiceImpl</code>中的<code>hiService</code>方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.command.AsyncResult;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"helloFallBack"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hiService</span><span class="params">(String name)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    Future&lt;String&gt; future = <span class="keyword">new</span> AsyncResult&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://SERVICE-HI/hello?name="</span>+name,String.class).getBody();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> future.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以实现这种异步的方式调用了。</p><h2>三、观察者模式来实现</h2><p><img src="http://bloghello.oursnail.cn/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E6%9D%A5%E7%BB%93%E5%90%88hystrix.png" alt="image"></p><p>订阅者来监听自己感兴趣的事件，可以实现多个请求集中处理。</p><p>代码不想去搞了…</p><h2>四、总结</h2><p>这里主要是实现熔断的功能，一开始的<code>@HystrixCommand</code>+<code>fallback</code>，到后面自己用<code>HystrixCommand</code>代码实现的，再到后来用<code>Future</code>来实现异步消费，到最后介绍的用观察者模式来实现的方式<code>HystrixObserverCommand</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本的介绍和基本的演示都已经在&lt;a href=&quot;http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/11.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;11.天气预报系统-熔断机制&lt;/a&gt;中说明和演示了。下面来说点不一样的东西吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2.Ribbon客户端负载均衡</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/2.Ribbon%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/2.Ribbon客户端负载均衡/</id>
    <published>2019-02-21T05:58:39.663Z</published>
    <updated>2019-02-21T06:12:37.370Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。在这一篇文章首先讲解下基于ribbon+rest。</p><a id="more"></a><h2><font color="#337ab7">一、前言</font></h2><p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于 Netflix Ribbon 实现。 通过 Spring Cloud 的封装， 可以让我们轻松地将面向服务的 REST 模板请求自动转换成客户端负载均衡的服务调用。Spring Cloud Ribbon 虽然只是一个工具类框架，它不像服务注册中心、 配置中心、 API 网关那样需要独立部署， 但是它几乎存在于每一个Spring Cloud 构建的微服务和基础设施中。 因为微服务间的调用，API 网关的请求转发等内容实际上都是通过Ribbon 来实现的，包括后续我们将要介绍的 Feign, 它也是基于 Ribbon实现的工具。</p><h2><font color="#337ab7">二、Ribbon</font></h2><p>ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。</p><p>而之前用的nginx来实现负载均衡，他是一种服务端的负载均衡。</p><p>集成Ribbon也是比较简单的。新建一个项目<code>spring-cloud-eureka-ribbon</code></p><h3><font color="#337ab7">2.1 引入依赖：</font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><font color="#337ab7">2.2 然后就是注册一个专门负载均衡的一个客户端：</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在工程的启动类中,通过<code>@EnableDiscoveryClient</code>向服务中心注册；并且向程序的ioc注入一个<code>bean</code>: <code>restTemplate</code>;并通过<code>@LoadBalanced</code>注解表明这个<code>restRemplate</code>开启负载均衡的功能。</p><h3><font color="#337ab7">2.3 配置文件</font></h3><p>就是向注册中心集群注册而已。所以，上章中提到的Eureka两个服务端要启动起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-ribbon</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br></pre></td></tr></table></figure><h3><font color="#337ab7">2.4 测试的controller</font></h3><p>这个ribbon来接收请求，然后由他来决定转发到哪个服务。</p><p>所以这里要启动起来两个服务，让我来实际调用，我们就给他一个最简单的功能：打印出来端口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi "</span>+ name +<span class="string">",you are from "</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我的ribbon中写一个controller作为一个统一的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHelloServie helloServie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloServie.hiService(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的service就是用刚才定义的<code>restTemplate</code>来根据服务实例的名称去发起调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloServie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://SERVICE-HI/hello?name="</span>+name,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><font color="#337ab7">2.5 页面测试</font></h3><p>浏览器输入<code>http://localhost:8082/hello?name=sunweiguo</code>，不停地刷新，我们会看到轮流显示：</p><p><code>hi sunweiguo,you are from 8080</code>和<code>hi sunweiguo,you are from 8081</code>这两句，说明负载均衡已经生效，并且算法是轮询。当然，我们也可以用其他的负载均衡算法。这里就不做演示了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。在这一篇文章首先讲解下基于ribbon+rest。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1.Eureka服务治理</title>
    <link href="http://yoursite.com/2019/02/21/spring-cloud-modules/1.Eureka%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/21/spring-cloud-modules/1.Eureka服务治理/</id>
    <published>2019-02-21T05:22:47.428Z</published>
    <updated>2019-02-21T05:27:16.278Z</updated>
    
    <content type="html"><![CDATA[<p>在上一系列中，我们以最简单的业务场景急速入门了微服务，当然了，忽略了很多的细节，作为入门是可以的，但是真正使用的时候，还是需要了解很多额外的使用知识，所以本系列就孕育而生，即在上一系列的基础上继续强化，加深对spring cloud的使用理解。本章首先还是介绍eureka服务注册和发现组件，因为它是微服务的基石。</p><a id="more"></a><p>关于<code>Eureka</code>的基本使用，在另外一篇文章中详细介绍了：<a href="http://fourcolor.oursnail.cn/2019/02/21/weather-for-spring-cloud/7.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/" target="_blank" rel="noopener">7.天气预报系统-微服务的注册和发现</a>，不再赘述。本章学习如何搭建一个<code>eureka</code>高可用集群。</p><h2><font color="#337ab7">一、前言</font></h2><p>首先来看看<code>Eureka</code>高可用的架构。</p><p><img src="http://bloghello.oursnail.cn/eureka%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84.png" alt="image"></p><p>其中，续约是指：服务端维持一个有过期时间的服务列表，当客户端访问一次，我就刷新一下过期时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 90秒不来续约就剔除</span><br><span class="line">lease-expiration-duration-in-seconds: 90</span><br><span class="line"># 每隔30秒自动续约一次</span><br><span class="line">lease-renewal-interval-in-seconds: 30</span><br></pre></td></tr></table></figure><p>在客户端也可以设置一个定时任务，每隔多长时间去请求一下服务器，刷新一下服务列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认每隔30去请求一下服务器</span><br><span class="line">registry-fetch-interval-seconds: 30</span><br></pre></td></tr></table></figure><h2><font color="#337ab7">二、总结</font></h2><p><code>Eureka</code>包含两个组件：<code>Eureka Server</code> 和 <code>Eureka Client</code>，它们的作用如下：</p><ul><li><code>Eureka Client</code>是一个Java客户端，用于简化与<code>Eureka Server</code>的交互；</li><li><code>Eureka Server</code>提供服务发现的能力，各个微服务启动时，会通过<code>Eureka Client</code>向<code>Eureka Server</code>进行注册自己的信息（例如网络信息），<code>Eureka Server</code>会存储该服务的信息；</li><li>微服务启动后，会周期性地向<code>Eureka Server</code>发送心跳（默认周期为30秒）以续约自己的信息。如果<code>Eureka Server</code>在一定时间内没有接收到某个微服务节点的心跳，<code>Eureka Server</code>将会注销该微服务节点（默认90秒）；</li><li>每个<code>Eureka Server</code>同时也是<code>Eureka Client</code>，多个<code>Eureka Server</code>之间通过复制的方式完成服务注册表的同步；</li><li><code>Eureka Client</code>会缓存<code>Eureka Server</code>中的信息。即使所有的<code>Eureka Server</code>节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者。</li></ul><h2><font color="#337ab7">三、集群配置</font></h2><p>Server1端配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8762/eureka</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br></pre></td></tr></table></figure><p>Server2端配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8762</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br></pre></td></tr></table></figure><p>就是说两个<code>server</code>互相注册。形成一个<code>server</code>集群。</p><p>client1配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br></pre></td></tr></table></figure><p>client2也是如此。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka,http://localhost:8762/eureka</span><br></pre></td></tr></table></figure><p>分别启动之后，我们会看到效果：</p><p><img src="http://bloghello.oursnail.cn/eureka%E9%9B%86%E7%BE%A4%E6%95%88%E6%9E%9C.png" alt="image"></p><p>关于本系列的所有代码，将按照1-10的章节依次存放在：<a href="https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-modules" target="_blank" rel="noopener">https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-modules</a> 后面不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一系列中，我们以最简单的业务场景急速入门了微服务，当然了，忽略了很多的细节，作为入门是可以的，但是真正使用的时候，还是需要了解很多额外的使用知识，所以本系列就孕育而生，即在上一系列的基础上继续强化，加深对spring cloud的使用理解。本章首先还是介绍eureka服务注册和发现组件，因为它是微服务的基石。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud组件系统学习" scheme="http://yoursite.com/tags/springcloud%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>11.天气预报系统-熔断机制</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/11.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/11.天气预报系统-熔断机制/</id>
    <published>2019-02-21T03:28:01.816Z</published>
    <updated>2019-02-21T04:58:12.298Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第十一篇文章，某个服务一旦出现不可用，可能会牵连整个系统造成雪崩，或者有的时候资源需要聚集在核心业务上，非核心业务就可以适当地关闭，此时就是需要有一种机制来实现系统保护和服务降级的功能。本章介绍hystrix组件。</p><a id="more"></a><h2>一、定义</h2><p>保护系统的一种方式，当请求超出阈值，把真实的服务接口断开，可能只是返回给你一个默认值。这样，掐断了自己的服务，又可以给用户一个响应。</p><blockquote><p>对该服务的调用执行熔断，对于后续请求，不再继续调用该目标服务，而是直接返回，从而可以快速释放资源。</p></blockquote><p>熔断器好处：系统稳定、减少性能损耗、及时响应、阈值可配置</p><p>熔断这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。</p><p>这种牺牲局部，保全整体的措施就叫做熔断。</p><p>如果不采取熔断措施，我们的系统会怎样呢？我们来看一个栗子。当前系统中有A，B，C三个服务，服务A是上游，服务B是中游，服务C是下游。它们的调用链如下：</p><p><img src="http://bloghello.oursnail.cn/%E7%86%94%E6%96%AD%E8%A7%A3%E9%87%8A1.png" alt="image"></p><p>一旦下游服务C因某些原因变得不可用，积压了大量请求，服务B的请求线程也随之阻塞。线程资源逐渐耗尽，使得服务B也变得不可用。紧接着，服务A也变为不可用，整个调用链路被拖垮。</p><p><img src="http://bloghello.oursnail.cn/%E7%86%94%E6%96%AD%E8%A7%A3%E9%87%8A2.png" alt="image"></p><p>像这种调用链路的连锁故障，叫做<b>雪崩</b>。</p><p>正所谓刮骨疗毒，壮士断腕。在这种时候，就需要我们的熔断机制来挽救整个系统。</p><p><img src="http://bloghello.oursnail.cn/%E7%86%94%E6%96%AD%E8%A7%A3%E9%87%8A3.png" alt="image"></p><ol><li><strong><font color="red">开启熔断</font></strong>:在固定时间窗口内，接口调用超时比率达到一个阈值，会开启熔断。进入熔断状态后，后续对该服务接口的调用不再经过网络，直接执行本地的默认方法，达到服务降级的效果。</li><li><strong><font color="red">熔断恢复</font></strong>:熔断不可能是永久的。当经过了规定时间之后，服务将从熔断状态回复过来，再次接受调用方的远程调用。</li></ol><h2>二、熔断和降级</h2><ol><li>在股票市场，熔断这个词大家都不陌生，是指当股指波幅达到某个点后，交易所为控制风险采取的暂停交易措施。相应的，服务熔断一般是指软件系统中，由于某些原因使得服务出现了过载现象，为防止造成整个系统故障，从而采用的一种保护措施，所以很多地方把熔断亦称为过载保护。</li><li>大家都见过女生旅行吧，大号的旅行箱是必备物，平常走走近处绰绰有余，但一旦出个远门，再大的箱子都白搭了，怎么办呢？常见的情景就是把物品拿出来分分堆，比了又比，最后一些非必需品的就忍痛放下了，等到下次箱子够用了，再带上用一用。而服务降级，就是这么回事，整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。</li></ol><blockquote><p>降级白话理解：比如在公司 遇到贵宾要来 就把一些不重要的常规接待暂停 把这些资源供给招待贵宾 之前有个淘宝的分享 比如双11 把订单评论和收藏等功能在这一天暂停 把这些资源分给其它关键服务 比如下单</p></blockquote><p>所以从上述分析来看，两者其实从有些角度看是有一定的类似性的：</p><ol><li><strong><font color="red">目的很一致</font></strong>，都是从可用性可靠性着想，为防止系统的整体缓慢甚至崩溃，采用的技术手段；</li><li><strong><font color="red">最终表现类似</font></strong>，对于两者来说，最终让用户体验到的是某些功能暂时不可达或不可用；</li><li><strong><font color="red">粒度一般都是服务级别</font></strong>，当然，业界也有不少更细粒度的做法，比如做到数据持久层（允许查询，不允许增删改）；</li><li><strong><font color="red">自治性要求很高</font></strong>，熔断模式一般都是服务基于策略的自动触发，降级虽说可人工干预，但在微服务架构下，完全靠人显然不可能，开关预置、配置中心都是必要手段；</li></ol><p>而两者的区别也是明显的：</p><ol><li><strong><font color="red">触发原因不太一样</font></strong>，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</li><li><strong><font color="red">管理目标的层次不太一样</font></strong>，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li></ol><h2>三、Spring Cloud Hystrix</h2><p>Spring Cloud Hystrix是基于Netflix的开源框架Hystrix实现，该框架实现了服务熔断、线程隔离等一系列服务保护功能。对于熔断机制的实现，Hystrix设计了三种状态：</p><p><img src="http://bloghello.oursnail.cn/Hystrix%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="image"></p><ol><li><strong><font color="red">熔断关闭状态（Closed）</font></strong>：服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制。</li><li><strong><font color="red">熔断开启状态（Open）</font></strong>：在固定时间窗口内（Hystrix默认是10秒），接口调用出错比率达到一个阈值（Hystrix默认为50%），会进入熔断开启状态。进入熔断状态后，后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法。</li><li><strong><font color="red">半熔断状态（Half-Open）</font></strong>：在进入熔断开启状态一段时间之后（Hystrix默认是5秒），熔断器会进入半熔断状态。所谓半熔断就是尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断关闭状态。</li></ol><p>集成Hystrix也是很简单的：</p><p>demo的改造的基础是<code>eureka-client-feign</code>,将其改造为<code>eureka-client-feign-hystrix</code></p><p>1、引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、添加注解@EnableCircuitBreaker，启用Hystrix</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在controller方法上增加注解@HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CityClient cityClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"cities"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"defaultCities"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String res = cityClient.listCity();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultCities</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"City Data Server is down!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试</p><p>启动eureka和城市数据服务，再启动本服务，是正常的。</p><p><img src="http://bloghello.oursnail.cn/hystrix%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="image"></p><p>那么，我们将城市数据服务关闭，看看有没有返回我们指定的默认值。</p><p><img src="http://bloghello.oursnail.cn/hystrix%E6%B5%8B%E8%AF%95%E5%BC%82%E5%B8%B8.png" alt="image"></p><h2>四、改造本系统</h2><p>在demo中，用<code>@HystrixCommand</code>注解中的熔断时执行的方法来实现异常情况下的默认返回。现在我们要改造<code>msa-weather-report-eureka-feign-gateway</code>，将其改造为<code>msa-weather-report-eureka-feign-gateway-hystrix</code>，我们用新的方式，直接在<code>DataClient</code>这个接口里面声明触发熔断时回调的类<code>DataClientFallback.class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"msa-eureka-client-zuul"</span>,fallback = DataClientFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取城市列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"city/cities"</span>)</span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">listCity</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市ID获取天气</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"data/weather/cityId/&#123;cityId&#125;"</span>)</span><br><span class="line">    <span class="function">WeatherResponse <span class="title">getDataByCityId</span><span class="params">(@PathVariable(<span class="string">"cityId"</span>)</span> String cityId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体这个回调的类里面时这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DataClientFallback implements DataClient &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;City&gt; listCity() throws Exception &#123;</span><br><span class="line">        List&lt;City&gt; cityList = new ArrayList&lt;&gt;();</span><br><span class="line">        City city = new City();</span><br><span class="line">        city.setCityId(&quot;101190101&quot;);</span><br><span class="line">        city.setCityName(&quot;默认的南京&quot;);</span><br><span class="line"></span><br><span class="line">        cityList.add(city);</span><br><span class="line">        return cityList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public WeatherResponse getDataByCityId(String cityId) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，如果城市数据服务挂了，就默认返回一下我这里设置的城市；如果获取天气信息的服务挂了，我们就直接返回null;</p><p>那么，我们就相当于在feign中启用hystrix，就需要在配置文件中增加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p>因为如果根据城市id获取天气信息的服务不可用时，我们默认直接返回null，显示页面啥都不显示时不好的，所以我们需要在前端判断一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不为空时--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;reportModel.report&#125; != null"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-success"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.city&#125;"</span>&gt;</span>城市名称<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            空气质量指数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.aqi&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            当前温度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.wendu&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            温馨提示：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.ganmao&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card  border-info"</span> <span class="attr">th:each</span>=<span class="string">"forecast : $&#123;reportModel.report.forecast&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body text-info"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.date&#125;"</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text "</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.type&#125;"</span>&gt;</span>天气类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.high&#125;"</span>&gt;</span>最高温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.low&#125;"</span>&gt;</span>最低温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.fengxiang&#125;"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为空时，说明熔断器生效，直接显示提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;reportModel.report&#125; == null"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           天气数据API服务暂不可用！</span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面就来测试一把吧！</p><p>首先时完全正常的情况，各个服务都可用：</p><p>启动如下服务：redis,<code>weather-sureka-server</code>,<code>msa-weather-city-eureka</code>,<code>msa-weather-collection-eureka-feign-gateway</code>,<code>msa-weather-data-eureka</code>,<code>msa-weather-report-eureka-feign-gateway-hystrix</code>,<code>msa-eureka-client-zuul</code>这六个服务：</p><p><img src="http://bloghello.oursnail.cn/%E9%9B%86%E6%88%90hystrix%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%83%85%E5%86%B5.png" alt="image"></p><p>正常的话，就会看到之前的页面：<a href="http://localhost:8083/report/cityId/101190101" target="_blank" rel="noopener">http://localhost:8083/report/cityId/101190101</a></p><p>城市数据服务不可用，熔断器生效：</p><p>关闭城市数据服务<code>msa-weather-city-eureka</code>，造成服务不可用的现象。看页面显示是否只有我塞进去的假数据。</p><p><img src="http://bloghello.oursnail.cn/%E9%9B%86%E6%88%90hystrix%E7%9A%84%E6%9C%8D%E5%8A%A1-%E6%96%AD%E5%BC%80%E5%9F%8E%E5%B8%82%E6%95%B0%E6%8D%AE.png" alt="image"></p><p>天气数据服务不可用，熔断器生效：</p><p>关闭天气数据API服务<code>msa-weather-data-eureka</code>.看页面是否显示服务暂不可用的提示信息。</p><p>报了一个空指针错误，原因是<code>msa-weather-report-eureka-feign-gateway-hystrix</code>中<code>WeatherReportServiceImpl</code>中的方法原来是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherReportServiceImpl</span> <span class="keyword">implements</span> <span class="title">IWeatherReportService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeatherClient weatherClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weather <span class="title">getDataByCityId</span><span class="params">(String cityId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weatherClient.getDataByCityId(cityId).getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，要做一下判空操作，否则是不能调用<code>getData()</code>这个方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherReportServiceImpl</span> <span class="keyword">implements</span> <span class="title">IWeatherReportService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataClient dataClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weather <span class="title">getDataByCityId</span><span class="params">(String cityId)</span> </span>&#123;</span><br><span class="line">        WeatherResponse res = dataClient.getDataByCityId(cityId);</span><br><span class="line">        Weather weather = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(res != <span class="keyword">null</span>)&#123;</span><br><span class="line">            weather = res.getData();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> weather;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子，重新启动天气预报UI服务。就可以看到效果啦！</p><p><img src="http://bloghello.oursnail.cn/%E9%9B%86%E6%88%90hystrix%E7%9A%84%E6%9C%8D%E5%8A%A1-%E6%96%AD%E5%BC%80%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1.png" alt="image"></p><p>这样，本系统集成<code>hystrix</code>就成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第十一篇文章，某个服务一旦出现不可用，可能会牵连整个系统造成雪崩，或者有的时候资源需要聚集在核心业务上，非核心业务就可以适当地关闭，此时就是需要有一种机制来实现系统保护和服务降级的功能。本章介绍hystrix组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>10.天气预报系统-集中化配置</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/10.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E9%9B%86%E4%B8%AD%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/10.天气预报系统-集中化配置/</id>
    <published>2019-02-21T03:27:51.810Z</published>
    <updated>2019-02-21T04:56:11.030Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第十篇文章，服务拆分之后，配置文件就必然随着这些拆分的服务分散在各个服务器上，这对运营是一个灾难，用一个集中化的方式统一进行配置文件的配置与修改是必要的。本章介绍spring config的基本使用，但是还是存在一些小问题，在后面的实战环节中会解决。</p><a id="more"></a><h2>一、背景</h2><p>随着线上项目变的日益庞大，每个项目都散落着各种配置文件，如果采用分布式的开发模式，需要的配置文件随着服务增加而不断增多。某一个基础服务信息变更，都会引起一系列的更新和重启，运维苦不堪言也容易出错。配置中心便是解决此类问题的灵丹妙药。</p><p>我们需要一个外部的、集中化的一个配置中心。</p><h2>二、配置分类</h2><ul><li>按配置的来源划分</li></ul><p>主要有源代码、文件、数据库连接、远程调用等</p><ul><li>按配置的环境划分</li></ul><p>主要有开发环境、测试环境、预发布环境、生产环境等。</p><ul><li>按配置的集成阶段划分</li></ul><p>编译时、打包时和运行时</p><ul><li>按配置的加载方式划分</li></ul><p>启动加载和动态加载</p><h2>三、Spring Cloud Config</h2><p>在我们了解<code>spring cloud config</code>之前，我可以想想一个配置中心提供的核心功能应该有什么</p><ul><li>提供服务端和客户端支持</li><li>集中管理各环境的配置文件</li><li>配置文件修改之后，可以快速的生效</li><li>可以进行版本管理</li><li>支持大的并发查询</li><li>支持各种语言</li></ul><p><code>Spring Cloud Config</code>可以完美的支持以上所有的需求。</p><p><strong>Spring Cloud Config项目是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。Spring cloud使用git或svn存放配置文件，默认情况下使用git.</strong></p><p><img src="http://bloghello.oursnail.cn/springcloudconfig%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.png" alt="image"></p><h2>Server端</h2><p>注册到<code>eureka</code>的实例名：<code>weather-config-server</code></p><p>1、添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: weather-config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/sunweiguo/spring-cloud-config-center</span><br><span class="line">          search-paths: config-repo</span><br><span class="line">          username: sunweiguo</span><br><span class="line">          password: xxx</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8086</span><br></pre></td></tr></table></figure><p><code>config-repo</code>这个文件夹是由自己在github上创建的。在这个目录下新建一个文件：<code>weather-config-client-dev.properties</code>,里面的内容为<code>auther=oursnail.cn</code>(随便写点东西以供测试)</p><blockquote><p>仓库中的配置文件会被转换成web接口，访问可以参照以下的规则：</p><p>/{application}/{profile}[/{label}]</p><p>/{application}-{profile}.yml</p><p>/{label}/{application}-{profile}.yml</p><p>/{application}-{profile}.properties</p><p>/{label}/{application}-{profile}.properties</p></blockquote><p>我这里的<code>weather-config-client-dev.properties</code>,它的<code>application</code>是<code>weather-config-client</code>，<code>profile</code>是<code>dev</code>。<code>client</code>会根据填写的参数来选择读取对应的配置。</p><p><img src="http://bloghello.oursnail.cn/github%E4%BB%93%E5%BA%93%E9%87%8C%E7%9A%84springconfig%E7%9A%84%E5%80%BC.png" alt="image"></p><p>3、启动类</p><p>启动类添加<code>@EnableConfigServer</code>，激活对配置中心的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WeatherEurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此server端相关配置已经完成</p><p>4、测试</p><p>访问 <a href="http://localhost:8086/auther/dev" target="_blank" rel="noopener">http://localhost:8086/auther/dev</a> 返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;auther&quot;,</span><br><span class="line">&quot;profiles&quot;: [</span><br><span class="line">&quot;dev&quot;</span><br><span class="line">],</span><br><span class="line">&quot;label&quot;: null,</span><br><span class="line">&quot;version&quot;: &quot;ef1a6baeddce01d3956ba2a7181f66721959a10c&quot;,</span><br><span class="line">&quot;state&quot;: null,</span><br><span class="line">&quot;propertySources&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以读到<code>auther</code>里的内容，说明服务端配置成功。</p><h2>四、Client端</h2><p>注册到<code>eureka</code>的实例名：<code>weather-config-client</code></p><p>1、添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>2、配置文件</p><p>需要配置两个配置文件，<code>application.properties</code>和<code>bootstrap.properties</code></p><p><code>application.properties</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=weather-config-client</span><br><span class="line">server.port=8087</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone: http://localhost:8761/eureka</span><br></pre></td></tr></table></figure><p><code>bootstrap.properties</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.config.name=weather-config-client</span><br><span class="line">spring.cloud.config.profile=dev</span><br><span class="line">spring.cloud.config.uri=http://localhost:8086/</span><br><span class="line">spring.cloud.config.label=master</span><br></pre></td></tr></table></figure><p><code>spring.application.name</code>：对应<code>{application}</code>部分</p><p><code>spring.cloud.config.profile</code>：对应<code>{profile}</code>部分</p><p><code>spring.cloud.config.label</code>：对应git的分支。如果配置中心使用的是本地存储，则该参数无用</p><p><code>spring.cloud.config.uri</code>：配置中心的具体地址,就是server端地址</p><blockquote><p>特别注意：上面这些与spring-cloud相关的属性必须配置在bootstrap.properties中，config部分内容才能被正确加载。因为config的相关配置会先于application.properties，而bootstrap.properties的加载也是先于application.properties。</p></blockquote><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEurekaClientApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;auther&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String auther;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(<span class="string">"oursnail.cn"</span>,auther);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果测试通过，那么获取内容成功。</p><p>但是我们通过网页的方式进行测试，我们会发现修改了github上的内容后，网页上的内容是不能立即刷新的。这比较头疼，可以通过一些途径去解决。这个自动刷新问题会在后面的实战项目中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;auther&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String auther;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> auther;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第十篇文章，服务拆分之后，配置文件就必然随着这些拆分的服务分散在各个服务器上，这对运营是一个灾难，用一个集中化的方式统一进行配置文件的配置与修改是必要的。本章介绍spring config的基本使用，但是还是存在一些小问题，在后面的实战环节中会解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>9.天气预报系统-API网关</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/9.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-API%E7%BD%91%E5%85%B3/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/9.天气预报系统-API网关/</id>
    <published>2019-02-21T03:27:40.435Z</published>
    <updated>2019-02-21T04:53:25.736Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第九篇文章，服务的注册、发现和消费都解决了，小系统就可以跑起来了，但是对于复杂的系统，一个统一的入口是必要的，下面将介绍网关是什么，它的重要性，并且介绍zuul组件的使用。</p><a id="more"></a><h2>一、背景</h2><p>理论上，客户端可以直接向微服务发送请求，每个微服务都有一个公开的URL，该URL将映射到微服务的负载均衡器，由它负责在可用实例之间分发请求。</p><p>但是我们知道在微服务架构风格中，一个大应用被拆分成为了多个小的服务系统提供出来，这些小的系统他们可以自成体系，也就是说这些小系统可以拥有自己的数据库，框架甚至语言等，这些小系统通常以提供 Rest Api 风格的接口来被 H5, Android, IOS 以及第三方应用程序调用。</p><p>但是在UI上进行展示的时候，我们通常需要在一个界面上展示很多数据，这些数据可能来自于不同的微服务中，举个例子。</p><p>在一个电商系统中，查看一个商品详情页，这个商品详情页包含商品的标题，价格，库存，评论等，这些数据对于后端来说可能是位于不同的微服务系统之中，可能我后台的系统是这样来拆分我的服务的：</p><p>产品服务 - 负责提供商品的标题，描述，规格等。<br>价格服务 - 负责对产品进行定价，价格策略计算，促销价等。<br>库存服务 - 负责产品库存。<br>评价服务 - 负责用户对商品的评论，回复等。<br>现在，商品详情页需要从这些微服务中拉取相应的信息，问题来了:</p><p>由于我们使用的服务系统架构，所以没办法像传统单体应用一样依靠数据库的 join 查询来得到最终结果，那么如何才能访问各个服务呢？这里就会引出以下几个问题：</p><h3>1. 客户端需求和微服务暴露的细粒度 API 不匹配</h3><p>经常有一个业务调用很多个服务，假如客户端发送许多请求，这在公网上可能会很低效，而且会使客户端代码变得更复杂。</p><h3>2. 服务使用的协议不是 Web 友好的</h3><p>有的服务可能使用二进制 RPC（比如 thrift），有的服务可能使用 AMQP 消息传递协议。不管哪种协议都不是浏览器友好或防火墙友好的，最好是内部使用。在防火墙之外，应用程序应该使用诸如 HTTP 和 WebSocket 之类的协议。</p><h3>3. 难重构</h3><p>随着时间推移可能想要更改系统划分成服务的方式。例如，合并两个服务或者将一个服务拆分成两个或更多服务。如果客户端与微服务直接通信，那么执行这类重构就很困难。</p><p>由于以上问题，客户端与微服务直接通信很少是合理的，更好的方法是使用 API 网关，由 API 网关作为后端服务系统的唯一入口。它封装了系统内部架构，为每个客户端提供一个定制的 API 。由它负责服务请求路由、组合及协议转换。有的 API 网关还有其它职责，如身份验证、监控、负载均衡、缓存等。</p><h2>二、API 网关</h2><blockquote><p>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。<br>API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。</p></blockquote><h3>单节点网关</h3><p><img src="http://bloghello.oursnail.cn/%E5%8D%95%E8%8A%82%E7%82%B9%E7%BD%91%E5%85%B3.png" alt="image"></p><h3>Backends for frontends 网关</h3><p><img src="http://bloghello.oursnail.cn/Backends%20for%20frontends%20%E7%BD%91%E5%85%B3.png" alt="image"></p><h2>三、API 网关的优缺点</h2><h3>1. 优点</h3><p>封装了应用程序的内部结构。客户端只需要同网关交互，而不必调用特定的服务（<strong>统一API入口</strong>）。API 网关为每一类客户端提供了特定的 API ，从而减少客户端与应用程序间的交互次数，简化客户端代码的处理（<strong>集合多个API</strong>）。</p><p>另外，可以避免内部信息泄露给外部。可以为微服务添加额外的安全层。支持混合通信协议。降低构建微服务的复杂性。</p><h3>2. 缺点</h3><p>增加了一个必须开发、部署和维护的高可用组件。还有一个风险是 API 网关变成了开发瓶颈。为了暴露每个微服务，开发人员必须更新 API 网关。API 网关的更新过程要尽可能地简单，否则为了更新网关，开发人员将不得不排队等待。不过，虽然有这些不足，但对于大多数现实世界的应用程序而言使用 API 网关是合理的。（<strong>在架构上需要额外考虑更多编排和管理；路由逻辑配置要进行统一的管理；可能引发单点故障</strong>）</p><h2>四、参考实现方案</h2><p>以上列出在 DIY 这个 API 网关时需要考虑的点，以及参考的技术实现。下面是几种目前比较流行的 API 网关搭建的技术方案供参考，后续文章将给出这些方案搭建的例子</p><p>1）Nginx + Lua实现负载均衡、限流、服务发现等功能</p><p>2）使用 spring cloud 技术栈，其中 zuul 就是用作 API 网关的</p><p>3）Mashape 的开源 API 网关 Kong</p><p>本次，使用<code>zuul</code>作为API网关。</p><h2>五、Zuul</h2><p>功能：认证、压测、金丝雀测试、动态路由、负载削减、安全、静态相应处理…</p><p><font color="red">注意：因为我到目前为止，springboot用的版本是2.1.x，但是呢，集成zuul的时候报错，查了一下，是zuul还不支持2.1.x的版本，所以我将demo:<code>weather-eureka-client=zuul</code>降级到了2.0.3版本。启动成功并且测试成功</font></p><p>首先是准备拿出之前的两个项目：<code>weather-eureka-server</code>和<code>weather-eureka-client</code>，启动，一个地址是8671，一个地址我设定为8081,基于<code>weather-eureka-client</code>新建一个项目：<code>weather-eureka-client-zuul</code>，改动如下：</p><p>首先将springboot版本降到2.0.x版本。在启动类上增加注解：<code>@EnableZuulProxy</code>，在yml文件中新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    hi:</span><br><span class="line">      path: /hi/**</span><br><span class="line">      serviceId: weather-eureka-client</span><br></pre></td></tr></table></figure><p>这里的含义是：定义一个名字叫做<code>hi</code>的路由规则（自定义），我们访问<code>/hi/**</code>这个路径的时候，就会转发到<code>weather-eureka-client</code>这个服务下的<code>**</code>路径。</p><p>比如我这里的<code>weather-eureka-client</code>有一个controller路径为&quot;hello&quot;，调用<code>localhost:8081/hello</code>就可以返回一个字符串。那么有了<code>zuul</code>配置之后，我可以访问<code>localhost:8082/hi/hello</code>也可以访问到这个路径了。</p><p>改造本系统：</p><p>新建一个项目：<code>msa-eureka-client-zuul</code>。主要是定义网关的路由。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: msa-eureka-client-zuul</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br><span class="line"># 一个是msa-weather-data-eureka，一个是msa-weather-ciy-eureka</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    city:</span><br><span class="line">      path: /city/**/</span><br><span class="line">      serviceId: msa-weather-city-eureka</span><br><span class="line">    data:</span><br><span class="line">      path: /data/**/</span><br><span class="line">      serviceId: msa-weather-data-eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8085</span><br></pre></td></tr></table></figure><p>ok，下面我们就修改<code>msa-weather-collection-cureka-feign</code>和<code>msa-weather-report-feign</code>.复制为新的项目：<code>msa-weather-collection-cureka-feign-zuul</code>和<code>msa-weather-report-feign-zuul</code></p><p>以<code>msa-weather-report-feign-zuul</code>为例，其实他依托于两个服务:<code>msa-weather-data-eureka</code>和<code>msa-weather-ciy-eureka</code>，这两个我们只需要写在一个接口内，调用网关里定义的路由即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"msa-eureka-client-zuul"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取城市列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"city/cities"</span>)</span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">listCity</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市ID获取天气</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"data/weather/cityId/&#123;cityId&#125;"</span>)</span><br><span class="line">    <span class="function">WeatherResponse <span class="title">getDataByCityId</span><span class="params">(@PathVariable(<span class="string">"cityId"</span>)</span> String cityId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子，这个<code>DataClient</code>就取代了之前的<code>cityClient</code>和<code>WeatherClient</code>。改造完成。</p><p>测试无问题。</p><p><img src="http://bloghello.oursnail.cn/%E9%9B%86%E6%88%90zuul%E6%B5%8B%E8%AF%95.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第九篇文章，服务的注册、发现和消费都解决了，小系统就可以跑起来了，但是对于复杂的系统，一个统一的入口是必要的，下面将介绍网关是什么，它的重要性，并且介绍zuul组件的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>8.天气预报系统-微服务的消费</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/8.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B6%88%E8%B4%B9/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/8.天气预报系统-微服务的消费/</id>
    <published>2019-02-21T03:27:31.800Z</published>
    <updated>2019-02-21T05:26:17.654Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第八篇文章，在解决了服务注册和发现两个问题之后，就要解决服务消费问题了。本节介绍feign的使用。</p><a id="more"></a><h2><font color="#337ab7">1.发现模式</font></h2><p>直连模式：</p><p>直接去连接某个url，比较简单粗暴，但是不能实现负载均衡和高可用，使用比较少。</p><p>客户端发现模式：</p><ul><li>服务实例启动后，将自己的位置信息提交到服务注册表</li><li>客户端从服务注册表进行查询，来获取可用的服务实例</li><li>客户端自行使用负载均衡算法从多个服务实例中选择一个</li></ul><p><img src="http://bloghello.oursnail.cn/18-11-23/96879161.jpg" alt="image"></p><p>服务端发现模式：</p><p>负载均衡的实现在服务端。而客户端发现模式的负载均衡由客户端来实现。</p><h2><font color="#337ab7">2.服务的消费者</font></h2><p><code>Apache HttpClient</code>：这个比较简单，不再赘述。</p><p><code>Ribbon</code>: 基于客户端负载均衡工具。可以基于Http或者Tcp实现负载均衡。</p><p>直接根据服务的名字来消费，具体是连到哪一个具体的ip去消费是不用管的，因为他已经在客户端上做了一定的负载均衡算法，由他的算法来决定。</p><p><code>Febin</code>:</p><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p><p>我们先来搞个demo测试一把！</p><h2><font color="#337ab7">3.Demo for Feign</font></h2><p>首先，我们之前的工作中已经由了一个<code>Eureka server</code>，再拿一个叫做<code>msa-weather-city-server</code>的服务来测试。这个服务的主要功能是获取城市信息。</p><h4>3.1 引入依赖、添加注解</h4><p>首先引入feign依赖，注意这里有个坑，我一开始没有指定版本号，死活无法导入<code>@EnableFeignClients</code>这个注解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在程序的启动类ServiceFeignApplication ，加上@EnableFeignClients注解开启Feign的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>3.2 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-weather-feign</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  client:</span><br><span class="line">    config:</span><br><span class="line">      feignName:</span><br><span class="line">        connectTimeout: 5000</span><br><span class="line">        readTimeout: 5000</span><br></pre></td></tr></table></figure><h4>3.3 定义feign接口</h4><p>定义一个feign接口，通过@ FeignClient（“服务名”），来指定调用哪个服务。比如在代码中调用了<code>msa-weather-city-eureka</code>服务的“/cities”接口来获取所有的城市列表，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"msa-weather-city-eureka"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/cities"</span>)</span><br><span class="line">    <span class="function">String <span class="title">listCity</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>3.4 定义API来供浏览器调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CityClient cityClient;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"cities"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String res = cityClient.listCity();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，启动服务中心<code>Eureka server</code>和服务提供方<code>msa-weather-city-server</code>以及本消费服务。再浏览器中访问对应的url：<a href="http://localhost:8080/cities%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E5%88%B0" target="_blank" rel="noopener">http://localhost:8080/cities就可以调用到</a><code>msa-weather-city-server</code>提供的服务。</p><p>至此，demo演示完毕。</p><h2><font color="#337ab7">4.用Feign继续完善天气项目</font></h2><p>有三个<code>TODO</code>项：</p><ul><li>数据采集微服务在天气数据同步任务中，依赖于城市数据API微服务</li><li>天气预报微服务查询天气信息，依赖于天气数据API微服务</li><li>天气预报微服务提供的城市列表，依赖于城市数据API微服务</li></ul><p>那么我们可以看出来，需要去集成Feign去消费的微服务只有两个：<code>msa-weather-collection-eureka</code>和<code>msa-weather-report-eureka</code>。我们将其改造为：<code>msa-weather-collection-eureka-feign</code>和<code>msa-weather-report-eureka-feign</code>.</p><p>这里就以<code>msa-weather-collection-eureka</code>为例，步骤基本与demo一样。首先是引入依赖，然后加上注解开启Feign功能。新建一个接口，还是获取城市列表。我只要指定好那个城市列表的微服务的名字和路径，就可以获取到了。不清楚直接看代码即可。</p><p><font color="red">那么在全部改好之后，我们启动这五个项目。但是我们要注意，先启动<code>weather-eureka-server</code>，来提供注册的服务。然后启动城市数据服务，因为天气数据采集要用到他。然后启动天气数据采集服务。然后一次启动天气数据API服务和天气预报UI显示服务。</font></p><p>那么我们访问天气预报UI对应的URL,以南京为例：<br><code>http://localhost:8083/report/cityId/101190101</code>，如果功能是正常的，标识微服务改造初步成功。</p><p><img src="http://bloghello.oursnail.cn/18-11-23/44111959.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第八篇文章，在解决了服务注册和发现两个问题之后，就要解决服务消费问题了。本节介绍feign的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>7.天气预报系统-微服务的注册和发现</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/7.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/7.天气预报系统-微服务的注册和发现/</id>
    <published>2019-02-21T03:27:23.002Z</published>
    <updated>2019-02-21T05:25:42.657Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第七篇文章，首先要解决的问题是服务注册和发现。本节介绍eureka的使用。</p><a id="more"></a><h2>1.什么是spring cloud</h2><p><code>Spring Cloud</code>是一系列框架的有序集合。它利用<code>Spring Boot</code>的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用<code>Spring Boot</code>的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过<code>Spring Boot</code>风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p>微服务是可以独立部署、水平扩展、独立访问（或者有独立的数据库）的服务单元，<code>spring cloud</code>就是这些微服务的大管家，采用了微服务这种架构之后，项目的数量会非常多，<code>spring cloud</code>做为大管家需要管理好这些微服务，自然需要很多小弟来帮忙。</p><p>解决了分布式系统中的一些问题:配置管理、服务注册、服务发现、断路器、智能路由、负载均衡、服务间调用、一次性令牌、全局锁、领导选举、控制总线、思维导图、分布式会话、集群状态、分布式消息。。。</p><h2>2.spring cloud &amp; spring boot</h2><ul><li>SpringBoot是构建spring cloud架构的基石</li></ul><h2>3.spring cloud子项目</h2><p>参考这篇文章：<a href="http://www.ityouknow.com/springcloud/2017/05/01/simple-springcloud.html" target="_blank" rel="noopener">springcloud(一)：大话Spring Cloud</a></p><h2>4.Eureka</h2><h4>4.1.服务中心</h4><p>服务中心又称注册中心，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等，比如<code>dubbo admin</code>后台的各种功能。</p><p>有了服务中心调用关系会有什么变化，画几个简图来帮忙理解.</p><p>项目A调用项目B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">项目A--&gt;项目B</span><br></pre></td></tr></table></figure><p>有了服务中心之后，任何一个服务都不能直接去掉用，都需要通过服务中心来调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">项目A--&gt;注册中心再去访问项目B</span><br></pre></td></tr></table></figure><p>由于各种服务都注册到了服务中心，就有了去做很多高级功能条件。比如几台服务提供相同服务来做均衡负载；监控服务器调用成功率来做熔断，移除服务列表中的故障点；监控服务调用时间来对不同的服务器设置不同的权重等等。</p><h4>4.2.Eureka</h4><ul><li><code>Spring Cloud</code> 封装了 <code>Netflix</code> 公司开发的 <code>Eureka</code> 模块来实现服务注册和发现。</li><li><code>Eureka Server</code> 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 <code>Eureka</code> 的客户端连接到 <code>Eureka Server</code>，并维持心跳连接。</li><li>这样系统的维护人员就可以通过 <code>Eureka Server</code> 来监控系统中各个微服务是否正常运行。</li><li><code>Spring Cloud</code> 的一些其他模块（比如<code>Zuul</code>）就可以通过 <code>Eureka Server</code> 来发现系统中的其他微服务，并执行相关的逻辑。</li><li>Eureka由两个组件组成：Eureka服务器和Eureka客户端。Eureka服务器用作服务注册服务器。Eureka客户端是一个java客户端，用来简化与服务器的交互、作为轮询负载均衡器，并提供服务的故障切换支持。</li></ul><p><img src="http://bloghello.oursnail.cn/18-11-22/15609057.jpg" alt="image"></p><p>其中有三个角色：</p><ul><li><code>Eureka Server</code>：提供服务注册和发现</li><li><code>Service Provider</code>服务提供方，将自身服务注册到<code>Eureka</code>，从而使服务消费方能够找到</li><li><code>Service Consumer</code>：服务消费方，从<code>Eureka</code>获取注册服务列表，从而能够消费服务</li></ul><h4>4.3.Eureka Server</h4><p>新建一个springboot项目。spring cloud已经帮我实现了服务注册中心，我们只需要很简单的几个步骤就可以完成。</p><p>演示的springboot版本是最新的<code>&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</code>,springcloud也是最新的<code>&lt;version&gt;Finchley.RELEASE&lt;/version&gt;</code></p><p>1、pom中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Eureka server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、添加启动代码中添加@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherEurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WeatherEurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、配置文件</p><p>在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，在application.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><ul><li><code>eureka.client.register-with-eureka</code> ：表示是否将自己注册到Eureka Server，默认为true。</li><li><code>eureka.client.fetch-registry</code> ：表示是否从Eureka Server获取注册信息，默认为true。</li><li><code>eureka.client.serviceUrl.defaultZone</code> ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</li><li></li></ul><p>启动工程后，访问：<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> ，可以看到下面的页面，其中还没有发现任何服务</p><p><img src="http://bloghello.oursnail.cn/18-11-22/31605865.jpg" alt="image"></p><h4>4.4.Eureka Client</h4><p>基本与上一个是类似的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br></pre></td></tr></table></figure><p>主要的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: weather-eureka-client</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br></pre></td></tr></table></figure><p>这样同时启动<code>Eureka Server</code>和<code>Eureka Client</code>两个工程。在网站中输入<code>localhost://8761</code>就可以看到注册到<code>Eureka Server</code>的实例了。</p><h2>5.本门实战</h2><p>将之前的四个微服务改造为eureka的客户端。</p><p>即将</p><p><code>mas-weather-collection-server</code></p><p><code>mas-weather-report-server</code></p><p><code>mas-weather-data-server</code></p><p><code>mas-weather-city-server</code></p><p>改为：</p><p><code>mas-weather-collection-eureka</code></p><p><code>mas-weather-report-eureka</code></p><p><code>mas-weather-data-eureka</code></p><p><code>mas-weather-city-eureka</code></p><p>改造过程十分简单，就是引入依赖，修改配置即可。</p><p>同时启动这四个微服务客户端和一个eureka服务端。</p><p>我们可以看到：</p><p><img src="http://bloghello.oursnail.cn/18-11-23/81797360.jpg" alt="image"></p><p>电脑要爆炸了~~~~~~</p><p>下面，这些微服务之间可以相互访问了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第七篇文章，首先要解决的问题是服务注册和发现。本节介绍eureka的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>6.天气预报系统-拆分本系统</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/6.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E6%8B%86%E5%88%86%E6%9C%AC%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/6.天气预报系统-拆分本系统/</id>
    <published>2019-02-21T03:27:13.131Z</published>
    <updated>2019-02-21T04:49:51.801Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第六篇文章，先初步拆分本系统为四个服务，还没有进行服务治理等，只是简单的业务拆分，为下一步做准备。</p><a id="more"></a><p><img src="http://bloghello.oursnail.cn/%E5%9B%9B%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="image"></p><h2>天气数据采集微服务</h2><p>这个微服务专门提供数据采集和定时更新功能，将数据存储在redis中。</p><p><img src="http://bloghello.oursnail.cn/msa-weather-collection-server.png" alt="image"></p><p>该服务的核心service中的方法是：<code>syncDataByCityId</code>，就是根据<code>cityId</code>来将数据同步进redis。</p><p>代码：<a href="https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-collection-server" target="_blank" rel="noopener">https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-collection-server</a></p><h2>天气数据API</h2><p>这个服务专门来提供天气数据的查询功能。</p><p>将前端页面以及定时、城市相关的代码全部剔除。只留下两个API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WeatherResponse <span class="title">getDataByCityId</span><span class="params">(String cityId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">WeatherResponse <span class="title">getDataByCityName</span><span class="params">(String cityName)</span></span>;</span><br></pre></td></tr></table></figure><p>代码：<a href="https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-data-server" target="_blank" rel="noopener">https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-data-server</a></p><h2>天气预报微服务</h2><p>本服务的主要功能为：用户通过浏览器来访问，可以返回一个天气预报的界面。</p><p>就将redis和定时任务相关的都删掉。我们只需要一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Weather <span class="title">getDataByCityId</span><span class="params">(String cityId)</span></span>;</span><br></pre></td></tr></table></figure><p>因为展示数据需要用到城市信息，但是此时还没有，所以需要自己去模拟一些数据去显示。</p><p>代码：<a href="https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-report-server" target="_blank" rel="noopener">https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-report-server</a></p><h2>城市数据API</h2><p>本服务只提供城市列表数据功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;City&gt; <span class="title">listCity</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>有的需要填充一些假数据之后，都可以独立运行。</p><p>代码：<a href="https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-city-server" target="_blank" rel="noopener">https://github.com/sunweiguo/swgBook-for-spring-cloud/tree/master/spring-cloud-weather-action/06/msa-weather-city-server</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第六篇文章，先初步拆分本系统为四个服务，还没有进行服务治理等，只是简单的业务拆分，为下一步做准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>5.天气预报系统-服务拆分和业务建模</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/5.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E5%92%8C%E4%B8%9A%E5%8A%A1%E5%BB%BA%E6%A8%A1/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/5.天气预报系统-服务拆分和业务建模/</id>
    <published>2019-02-21T03:27:04.094Z</published>
    <updated>2019-02-21T04:36:58.528Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第五篇文章，在进行真正的业务拆分之前，我们来认识一下什么是SOA架构，什么是微服务。确定本系统拆分的几个部分。</p><a id="more"></a><h2>单体架构</h2><p>我们熟悉的单体MVC架构：</p><p>用户&lt;—&gt;表示层&lt;—&gt;业务层&lt;—&gt;数据访问层&lt;—&gt;数据库</p><p>单块结构的优缺点：</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>功能划分清楚</td><td>功能仍然太大</td></tr><tr><td>层次关系良好</td><td>支付周期变长</td></tr><tr><td>每一层独立</td><td>升级风险高</td></tr><tr><td>部署简单</td><td>维护成本增加</td></tr><tr><td>技术单一</td><td>可伸缩性差</td></tr><tr><td>用人成本低</td><td>监控困难</td></tr></tbody></table><h2>单体架构如何转化为微服务</h2><h4>什么是SOA？</h4><blockquote><p>SOA是一种设计方法，其中包含多个服务，而服务之间通过配合最终会提供一系列功能。一个服务通常以独立的形式存在于操作系统进程中。服务之间通过网络调用，而非采用进程内调用的方式进行通信。</p></blockquote><p>所以，<code>SOA</code>只是一种架构设计模式，<code>SOAP</code>，<code>REST</code>，<code>RPC</code>是根据这种设计模式构建出来的规范。其中<code>SOAP</code>通俗理解就是<code>http+xml</code>的形式，<code>REST</code>就是<code>http+json</code>的形式，<code>RPC</code>是基于<code>socket</code>的形式。<code>dubbo</code>就是典型的<code>RPC</code>框架，而<code>SpringCloud</code>就是遵守<code>REST</code>规范的生态系统。</p><h4>SOA VS 微服务</h4><blockquote><p>话说1979年，又是一个春天，莆田乡下的赤脚医生吴大牛被改革的春风吹的心潮澎湃，说干就干，吴大牛趁着夜色朦胧找大队支书汇报了汇报思想，第二天就承包了村卫生室，开启了自己的在医疗圈的传奇历程。</p><p>乡村诊所大家都知道，没什么复杂的东东，房子只有一间，一个大柜台中间隔开，一半是诊疗兼候诊区，一半是药房，看病就直接找医生，如果前面有人就自己找个位子坐下，排队等一会，秩序倒也井然，看完病了医生直接给抓药，然后下一个继续，也不需要护士和药剂师，吴大牛一个人全部包办。</p><p>辛辛苦苦忙碌了十年，时间来到了八九年，又是一个春天，昔日的单身汉吴大牛已成为十里八乡的知名人物，媳妇娶上了不说，家里还增加了一对双胞胎儿子，二层的小洋房也甚是气派。可是也有烦心事，尽管乡村诊所扩大到了两间，媳妇还偶尔能去帮帮忙，但是医生还是只有自己一个，天天从早忙到晚挣的都是一份钱，想多挣点怎么办？吴大牛日思夜想，还真给他想出来一招，怎么办，扩大规模，多招几个医生一起干。原来吴大牛只能治头疼脑热和跌打损伤，现在新招了一个医科大学的毕业生刘小明专治感冒发烧，又从邻村请来了老大夫李阿花专治妇科病，现在一个普通的小诊所就变成了有三个独立科室加一个公共药房（吴大牛媳妇负责）的小医院了，吴大牛是外科主任兼院长，收入那可比之前翻了三番。人逢喜事精神爽，大牛院长请县里的书法名家为新医院书写了牌匾–“博爱医院”，挑了一个黄道吉日正式挂了上去。</p><p>一晃十年过去了，又是一个春天，吴大牛的博爱医院已经发展到了内科外科妇科五官科骨科生殖科六个科室，每个科室3到5名医生不等，也耗费巨资购进了血夜化验B超等先进仪器，大牛院长也早已脱离了医疗一线，成为了专职的管理者，但是医院的大事小事大家都找他，就这三十多号员工搞的他每天是焦头烂额，想再扩大规模实在是有心无力了。要说还是大学生有水平，老部下刘小明给大牛院长献了一计，把各个科室独立出去，让各个科室主任自己管理，大牛院长只管科室之间的协调和医院发展的大事，这样既能调动基层的积极性，又能把大牛院长解放出来扩大生产抓大事谋大事，岂不妙哉？就这样，博爱医院的新一轮改革轰轰烈烈的展开了。</p><p>又是一个十年，又是一个春天，大牛院长已成为本地知名的企业家，博爱医院也发展到了二十三个科室数百名员工，发展中也出现了新问题，由于各个科室独立挂号、收费、化验，有的科室整天忙忙碌碌效益好，有的科室就相对平庸些，连分到的各种检查仪器都不能满负荷运行，整个医院养了不少闲人。这时候大牛院长视野也开阔了，请来了管理专家进行了顶层设计，把原来分散到各个科室的非核心服务全部收归集中管理，把原来二十三个挂号窗口整合为十个，二十三个收费窗口整合为八个，集中布设在一楼大厅为全院服务，还把分散在各个科室的检查仪器集中起来成立独立的检验科，也为全院服务，这样人人有活干，整个医院的服务能力又上了一个新台阶，这轮改革后博爱医院通过了各级部门的鉴定成为了远近驰名的三甲医院，吴大牛也换身一变成为了博爱集团的CEO兼董事长，下一步就准备IPO上市了。</p><p>说到这里大家可能有点糊涂，这个跟微服务有嘛关系？在孙老师看来，大牛诊所的1.0阶段就相当于软件开发的单体结构，一个程序员打天下，从头编到尾，很难做大做强。大牛诊所的2.0阶段就相当于软件开发的垂直结构，各科室按照业务划分，很容易横向扩展。博爱医院的1.0阶段就相当于软件开发的SOA结构，除了药房（数据库）外各个服务独立提供（科室主任负责），但需要大牛院长（ESB总线）来协调。博爱医院的2.0阶段就相当于软件开发的微服务结构，公共服务院内共享，科室主任管理功能弱化（只管医生业务），优点是扩容方便，哪个部门缺人直接加，不用看上下游，资源利用率高，人员和设备效率高。为什么要变呢？小诊所有小诊所的活法，大医院有大医院的骄傲。无他，天下熙熙，皆为利来；天下攘攘，皆为利往。</p></blockquote><h4>设计原则</h4><ul><li>拆分足够微：划分比较细，但是也不能太细，增加管理问题</li><li>轻量级通信：rest，rpc等方式在网络上通信</li><li>单一职责原则：高内聚，低耦合，确定服务边界</li></ul><h2>如何设计微服务系统</h2><p><font color="red"><b>服务拆分</b></font>----》<font color="red"><b>服务注册</b></font>----》<font color="red"><b>服务发现</b></font>----》<font color="red"><b>服务消费</b></font>(调用另外一个服务)----》<font color="red"><b>统一入口</b></font>(服务很多的时候需要有一个统一的入口)----》<font color="red"><b>配置管理</b></font>(管理每个服务的配置信息)----》<font color="red"><b>熔断机制</b></font>(保护系统避免崩溃)----》<font color="red"><b>自动扩展</b></font>(根据负荷自动扩展集群)</p><h2>微服务拆分的意义</h2><ul><li>易于实现</li><li>易于部署</li><li>易于维护</li><li>易于更新</li></ul><p>本天气预报系统可以拆分为：</p><ul><li>天气数据采集服务：数据采集和数据存储</li><li>天气预报服务：数据展示</li><li>天气数据API：数据查询</li><li>城市数据API：数据查询</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第五篇文章，在进行真正的业务拆分之前，我们来认识一下什么是SOA架构，什么是微服务。确定本系统拆分的几个部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>4.天气预报系统-前端样式</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/4.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E5%89%8D%E7%AB%AF%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/4.天气预报系统-前端样式/</id>
    <published>2019-02-21T03:26:55.091Z</published>
    <updated>2019-02-21T04:35:10.167Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第四篇文章，整一个前端的渲染引擎并且用bootstrap美化一下样式。</p><a id="more"></a><h2>Thymeleaf</h2><p>数据动态地渲染，这里采用<code>Thymeleaf</code>模板引擎。</p><p>首先是引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>后端的controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/report"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherReportController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IWeatherReportService weatherReportService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICityDataService cityDataService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/cityId/&#123;cityId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getReportByCityId</span><span class="params">(@PathVariable(<span class="string">"cityId"</span>)</span> String cityId, Model model) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Weather weather = weatherReportService.getDataByCityId(cityId);</span><br><span class="line">        model.addAttribute(<span class="string">"title"</span>,<span class="string">"蜗牛天气预报"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"cityId"</span>,cityId);</span><br><span class="line">        model.addAttribute(<span class="string">"cityList"</span>,cityDataService.listCity());</span><br><span class="line">        model.addAttribute(<span class="string">"report"</span>,weather);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"weather/report"</span>,<span class="string">"reportModel"</span>,model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端的简单页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>蜗牛天气预报系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.title&#125;"</span>&gt;</span>snail<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下拉框来选择城市--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"city : $&#123;reportModel.cityList&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:value</span>=<span class="string">"$&#123;city.cityId&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:text</span>=<span class="string">"$&#123;city.cityName&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:selected</span>=<span class="string">"$&#123;city.cityId eq reportModel.cityId &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--显示一下选择后的城市的名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.city&#125;"</span>&gt;</span>城市名称<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--显示这个城市的一些基本天气状况--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    空气质量指数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.aqi&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    当前温度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.wendu&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    温馨提示：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.ganmao&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--显示未来几天的天气状况--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"forecast : $&#123;reportModel.report.forecast&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.date&#125;"</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.type&#125;"</span>&gt;</span>天气类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.high&#125;"</span>&gt;</span>最高温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.low&#125;"</span>&gt;</span>最低温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.fengxiang&#125;"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><font color="red">注意</font></h2><p>这里修正一下了一下之前存在的一个小错误，就是请求天气的接口应该是：<a href="http://wthrcdn.etouch.cn/weather_mini?citykey=xxx" target="_blank" rel="noopener">http://wthrcdn.etouch.cn/weather_mini?citykey=xxx</a>  而我之前程序中写的是http://wthrcdn.etouch.cn/weather_mini?cityKey=xxx</p><p>就是这个citykey中的k，应该是小写。导致请求不到数据，前端直接报错。</p><h2>Bootstrap</h2><p>稍微美化一下页面。引入bootstrap。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>蜗牛天气预报系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container controls-pane"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.title&#125;"</span>&gt;</span>snail<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"custom-select"</span> <span class="attr">id</span>=<span class="string">"selectCityId"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"city : $&#123;reportModel.cityList&#125;"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:value</span>=<span class="string">"$&#123;city.cityId&#125;"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:text</span>=<span class="string">"$&#123;city.cityName&#125;"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:selected</span>=<span class="string">"$&#123;city.cityId eq reportModel.cityId &#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-success"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.city&#125;"</span>&gt;</span>城市名称<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            空气质量指数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.aqi&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            当前温度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.wendu&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            温馨提示：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;reportModel.report.ganmao&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card  border-info"</span> <span class="attr">th:each</span>=<span class="string">"forecast : $&#123;reportModel.report.forecast&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body text-info"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.date&#125;"</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text "</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.type&#125;"</span>&gt;</span>天气类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.high&#125;"</span>&gt;</span>最高温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.low&#125;"</span>&gt;</span>最低温度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;forecast.fengxiang&#125;"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/weather/report.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中下拉框选中向后端请求每个城市数据的js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#selectCityId"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> cityId = $(<span class="string">"#selectCityId"</span>).val();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'/report/cityId/'</span>+ cityId;</span><br><span class="line"><span class="built_in">window</span>.location.href = url;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后的效果：</p><p><img src="http://bloghello.oursnail.cn/%E8%9C%97%E7%89%9B%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%95%8C%E9%9D%A2.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第四篇文章，整一个前端的渲染引擎并且用bootstrap美化一下样式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>3.天气预报系统-天气数据同步</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/3.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/3.天气预报系统-天气数据同步/</id>
    <published>2019-02-21T03:26:45.737Z</published>
    <updated>2019-02-21T03:42:20.206Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第三篇文章，由于天气信息需要更新，所以我们需要一个定时器定时去获取一下最新的信息。由于本项目实现比较简单就可以用quartz来实现。</p><a id="more"></a><h2>quartz如何整合</h2><p>数据需要定时地刷新，不能等到用户来获取的时候才更新，这里用最常用的quartz定时器来实现。</p><p>首先时引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>下面定义一个执行的任务，先什么都不干，就打印一句话即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherDataSyncJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"天气数据同步任务开始"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面要定义配置类：</p><p>首先是要定义这个任务的细节：<code>JobDetail</code>，就是说我们配置的这个quartz里面的任务是谁？给他起个名字啥的。</p><p>后面个是定义触发器，决定了刚才定义的这个<code>JobDetail</code>多长时间执行一次。这里是为了模拟想过，定义了两秒就执行一次。那么我们启动项目后，看到的效果应该是每两秒打印一次日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个jobDetail,就是注册一个定时任务，具体如何执行时在WeatherDataSyncJob中定义</span></span><br><span class="line">    <span class="comment">//具体何时执行，是下面的Trigger定义</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">weatherDataSyncDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(WeatherDataSyncJob.class).</span><br><span class="line">                withIdentity(<span class="string">"WeatherDataSyncJob"</span>).</span><br><span class="line">                storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//触发器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">weatherDataSyncTrigger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder</span><br><span class="line">                    .simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>)<span class="comment">//两秒去自动执行一次</span></span><br><span class="line">                            .repeatForever();</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(weatherDataSyncDetail())</span><br><span class="line">                .withIdentity(<span class="string">"weatherDataSyncTrigger"</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>拉取城市信息</h2><p>网站： <a href="http://mobile.weather.com.cn/js/citylist.xml" target="_blank" rel="noopener">http://mobile.weather.com.cn/js/citylist.xml</a></p><p>比如我将江苏省的单独拿出来：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c</span> <span class="attr">c1</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190101"</span> <span class="attr">d2</span>=<span class="string">"南京"</span> <span class="attr">d3</span>=<span class="string">"nanjing"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190102"</span> <span class="attr">d2</span>=<span class="string">"溧水"</span> <span class="attr">d3</span>=<span class="string">"lishui"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190103"</span> <span class="attr">d2</span>=<span class="string">"高淳"</span> <span class="attr">d3</span>=<span class="string">"gaochun"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190104"</span> <span class="attr">d2</span>=<span class="string">"江宁"</span> <span class="attr">d3</span>=<span class="string">"jiangning"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190105"</span> <span class="attr">d2</span>=<span class="string">"六合"</span> <span class="attr">d3</span>=<span class="string">"luhe"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190106"</span> <span class="attr">d2</span>=<span class="string">"江浦"</span> <span class="attr">d3</span>=<span class="string">"jiangpu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190107"</span> <span class="attr">d2</span>=<span class="string">"浦口"</span> <span class="attr">d3</span>=<span class="string">"pukou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190201"</span> <span class="attr">d2</span>=<span class="string">"无锡"</span> <span class="attr">d3</span>=<span class="string">"wuxi"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190202"</span> <span class="attr">d2</span>=<span class="string">"江阴"</span> <span class="attr">d3</span>=<span class="string">"jiangyin"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190203"</span> <span class="attr">d2</span>=<span class="string">"宜兴"</span> <span class="attr">d3</span>=<span class="string">"yixing"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190204"</span> <span class="attr">d2</span>=<span class="string">"锡山"</span> <span class="attr">d3</span>=<span class="string">"xishan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190301"</span> <span class="attr">d2</span>=<span class="string">"镇江"</span> <span class="attr">d3</span>=<span class="string">"zhenjiang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190302"</span> <span class="attr">d2</span>=<span class="string">"丹阳"</span> <span class="attr">d3</span>=<span class="string">"danyang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190303"</span> <span class="attr">d2</span>=<span class="string">"扬中"</span> <span class="attr">d3</span>=<span class="string">"yangzhong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190304"</span> <span class="attr">d2</span>=<span class="string">"句容"</span> <span class="attr">d3</span>=<span class="string">"jurong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190305"</span> <span class="attr">d2</span>=<span class="string">"丹徒"</span> <span class="attr">d3</span>=<span class="string">"dantu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190401"</span> <span class="attr">d2</span>=<span class="string">"苏州"</span> <span class="attr">d3</span>=<span class="string">"suzhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190402"</span> <span class="attr">d2</span>=<span class="string">"常熟"</span> <span class="attr">d3</span>=<span class="string">"changshu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190403"</span> <span class="attr">d2</span>=<span class="string">"张家港"</span> <span class="attr">d3</span>=<span class="string">"zhangjiagang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190404"</span> <span class="attr">d2</span>=<span class="string">"昆山"</span> <span class="attr">d3</span>=<span class="string">"kunshan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190405"</span> <span class="attr">d2</span>=<span class="string">"吴中"</span> <span class="attr">d3</span>=<span class="string">"wuzhong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190407"</span> <span class="attr">d2</span>=<span class="string">"吴江"</span> <span class="attr">d3</span>=<span class="string">"wujiang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190408"</span> <span class="attr">d2</span>=<span class="string">"太仓"</span> <span class="attr">d3</span>=<span class="string">"taicang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190501"</span> <span class="attr">d2</span>=<span class="string">"南通"</span> <span class="attr">d3</span>=<span class="string">"nantong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190502"</span> <span class="attr">d2</span>=<span class="string">"海安"</span> <span class="attr">d3</span>=<span class="string">"haian"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190503"</span> <span class="attr">d2</span>=<span class="string">"如皋"</span> <span class="attr">d3</span>=<span class="string">"rugao"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190504"</span> <span class="attr">d2</span>=<span class="string">"如东"</span> <span class="attr">d3</span>=<span class="string">"rudong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190507"</span> <span class="attr">d2</span>=<span class="string">"启东"</span> <span class="attr">d3</span>=<span class="string">"qidong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190508"</span> <span class="attr">d2</span>=<span class="string">"海门"</span> <span class="attr">d3</span>=<span class="string">"haimen"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190509"</span> <span class="attr">d2</span>=<span class="string">"通州"</span> <span class="attr">d3</span>=<span class="string">"tongzhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190601"</span> <span class="attr">d2</span>=<span class="string">"扬州"</span> <span class="attr">d3</span>=<span class="string">"yangzhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190602"</span> <span class="attr">d2</span>=<span class="string">"宝应"</span> <span class="attr">d3</span>=<span class="string">"baoying"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190603"</span> <span class="attr">d2</span>=<span class="string">"仪征"</span> <span class="attr">d3</span>=<span class="string">"yizheng"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190604"</span> <span class="attr">d2</span>=<span class="string">"高邮"</span> <span class="attr">d3</span>=<span class="string">"gaoyou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190605"</span> <span class="attr">d2</span>=<span class="string">"江都"</span> <span class="attr">d3</span>=<span class="string">"jiangdu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190606"</span> <span class="attr">d2</span>=<span class="string">"邗江"</span> <span class="attr">d3</span>=<span class="string">"hanjiang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190701"</span> <span class="attr">d2</span>=<span class="string">"盐城"</span> <span class="attr">d3</span>=<span class="string">"yancheng"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190702"</span> <span class="attr">d2</span>=<span class="string">"响水"</span> <span class="attr">d3</span>=<span class="string">"xiangshui"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190703"</span> <span class="attr">d2</span>=<span class="string">"滨海"</span> <span class="attr">d3</span>=<span class="string">"binhai"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190704"</span> <span class="attr">d2</span>=<span class="string">"阜宁"</span> <span class="attr">d3</span>=<span class="string">"funing"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190705"</span> <span class="attr">d2</span>=<span class="string">"射阳"</span> <span class="attr">d3</span>=<span class="string">"sheyang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190706"</span> <span class="attr">d2</span>=<span class="string">"建湖"</span> <span class="attr">d3</span>=<span class="string">"jianhu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190707"</span> <span class="attr">d2</span>=<span class="string">"东台"</span> <span class="attr">d3</span>=<span class="string">"dongtai"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190708"</span> <span class="attr">d2</span>=<span class="string">"大丰"</span> <span class="attr">d3</span>=<span class="string">"dafeng"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190709"</span> <span class="attr">d2</span>=<span class="string">"盐都"</span> <span class="attr">d3</span>=<span class="string">"yandu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190801"</span> <span class="attr">d2</span>=<span class="string">"徐州"</span> <span class="attr">d3</span>=<span class="string">"xuzhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190802"</span> <span class="attr">d2</span>=<span class="string">"铜山"</span> <span class="attr">d3</span>=<span class="string">"tongshan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190803"</span> <span class="attr">d2</span>=<span class="string">"丰县"</span> <span class="attr">d3</span>=<span class="string">"fengxian"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190804"</span> <span class="attr">d2</span>=<span class="string">"沛县"</span> <span class="attr">d3</span>=<span class="string">"peixian"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190805"</span> <span class="attr">d2</span>=<span class="string">"邳州"</span> <span class="attr">d3</span>=<span class="string">"pizhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190806"</span> <span class="attr">d2</span>=<span class="string">"睢宁"</span> <span class="attr">d3</span>=<span class="string">"suining"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190807"</span> <span class="attr">d2</span>=<span class="string">"新沂"</span> <span class="attr">d3</span>=<span class="string">"xinyi"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190901"</span> <span class="attr">d2</span>=<span class="string">"淮安"</span> <span class="attr">d3</span>=<span class="string">"huaian"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190902"</span> <span class="attr">d2</span>=<span class="string">"金湖"</span> <span class="attr">d3</span>=<span class="string">"jinhu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190903"</span> <span class="attr">d2</span>=<span class="string">"盱眙"</span> <span class="attr">d3</span>=<span class="string">"xuyi"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190904"</span> <span class="attr">d2</span>=<span class="string">"洪泽"</span> <span class="attr">d3</span>=<span class="string">"hongze"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190905"</span> <span class="attr">d2</span>=<span class="string">"涟水"</span> <span class="attr">d3</span>=<span class="string">"lianshui"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190906"</span> <span class="attr">d2</span>=<span class="string">"淮阴区"</span> <span class="attr">d3</span>=<span class="string">"huaiyinqu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101190908"</span> <span class="attr">d2</span>=<span class="string">"淮安区"</span> <span class="attr">d3</span>=<span class="string">"huaianqu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191001"</span> <span class="attr">d2</span>=<span class="string">"连云港"</span> <span class="attr">d3</span>=<span class="string">"lianyungang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191002"</span> <span class="attr">d2</span>=<span class="string">"东海"</span> <span class="attr">d3</span>=<span class="string">"donghai"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191003"</span> <span class="attr">d2</span>=<span class="string">"赣榆"</span> <span class="attr">d3</span>=<span class="string">"ganyu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191004"</span> <span class="attr">d2</span>=<span class="string">"灌云"</span> <span class="attr">d3</span>=<span class="string">"guanyun"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191005"</span> <span class="attr">d2</span>=<span class="string">"灌南"</span> <span class="attr">d3</span>=<span class="string">"guannan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191101"</span> <span class="attr">d2</span>=<span class="string">"常州"</span> <span class="attr">d3</span>=<span class="string">"changzhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191102"</span> <span class="attr">d2</span>=<span class="string">"溧阳"</span> <span class="attr">d3</span>=<span class="string">"liyang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191103"</span> <span class="attr">d2</span>=<span class="string">"金坛"</span> <span class="attr">d3</span>=<span class="string">"jintan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191104"</span> <span class="attr">d2</span>=<span class="string">"武进"</span> <span class="attr">d3</span>=<span class="string">"wujin"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191201"</span> <span class="attr">d2</span>=<span class="string">"泰州"</span> <span class="attr">d3</span>=<span class="string">"taizhou"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191202"</span> <span class="attr">d2</span>=<span class="string">"兴化"</span> <span class="attr">d3</span>=<span class="string">"xinghua"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191203"</span> <span class="attr">d2</span>=<span class="string">"泰兴"</span> <span class="attr">d3</span>=<span class="string">"taixing"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191204"</span> <span class="attr">d2</span>=<span class="string">"姜堰"</span> <span class="attr">d3</span>=<span class="string">"jiangyan"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191205"</span> <span class="attr">d2</span>=<span class="string">"靖江"</span> <span class="attr">d3</span>=<span class="string">"jingjiang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191301"</span> <span class="attr">d2</span>=<span class="string">"宿迁"</span> <span class="attr">d3</span>=<span class="string">"suqian"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191302"</span> <span class="attr">d2</span>=<span class="string">"沭阳"</span> <span class="attr">d3</span>=<span class="string">"shuyang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191303"</span> <span class="attr">d2</span>=<span class="string">"泗阳"</span> <span class="attr">d3</span>=<span class="string">"siyang"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191304"</span> <span class="attr">d2</span>=<span class="string">"泗洪"</span> <span class="attr">d3</span>=<span class="string">"sihong"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">d</span> <span class="attr">d1</span>=<span class="string">"101191305"</span> <span class="attr">d2</span>=<span class="string">"宿豫"</span> <span class="attr">d3</span>=<span class="string">"suyu"</span> <span class="attr">d4</span>=<span class="string">"江苏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实思路很简单，就是从xml文件中获取所有的城市信息，转换为城市列表对象。然后遍历城市中的id，就可以根据id拼接url去直接去调用天气的接口去查询天气，然后重新覆盖redis中的天气数据即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherDataSyncJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IWeatherDataService weatherDataService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICityDataService cityDataService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"天气数据同步任务开始"</span>);</span><br><span class="line">        <span class="comment">//获取城市列表</span></span><br><span class="line">        List&lt;City&gt; cityList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cityList = cityDataService.listCity();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"获取城市列表失败！"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历城市id获取天气</span></span><br><span class="line">        <span class="keyword">for</span>(City city:cityList)&#123;</span><br><span class="line">            String cityId = city.getCityId();</span><br><span class="line">            log.info(<span class="string">"定时器更新了&#123;&#125;这个城市的天气信息"</span>, city.getCityName());</span><br><span class="line">            weatherDataService.syncDataByCityId(cityId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"天气数据同步任务结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体如何读取xml文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityDataServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICityDataService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">listCity</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读取xml文件</span></span><br><span class="line">        Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"citylist.xml"</span>);</span><br><span class="line">        <span class="comment">//读取文件的buffer流</span></span><br><span class="line">        BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(resource.getInputStream(),<span class="string">"UTF-8"</span>));</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((line = bf.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            buffer.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时数据已经读到buffer里了</span></span><br><span class="line">        bf.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//xml转换为java对象</span></span><br><span class="line">        CityList cityList = (CityList) XmlBuilder.xmlStrToObj(CityList.class,buffer.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cityList.getCityList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 【swg】.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/11/19 17:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span> xml转换为对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CONTACT</span> 317758022@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">xmlStrToObj</span><span class="params">(Class&lt;?&gt; clazz,String xmlStr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Object xmlObject = <span class="keyword">null</span>;</span><br><span class="line">        Reader reader = <span class="keyword">null</span>;</span><br><span class="line">        JAXBContext context = JAXBContext.newInstance(clazz);</span><br><span class="line">        <span class="comment">//xml转为对象的接口</span></span><br><span class="line">        Unmarshaller unmarshaller = context.createUnmarshaller();</span><br><span class="line"></span><br><span class="line">        reader = <span class="keyword">new</span> StringReader(xmlStr);</span><br><span class="line">        xmlObject = unmarshaller.unmarshal(reader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != reader)&#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xmlObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，解析xml我们用到了<code>JAXB</code>，他是什么呢？维基百科：</p><blockquote><p>JAXB（Java Architecture for XML Binding简称JAXB）允许Java开发人员将Java类映射为XML表示方式。JAXB提供两种主要特性：将一个Java对象序列化为XML，以及反向操作，将XML解析成Java对象。换句话说，JAXB允许以XML格式存储和读取数据，而不需要程序的类结构实现特定的读取XML和保存XML的代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第三篇文章，由于天气信息需要更新，所以我们需要一个定时器定时去获取一下最新的信息。由于本项目实现比较简单就可以用quartz来实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>2.天气预报系统-redis提升性能</title>
    <link href="http://yoursite.com/2019/02/21/weather-for-spring-cloud/2.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-redis%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2019/02/21/weather-for-spring-cloud/2.天气预报系统-redis提升性能/</id>
    <published>2019-02-21T03:26:36.808Z</published>
    <updated>2019-02-21T03:33:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>这是学习的第二篇文章，很显然，这个免费的接口能承受的并发是很低的，并且我们的服务器作为一个中转站去向这个接口请求数据也非常地耗时，于性能和稳定性都没有保障，所以我们需要redis作为缓存来提高性能。所以，我们需要用redis来重构一下。</p><a id="more"></a><p>先引入一下依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>思路很简单：缓存中有数据的时候，就直接从缓存中拿即可，若缓存中没有此数据，就去调用接口重新获取并且再存到缓存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIME_OUT = <span class="number">30</span>*<span class="number">60L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WeatherResponse <span class="title">doGetWeather</span><span class="params">(String uri)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先去缓存中查询，有就直接拿缓存中的数据，否则调用接口</span></span><br><span class="line">    String key = uri;</span><br><span class="line">    String strBody = <span class="keyword">null</span>;</span><br><span class="line">    WeatherResponse resp = <span class="keyword">null</span>;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    ValueOperations&lt;String,String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(stringRedisTemplate.hasKey(uri))&#123;</span><br><span class="line">        <span class="comment">//缓存有数据</span></span><br><span class="line">        log.info(<span class="string">"Redis has data!"</span>);</span><br><span class="line">        strBody = ops.get(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//缓存没有数据</span></span><br><span class="line">        log.info(<span class="string">"Redis don't thas data!"</span>);</span><br><span class="line">        ResponseEntity&lt;String&gt; resString = restTemplate.getForEntity(uri,String.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(resString.getStatusCodeValue() == <span class="number">200</span>) &#123;</span><br><span class="line">            strBody = resString.getBody();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据写入缓存</span></span><br><span class="line">        ops.set(key,strBody,TIME_OUT, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resp = mapper.readValue(strBody,WeatherResponse.class);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        log.error(<span class="string">"Error!"</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始可以将过期时间缩短一点，这里redis直接启动即可，默认端口是6379.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是学习的第二篇文章，很显然，这个免费的接口能承受的并发是很低的，并且我们的服务器作为一个中转站去向这个接口请求数据也非常地耗时，于性能和稳定性都没有保障，所以我们需要redis作为缓存来提高性能。所以，我们需要用redis来重构一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="天气项目入门微服务" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%B0%94%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
