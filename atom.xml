<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fossi</title>
  
  <subtitle>学习技术一口吃不成胖子，慢慢走，每天只要进步一丢丢！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-17T02:44:13.056Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fossi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10-用户下单</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/10-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/10-用户下单/</id>
    <published>2019-04-17T02:42:12.513Z</published>
    <updated>2019-04-17T02:44:13.056Z</updated>
    
    <content type="html"><![CDATA[<p>又到了订单模块，这里直接将购物车这一块省略，假设用户已经在购物车选了很多商品之后，现在开始准备下订单。</p><p>我们知道，在库存服务中，我们已经将库存充足的商品记录在<code>Map</code>中，并且将每个商品库存扣减状态和锁定库存扣减状态都记录下来了。</p><p>在我们的下单服务中，最先想到的是为订单号生成全局唯一的ID，这里利用之前提到过的雪花算法来实现。具体的实现过程是从<code>ShardingJDBC</code>中的ID生成复制过来的：</p><p><img src="http://bloghello.oursnail.cn/mama10-1.png" alt="image"></p><h2>一、全局唯一ID生成服务</h2><p>新建<code>mama-buy-keygen-service</code>工程：</p><p><img src="http://bloghello.oursnail.cn/mama10-2.png" alt="image"></p><p>参照上一个写法即可，注入自己的zk地址。</p><p>要写一个接口供其他的服务调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyGeneratorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"snowFlakeKeyGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> KeyGenerator keyGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/keygen"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(keyGenerator.generateKey().longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>二、购物车、订单表结构分析</h2><p><img src="http://bloghello.oursnail.cn/mama10-3.png" alt="image"></p><p>其实这个关系是很明朗的了，但是我们要注意一点就是，我们知道，扣减库存服务，如果发现库存不足了或者其他问题，那么返回的是<code>&lt;skuId,-1&gt;</code>，如果扣减成功，返回的是<code>&lt;skuId,1&gt;</code>。用户在下订单的时候，可能有部分商品库存已经不足，但是又不能影响其他库存足的商品导致整个订单出问题，所以在生成订单的时候，需要将库存不足的给移除出订单详情表，价格肯定是不能算进去的，并且要提示用户这个商品库存已经不足，无法购买，继续支付的话，只能支付其他库存充足的产品。</p><p>Ok，对于关系和注意点说明清楚之后，下面就要进行实际的编码了。</p><h2>三、创建订单逻辑</h2><p>我们首先注意到订单有几种状态，我们这里简化一下状态，用枚举来表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TradeStatus &#123;</span><br><span class="line"></span><br><span class="line">    WAITING_PAY(<span class="string">"等待支付"</span>,(<span class="keyword">byte</span>)<span class="number">1</span>),</span><br><span class="line">    TRADE_CANCEL(<span class="string">"订单取消"</span>,(<span class="keyword">byte</span>)<span class="number">2</span>),</span><br><span class="line">    TRADE_PAIED(<span class="string">"订单已支付"</span>,(<span class="keyword">byte</span>)<span class="number">3</span>),</span><br><span class="line">    TRADE_CLOSE(<span class="string">"订单关闭"</span>,(<span class="keyword">byte</span>)<span class="number">4</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    TradeStatus(String desc, <span class="keyword">byte</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">byte</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略get和set方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层去创建订单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;TradeItem&gt;&gt; createOrder(<span class="meta">@RequestBody</span> List&lt;TradeItem&gt; tradeItemList)&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;List&lt;TradeItem&gt;&gt; result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"订单提交成功"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;TradeItem&gt; tradeItemSuccResult =tradeService.createOrder(tradeItemList);</span><br><span class="line">    result.setData(tradeItemSuccResult);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来到我们的service层，进行创建订单的细节。思路为：</p><ul><li>第一步：为订单生成唯一订单号（已经在ID生成服务中解决，调用接口即可）</li><li>第二步：构建扣减库存用到的reduceList（遍历传进来的<code>tradeItemList</code>接口）</li><li>第三步：扣减完库存，获取到是<code>Map&lt;skuID,status&gt;</code>，status为-1说明库存不足，无法购买；为1说明库存充足，扣减成功；</li><li>第四步：根据<code>skuID</code>可以拿到<code>skuList</code>，并且遍历<code>Map&lt;skuID,status&gt;</code>根据status将扣减失败的商品移除出<code>tradeItemList</code></li><li>第五步：创建订单主表</li><li>第六步：遍历处理完后的<code>tradeItemList</code>配合<code>skuList</code>写入订单详情表</li><li>第七步：返回<code>tradeItemList</code>结束。</li></ul><p>关于调用ID生成服务，那就需要用到<code>Feign</code>了，首先在引入依赖后在主函数上声明注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p>然后找到对应的服务名+接口就可以去调用了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"key-generator"</span>,fallback = KeyGeneratorServiceFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyGenServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/keygen"</span>)</span><br><span class="line">    <span class="function">String <span class="title">keyGenerator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取不到的时候就返回null</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyGeneratorServiceFallback</span> <span class="keyword">implements</span> <span class="title">KeyGenServiceClient</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的service层逻辑代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TradeItem&gt; <span class="title">createOrder</span><span class="params">(List&lt;TradeItem&gt; tradeItemList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到唯一ID</span></span><br><span class="line">    String orderNo = keyGenServiceClient.keyGenerator();</span><br><span class="line">    Long tradeNo = Long.parseLong(orderNo);</span><br><span class="line">    Long userId = tradeItemList.get(<span class="number">0</span>).getUserUuid();</span><br><span class="line">    <span class="comment">//构建扣减库存用到的reduceList</span></span><br><span class="line">    List&lt;StockReduce&gt; stockReduceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    tradeItemList.stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                StockReduce stockReduce = <span class="keyword">new</span> StockReduce();</span><br><span class="line">                stockReduce.setOrderNo(tradeNo);</span><br><span class="line">                stockReduce.setSkuId(param.getSkuId());</span><br><span class="line">                stockReduce.setReduceCount(-param.getQuantity());</span><br><span class="line"></span><br><span class="line">                stockReduceList.add(stockReduce);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//扣减库存,只是从redis中预减库存和写入流水表，真正的库存表是在定时任务中用流水表去同步</span></span><br><span class="line">    ApiResult&lt;Map&lt;Long,Integer&gt;&gt; stockResult =  stockServiceClient.reduceStock(stockReduceList);</span><br><span class="line">    Map&lt;Long,Integer&gt; stockResultMap = stockResult.getData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询相关SKU的属性</span></span><br><span class="line">    List&lt;ProductSku&gt; skuResult = productSkuMapper.selectBySkuIdList(stockResultMap.keySet());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断库存逻辑  插入订单</span></span><br><span class="line">    Trade trade = <span class="keyword">new</span> Trade();</span><br><span class="line">    trade.setTradeNo(tradeNo);</span><br><span class="line">    trade.setStatus(TradeStatus.WAITING_PAY.getValue());</span><br><span class="line">    trade.setUserUuid(userId);</span><br><span class="line">    tradeMapper.insertSelective(trade);</span><br><span class="line">    <span class="comment">//将扣减库存失败的商品选出来，然后去tradeItems中去移除</span></span><br><span class="line">    stockResultMap.keySet().stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                <span class="comment">//扣库存失败的移除</span></span><br><span class="line">                <span class="keyword">if</span>(stockResultMap.get(param)==-<span class="number">1</span>)&#123;</span><br><span class="line">                    TradeItem tradeItem =  tradeItemList.stream().filter(</span><br><span class="line">                            item-&gt;item.getSkuId()==param</span><br><span class="line">                    ).findFirst()</span><br><span class="line">                            .get();</span><br><span class="line">                    tradeItemList.remove(tradeItem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//计算商品价格等信息</span></span><br><span class="line">    tradeItemList.stream().forEach(</span><br><span class="line">            param-&gt;&#123;</span><br><span class="line">                ProductSku sku = skuResult.stream().filter(</span><br><span class="line">                        skuParam-&gt;param.getSkuId()==skuParam.getId()</span><br><span class="line">                ).findFirst()</span><br><span class="line">                        .get();</span><br><span class="line">                param.setTradeNo(tradeNo);</span><br><span class="line">                param.setSkuImageUrl(sku.getImgUrl());</span><br><span class="line">                param.setSkuName(sku.getSkuName());</span><br><span class="line">                param.setCurrentPrice(sku.getSkuPrice());</span><br><span class="line">                param.setTotalPrice(sku.getSkuPrice().multiply(<span class="keyword">new</span> BigDecimal(param.getQuantity())));</span><br><span class="line"></span><br><span class="line">                tradeItemMapper.insertSelective(param);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tradeItemList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>四、创建订单可能存在的问题</h2><p>这个时候，会存在一个问题，如果在redis扣减库存成功之后，后面的数据库插入抛出异常甚至出现错误，那么这个时候，订单没有存进库里，但是redis已经扣减库存成功。由于事务只能保证这里的数据库回滚，但是redis是不会回滚的，就会造成数据的不一致，这里就涉及到了分布式事务，该如何解决呢？</p><p>如果是发生了跨库，还涉及redis等情况，这里可能需要分布式事务来保证，但是这里暂时还用不到，因为这里比较特殊，虽然我库存已经扣了，但是订单没有入库，由于是这边的数据库出问题，用户那边肯定是报错的，然后用户肯定是无法进行支付的，如果还是想买，那么就重新下订单，说不定下次就可以成功，只是流水表中多了一条废弃记录而已和redis中扣了此次废弃记录对应的库存。</p><p>那么，既然还没有支付，那么这个没用的订单只是存在于流水表中。那么，我只需要有一个定时任务，去定时扫描这个流水表，如果发现这个订单已经过期了（或者可以拿着这个订单号去订单表去查，如果连记录都没有，那么说明是下单失败这种场景，直接释放锁定库存即可），这个时候锁定库存就会归位，达到了最终一致性。</p><p>定时扫描是一种比较有效的方法，但是根据其定时间隔，对于订单超时而言，可能会有一定时间的延迟才可能将其库存归位。</p><p>这里还有一种比较及时的方式是，<code>orderNo</code>为key，设置过期时间，比如15分钟，一旦到了15分钟，说明这个订单超时了（如果在超时时间内正常支付了，那么就将这个key删除掉），那么redis就进行一个事件通知，自动告诉程序：这个订单超时了（超时这里就会有两种情况：用户下单成功未支付超时；用户下单失败，订单表压根就没有这条记录，但是已经写到了流水表中并且也扣了库存这种异常情况），那么我就可以根据这个信息，获得超时的那个订单号，如果订单表存在，我将其状态进行更新为“订单超时未支付”状态；如果订单表不存在，啥都不用做或者删除流水表即可；最后，我就可以放心地释放锁定库存（更新redis，更新库存表）。</p><p>要达到redis key过期事件通知的效果，需要现在redis中配置一下过期事件：</p><p><img src="http://bloghello.oursnail.cn/mama10-4.png" alt="image"></p><p>在创建完订单之后设置redis订单号过期:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置redis 订单号过期</span></span><br><span class="line">redisTemplate.opsForValue().set(tradeNo.toString(),tradeNo.toString(),<span class="number">20</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>下面要监听一个事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderKeyExpriedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">configRedisMessageListenerContainer</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisMessageListenerContainer listenerContainer = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        listenerContainer.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        listenerContainer.addMessageListener((message,listener)-&gt;&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//处理key过期事件逻辑，new String(message.getBody())就是设置进去的orderNo</span></span><br><span class="line">            System.out.println(<span class="string">"------redis过期事件"</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="keyword">new</span> PatternTopic(<span class="string">"__keyevent@*__:expired"</span>));</span><br><span class="line">        <span class="keyword">return</span> listenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于网络抖动，可能会出现各种情况，导致这种事件发不出来或者监听不到，所以我们还要用清点库存定时任务来辅助，自动再去扫描一遍流水表或者订单表，看看是不是还有过期没有释放的记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又到了订单模块，这里直接将购物车这一块省略，假设用户已经在购物车选了很多商品之后，现在开始准备下订单。&lt;/p&gt;
&lt;p&gt;我们知道，在库存服务中，我们已经将库存充足的商品记录在&lt;code&gt;Map&lt;/code&gt;中，并且将每个商品库存扣减状态和锁定库存扣减状态都记录下来了。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>09-分布式定时任务</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/09-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/09-分布式定时任务/</id>
    <published>2019-04-17T02:41:59.439Z</published>
    <updated>2019-04-17T02:44:02.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bloghello.oursnail.cn/mama9-3.png" alt="image"></p><p>我们上节进行了库存的扣减，解决了并发扣减库存问题和接口幂等性，操作在库存流水表中进行了记录，下面需要一个定时任务来定时将流水表中的数据同步到库存表中。</p><p>关于定时调度，我们接触过<code>quartz</code>，在单机中应用是完全没有问题的。虽然<code>quartz</code>也给我们提供了集群版本，但是是一种依赖数据库的解决方案。</p><p>本节首先尝试整合<code>Elastic-Job</code>，目标是让其每5秒钟打印一句话，所以也算是<code>Elastic-Job</code>入门demo。</p><p>根据官网整合<a href="https://github.com/elasticjob/elastic-job-example/tree/master/elastic-job-example-lite-springboot" target="_blank" rel="noopener">spring-boot的demo</a>的pom文件中，我们就可以大概知道要导入什么包。</p><h2>一、相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--elastci job核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--操作zk节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...省略其他的spring-boot等依赖</span><br></pre></td></tr></table></figure><h2>二、配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brokers: $&#123;kafka.brokers.host&#125;</span><br><span class="line">          zk-nodes: $&#123;zookeeper.host&#125;</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">        input:</span><br><span class="line">          destination: dis-transation</span><br><span class="line">          group: point-group</span><br><span class="line">  &lt;!--以上是关于spring config的内容，可以删除--&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--自定义数据源--&gt;</span><br><span class="line">  datasource:</span><br><span class="line">    stock:</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/mama-buy-stock</span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line"></span><br><span class="line"># 因为依赖于ZK,所以需要确定zk位置；下面是确定定时时间、分片数</span><br><span class="line">regCenter:</span><br><span class="line">  serverList: $&#123;zookeeper.host&#125;</span><br><span class="line">  namespace: elastic-job-lite-springboot</span><br><span class="line">stockJob:</span><br><span class="line">  cron: 0/5 * * * * ?</span><br><span class="line">  shardingTotalCount: 1 #只分一片</span><br><span class="line">  shardingItemParameters: 0=nanjing</span><br></pre></td></tr></table></figure><p>首先，按照以前的步骤创建<code>mama-buy-schedule-service</code>这个工程。</p><p><img src="http://bloghello.oursnail.cn/mama9-1.png" alt="image"></p><h2>三、代码层面</h2><h3>1，按照官方的demo，首先关闭自动注入数据源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;</span><br><span class="line">        DataSourceAutoConfiguration.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MamaBuyScheduleServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MamaBuyScheduleServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>2，自定义数据源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"stockDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.stock"</span>)<span class="comment">//根据配置文件前缀创建数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">stockDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>3，创建<code>sqlSessionFactory</code>和<code>SqlSessionTemplate</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"com.njupt.swg.mamabuyscheduleservice.stock.dao"</span>&#125;,sqlSessionFactoryRef = <span class="string">"stockSqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"stockDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource stockDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stockSqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">stockSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        factoryBean.setDataSource(stockDataSource);</span><br><span class="line">        <span class="keyword">return</span>  factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"stockSqlSessionTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">stockSqlSessionTemplate</span> <span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionTemplate template = <span class="keyword">new</span> SqlSessionTemplate(stockSqlSessionFactory());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>4，注册到ZK上：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"'$&#123;regCenter.serverList&#125;'.length() &gt; 0"</span>)<span class="comment">//注解确保有zk，没有就报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRegistryCenterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperRegistryCenter <span class="title">regCenter</span><span class="params">(@Value(<span class="string">"$&#123;regCenter.serverList&#125;"</span>)</span> <span class="keyword">final</span> String serverList, @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;regCenter.namespace&#125;"</span>)</span> <span class="keyword">final</span> String namespace) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistryCenter(<span class="keyword">new</span> ZookeeperConfiguration(serverList, namespace));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>5，定义任务：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockSimpleJob</span> <span class="keyword">implements</span> <span class="title">SimpleJob</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"------Thread ID: %s, 任务总片数: %s, 当前分片项: %s"</span>,</span><br><span class="line">                Thread.currentThread().getId(), shardingContext.getShardingTotalCount(), shardingContext.getShardingItem()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实际开发中，有了任务总片数和当前分片项，就可以对任务进行分片执行了</span></span><br><span class="line"><span class="comment">         * 比如 SELECT * FROM user WHERE status = 0 AND MOD(id, shardingTotalCount) = shardingItem</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>6，任务配置类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockJobConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleJob <span class="title">stockJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StockSimpleJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--直接copy--&gt;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobScheduler <span class="title">simpleJobScheduler</span><span class="params">(<span class="keyword">final</span> SimpleJob simpleJob, @Value(<span class="string">"$&#123;stockJob.cron&#125;"</span>)</span> <span class="keyword">final</span> String cron, @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;stockJob.shardingTotalCount&#125;"</span>)</span> <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,</span></span><br><span class="line"><span class="function">                                           @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;stockJob.shardingItemParameters&#125;"</span>)</span> <span class="keyword">final</span> String shardingItemParameters) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;!--直接copy--&gt;</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@Description</span>  任务配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LiteJobConfiguration <span class="title">getLiteJobConfiguration</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends SimpleJob&gt; jobClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> String cron,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         <span class="keyword">final</span> String shardingItemParameters)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LiteJobConfiguration</span><br><span class="line">                .newBuilder(</span><br><span class="line">                        <span class="keyword">new</span> SimpleJobConfiguration(</span><br><span class="line">                                JobCoreConfiguration.newBuilder(</span><br><span class="line">                                        jobClass.getName(),cron,shardingTotalCount)</span><br><span class="line">                                        .shardingItemParameters(shardingItemParameters)</span><br><span class="line">                                        .build()</span><br><span class="line">                                ,jobClass.getCanonicalName()</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">                .overwrite(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/mama9-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/mama9-3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们上节进行了库存的扣减，解决了并发扣减库存问题和接口幂等性，操作在库存流水表中进行了记录，下面需要一个定时任务来定时将流水表中的
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>08-库存扣减问题</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/08-%E5%BA%93%E5%AD%98%E6%89%A3%E5%87%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/08-库存扣减问题/</id>
    <published>2019-04-17T02:41:51.135Z</published>
    <updated>2019-04-17T02:43:49.811Z</updated>
    
    <content type="html"><![CDATA[<h2>一、扣减库存问题分析</h2><p>在提交订单的时候，要扣减库存，对于sql，是这么写的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>首先这条sql存在超卖问题，很有可能会减成负数。可能会改成如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span> <span class="keyword">and</span> stock &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这样好像解决了超卖问题。但是引入了新的问题。由于库存牵涉进货、补货等系统，所以是个独立的服务。</p><p>并且，比如我是通过MQ去通知库存进行扣减库存，但是由于网络抖动，请求扣减库存没有结果，这个时候可能需要进行重试。重试之后，可能成功了，这个时候，有可能这两次都成功了。那么，一个用户买一样东西，但是库存扣了两遍。这就是幂等。如果不做幂等处理，重试会出现上述这种致命问题。</p><p>那么如何做到幂等呢？</p><p>实际上就是追求数据一致性。那么就可以考虑锁来保证，比如我这里用乐观锁来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stock,<span class="keyword">version</span> <span class="keyword">from</span> t_stock;</span><br><span class="line">if(stock &gt; 用户购买数量)</span><br><span class="line">    <span class="keyword">update</span> t_stcok <span class="keyword">set</span> stock = stock<span class="number">-2</span> <span class="keyword">where</span> sku_id = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">version</span> = last_version</span><br></pre></td></tr></table></figure><p>但是，一旦出现并发，那么可能这个用户是执行update失败的，所以还需要去重试(guava retry或者spring retry都可以优雅地实现重试)，直到成功或者库存已经不足。</p><p>那么，在少量并发的情况下，可以考虑乐观锁，要不然会大量失败，此时需要用悲观锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_stock <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">下面执行<span class="keyword">update</span>操作。。。</span><br></pre></td></tr></table></figure><p>在一个事务内，第一句为<code>select for update</code>，那么这一行数据就会被本线程锁住，整个事务执行完才能允许其他线程进来。</p><p>存在的问题：一个线程锁住这行数据，那么其他线程都要等待，效率很低。</p><p>那么，如何保证数据一致性，还可以提高效率呢？</p><p>对于扣减库存，往往是先在redis中进行扣减库存。redis是单线程，是高速串行执行，不存在并发问题。</p><p>如果是单机redis，可以在同一个事务中保证一次性执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch stock</span><br><span class="line">multi</span><br><span class="line">if stock &gt; count</span><br><span class="line">    stock = stock - count;</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/mama8-1.png" alt="image"></p><p>但是不能在集群中用（分布在不同节点上时），所以用watch不通用。</p><p>redis都是原子操作，比如自增:incrby，用这个就可以判断库存是否够。就是所谓的redis预减库存。</p><p>但是在实际中，库存表里有两个字段：库存和锁定库存。</p><p>锁定库存是表示多少用户真正下单了，但是还没有支付。锁定库存+库存=总库存，等用户真正支付之后，就可以将锁定库存减掉。那么，此时，redis中需要存库存和锁定库存这两个值，上面单一的原子操作就不行了。</p><p>解决方案：redis+lua</p><p>为什么要用lua呢？可以用lua将一系列操作封装起来执行，输入自己的参数即可。lua脚本在redis中执行是串行的、原子性的。</p><p>OK，下面就实战一波：根据skuId查询缓存中的库存值。</p><h2>二、查询库存（设置库存）</h2><p>首先，我们要明确一点，redis中的库存初始值是由后台的系统人工提前配置好的，在进行商品销售时（用户下单时），直接从redis中先进行库存的扣减。</p><p>这里呢，我们没有进行初始化，而是在程序中进行判断：如果redis已经有了这个库存值，就将他查询出来返回；否则，就去数据库查询，然后对redis进行初始化。</p><p>这里的一个问题是：如果存在并发问题，但是我们初始化两个值（库存值和库存锁定值），这里采用lua脚本，在lua脚本中完成初始化，并且对于两个用户同时进行初始化库存的问题，可以在lua中进行判断,因为redis是单线程，lua也是单线程，不用担心会同时初始化两次。</p><p>下面首先写一个接口，根据skuid查询库存(库存和锁定库存)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/query/&#123;skuId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult&lt;Stock&gt; <span class="title">queryStock</span><span class="params">(@PathVariable <span class="keyword">long</span> skuId)</span></span>&#123;</span><br><span class="line">    ApiResult&lt;Stock&gt;  result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"库存查询成功"</span>);</span><br><span class="line">    Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">    stock.setSkuId(skuId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> stockCount = stockService.queryStock(skuId);</span><br><span class="line"></span><br><span class="line">    stock.setStock(stockCount);</span><br><span class="line">    result.setData(stock);</span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryStock</span><span class="params">(<span class="keyword">long</span> skuId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先查redis</span></span><br><span class="line">    Stock stock ;</span><br><span class="line">    String stockKey = Constants.CACHE_PRODUCT_STOCK+<span class="string">":"</span>+skuId;</span><br><span class="line">    String stockLockKey = Constants.CACHE_PRODUCT_STOCK_LOCK+<span class="string">":"</span>+skuId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只需要查询一个即可，比如我这里只查询库存就行</span></span><br><span class="line">    Object stockObj = redisTemplate.opsForValue().get(stockKey);</span><br><span class="line">    Integer stockInRedis = <span class="keyword">null</span> ;</span><br><span class="line">    <span class="keyword">if</span>(stockObj!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        stockInRedis = Integer.valueOf(stockObj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有，那么我就需要将数据库中的数据初始化到redis中</span></span><br><span class="line">    <span class="keyword">if</span>(stockInRedis==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//去数据库查询 然后对redis进行初始化</span></span><br><span class="line">        stock = stockMapper.selectBySkuId(skuId);</span><br><span class="line">        <span class="comment">//两个key和两个库存值通过lua脚本塞到redis中</span></span><br><span class="line">        <span class="comment">//这里如果发生两个用户并发初始化redis，脚本中会进行判断，如果已经初始化了，脚本就会停止执行</span></span><br><span class="line">        <span class="comment">// 设置库存不应该在这配置，应该是后台管理系统进行设置，所以正常情况下，这里redis中应该是必然存在的</span></span><br><span class="line">        <span class="comment">//如果是在后台配置，就没有必要这么复杂了</span></span><br><span class="line">        redisUtils.skuStockInit(stockKey,stockLockKey,stock.getStock().toString(),stock.getLockStock().toString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stockInRedis;<span class="comment">//缓存中有就直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//缓存结果可能会返回设置不成功，所以还是返回数据库查询结果</span></span><br><span class="line">    <span class="keyword">return</span> stock.getStock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个工具类为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看redis是否已经初始化好库存初始值，没有就初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOCK_CACHE_LUA =</span><br><span class="line">        <span class="string">"local stock = KEYS[1] "</span> +</span><br><span class="line">                <span class="string">"local stock_lock = KEYS[2] "</span> +</span><br><span class="line">                <span class="string">"local stock_val = tonumber(ARGV[1]) "</span> +</span><br><span class="line">                <span class="string">"local stock_lock_val = tonumber(ARGV[2]) "</span> +</span><br><span class="line">                <span class="string">"local is_exists = redis.call(\"EXISTS\", stock) "</span> +</span><br><span class="line">                <span class="string">"if is_exists == 1  then "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"else  "</span> +</span><br><span class="line">                <span class="string">"   redis.call(\"SET\", stock, stock_val) "</span> +</span><br><span class="line">                <span class="string">"   redis.call(\"SET\", stock_lock, stock_lock_val) "</span> +</span><br><span class="line">                <span class="string">"   return 1 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 缓存sku库存 以及锁定库存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">skuStockInit</span><span class="params">(String stockKey,String stockLockKey,String stock,String stockLock)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用jedis去执行lua脚本 输入的参数要注意顺序 都是写死的 第一组是key，第二组是stock</span></span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(STOCK_CACHE_LUA, Collections.unmodifiableList(Arrays.asList(stockKey,stockLockKey))</span><br><span class="line">                ,Collections.unmodifiableList(Arrays.asList(stock, stockLock)));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (EXCUTE_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于lua脚本进行稍微的解释一下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//第一组数据是key数组；第二组数据是args数组，是与key数组对应的值，就是库存</span><br><span class="line">//我们这里第一组为[stockKey,stockLockKey],就是存在redis中的名字，这里是在service层中定义好了</span><br><span class="line">//第二组为[<span class="number">50</span>,<span class="number">0</span>]，这个值就是可以从数据库表t_stock中查询出来的</span><br><span class="line">//因为执行这段lua脚本的话，说明redis中没有缓存的数据，所以需要先查询数据库，然后将缓存设置好</span><br><span class="line">//lua中定义变量用<span class="keyword">local</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> stock = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> stock_lock = KEYS[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">local</span> stock_val = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> stock_lock_val = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">//再查询一遍缓存是否存在，防止两个线程同时进来设置缓存</span><br><span class="line">//存在就不用设置缓存了，否则就设置缓存</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> is_exists = redis.call(<span class="string">"EXISTS"</span>, stock)</span><br><span class="line"><span class="keyword">if</span> is_exists == <span class="number">1</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">"SET"</span>, stock, stock_val)</span><br><span class="line">    redis.call(<span class="string">"SET"</span>, stock_lock, stock_lock_val)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>那么，启动工程<code>mama-buy-stock</code>：假如我去查询skuId=1的商品：</p><p><img src="http://bloghello.oursnail.cn/mama8-2.png" alt="image"></p><p>第一次库存不存在，那么就会去查询数据库：</p><p><img src="http://bloghello.oursnail.cn/mama8-3.png" alt="image"></p><p>我们再来看看redis中的数据：</p><p><img src="http://bloghello.oursnail.cn/mama8-4.png" alt="image"></p><h2>三、扣减库存</h2><p>下面来看看扣减库存是如何实现的。因为提交订单后，往往是不止一件商品的，往往购物车内有很多件商品，同时过来，假设有五件商品，但是其中只有一件暂时没有库存了，那么我还是希望其他的四件商品能够卖出去，只是没有库存的商品就不算钱了。所以扣减库存用一个map来装，即<code>Map&lt;skuId,count&gt;</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/reduce"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Map&lt;Long,Integer&gt;&gt; reduceStock(<span class="meta">@RequestBody</span> List&lt;StockReduce&gt; stockReduceList)&#123;</span><br><span class="line">    ApiResult result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"库存扣减成功"</span>);</span><br><span class="line">    Map&lt;Long,Integer&gt; resultMap =  stockService.reduceStock(stockReduceList);</span><br><span class="line">    result.setData(resultMap);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Long, Integer&gt; <span class="title">reduceStock</span><span class="params">(List&lt;StockReduce&gt; stockReduceList)</span> </span>&#123;</span><br><span class="line">    Map&lt;Long, Integer&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历去减redis中库存，增加锁定库存</span></span><br><span class="line">    stockReduceList.stream().forEach(param -&gt; &#123;</span><br><span class="line">        String stockKey = Constants.CACHE_PRODUCT_STOCK+<span class="string">":"</span>+param.getSkuId();</span><br><span class="line">        String stockLockKey = Constants.CACHE_PRODUCT_STOCK_LOCK+<span class="string">":"</span>+param.getSkuId();</span><br><span class="line">        Object result = redisUtils.reduceStock(stockKey,</span><br><span class="line">                                               stockLockKey,</span><br><span class="line">                                               param.getReduceCount().toString(),<span class="comment">//incrby一个负数，就是减</span></span><br><span class="line">                                               String.valueOf(Math.abs(param.getReduceCount())));<span class="comment">//incrby一个正数，就是加</span></span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">instanceof</span> Long)&#123;</span><br><span class="line">            <span class="comment">//库存不存在或者不足 扣减失败 sku下单失败 记录下来</span></span><br><span class="line">            resultMap.put(param.getSkuId(),-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result <span class="keyword">instanceof</span> List)&#123;</span><br><span class="line">            <span class="comment">//扣减成功 记录扣减流水</span></span><br><span class="line">            List resultList =  ((List) result);</span><br><span class="line">            <span class="keyword">int</span> stockAftChange =  ((Long)resultList.get(<span class="number">0</span>)).intValue();</span><br><span class="line">            <span class="keyword">int</span> stockLockAftChange = ((Long) resultList.get(<span class="number">1</span>)).intValue();</span><br><span class="line">            StockFlow stockFlow = <span class="keyword">new</span> StockFlow();</span><br><span class="line">            stockFlow.setOrderNo(param.getOrderNo());</span><br><span class="line">            stockFlow.setSkuId(param.getSkuId());</span><br><span class="line">            stockFlow.setLockStockAfter(stockLockAftChange);</span><br><span class="line">            stockFlow.setLockStockBefore(stockLockAftChange+param.getReduceCount());</span><br><span class="line">            stockFlow.setLockStockChange(Math.abs(param.getReduceCount()));</span><br><span class="line">            stockFlow.setStockAfter(stockAftChange);</span><br><span class="line">            stockFlow.setStockBefore(stockAftChange+Math.abs(param.getReduceCount()));</span><br><span class="line">            stockFlow.setStockChange(param.getReduceCount());</span><br><span class="line">            stockFlowMapper.insertSelective(stockFlow);</span><br><span class="line">            resultMap.put(param.getSkuId(),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于redis的操作，基本与上一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>   扣减库存lua脚本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> 0  key不存在 错误   -1 库存不足  返回list  扣减成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOCK_REDUCE_LUA=</span><br><span class="line">        <span class="string">"local stock = KEYS[1]\n"</span> +</span><br><span class="line">                <span class="string">"local stock_lock = KEYS[2]\n"</span> +</span><br><span class="line">                <span class="string">"local stock_change = tonumber(ARGV[1])\n"</span> +</span><br><span class="line">                <span class="string">"local stock_lock_change = tonumber(ARGV[2])\n"</span> +</span><br><span class="line">                <span class="string">"local is_exists = redis.call(\"EXISTS\", stock)\n"</span> +</span><br><span class="line">                <span class="string">"if is_exists == 1 then\n"</span> +</span><br><span class="line">                <span class="string">"    local stockAftChange = redis.call(\"INCRBY\", stock,stock_change)\n"</span> +</span><br><span class="line">                <span class="string">"    if(stockAftChange&lt;0) then\n"</span> +</span><br><span class="line">                <span class="string">"        redis.call(\"DECRBY\", stock,stock_change)\n"</span> +</span><br><span class="line">                <span class="string">"        return -1\n"</span> +</span><br><span class="line">                <span class="string">"    else \n"</span> +</span><br><span class="line">                <span class="string">"        local stockLockAftChange = redis.call(\"INCRBY\", stock_lock,stock_lock_change)\n"</span> +</span><br><span class="line">                <span class="string">"        return &#123;stockAftChange,stockLockAftChange&#125;\n"</span> +</span><br><span class="line">                <span class="string">"    end "</span> +</span><br><span class="line">                <span class="string">"else \n"</span> +</span><br><span class="line">                <span class="string">"    return 0\n"</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">reduceStock</span><span class="params">(String stockKey,String stockLockKey,String stockChange,String stockLockChange)</span></span>&#123;</span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(STOCK_REDUCE_LUA, Collections.unmodifiableList(Arrays.asList(stockKey,stockLockKey))</span><br><span class="line">                ,Collections.unmodifiableList(Arrays.asList(stockChange, stockLockChange)));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，一旦数据库发生异常，那么就会回滚，但是redis中是无法回滚的。这个问题不用担心，因为数据库发生异常是及其严重的问题，是很少会发生的，一旦发生，只需要去这个流水的表中去查看情况，然后去执行脚本去初始化这个redis即可。所以是可以补救的。</p><p>但是接口的幂等性还没有做。重复尝试调用这个接口（通常是发生在MQ的失败重传机制，客户端的连续点击一般是可以避免的），可能会重复减redis库存并且重复地去插入流水记录。这个问题该如何解决呢？</p><h2>四、redis分布式锁来实现幂等性</h2><p>主流的方案，比如有用一张表来控制，比如以这个orderID为唯一主键，一旦插入成功，就可以根据这个唯一主键的存在与否判断是否为重复请求（也就是说，这里的扣减库存和插入去重表放在一个事务里，去重表中有一个字段为orderId，全局唯一不重复，用唯一索引进行约束，那么插入的时候判断这个去重表是否可以插入成功，如果不成功，那么数据库操作全部回滚）。</p><p>可以用redis分布式锁给这个订单上锁。以订单id为锁，不会影响其他线程来扣减库存，所以不影响性能。</p><p>针对这个订单，第一次肯定是可以去扣减库存的，但是第二次再接收到这个请求，那么就要返回已经成功了，不要再重复扣减。</p><p>对于<code>reduceStock()</code>这个方法最前面增加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止扣减库存时MQ正常重试时的不幂等</span></span><br><span class="line"><span class="comment">//以订单ID 加个缓存锁 防止程序短时间重试 重复扣减库存 不用解锁 自己超时</span></span><br><span class="line">Long orderNo = stockReduceList.get(<span class="number">0</span>).getOrderNo();</span><br><span class="line"><span class="keyword">boolean</span> lockResult = redisUtils.distributeLock(Constants.ORDER_RETRY_LOCK+orderNo.toString(),orderNo.toString(),<span class="number">300000</span>);</span><br><span class="line"><span class="keyword">if</span>(!lockResult)&#123;</span><br><span class="line">    <span class="comment">//锁定失败 重复提交 返回一个空map</span></span><br><span class="line">    <span class="keyword">return</span>  Collections.EMPTY_MAP;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long EXCUTE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**lua脚本  在redis中 lua脚本执行是串行的 原子的 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNLOCK_LUA=</span><br><span class="line">        <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then "</span> +</span><br><span class="line">                <span class="string">"   return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">distributeLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span></span>&#123;</span><br><span class="line">    String result = redisTemplate.execute((RedisCallback&lt;String&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        JedisCommands commands = (JedisCommands)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> commands.set(lockKey,requestId,SET_IF_NOT_EXIST,SET_WITH_EXPIRE_TIME,expireTime);<span class="comment">//一条命令实现setnx和setexpire这些操作，原子性</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 释放分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseDistributelock</span><span class="params">(String lockKey, String requestId)</span></span>&#123;</span><br><span class="line">    Object result  = redisTemplate.execute((RedisCallback&lt;Object&gt;) redisConnection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis)redisConnection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.eval(UNLOCK_LUA, Collections.singletonList(lockKey), Collections.singletonList(requestId));<span class="comment">//lua脚本中原子性实现：get查询和delete删除这两个操作</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (EXCUTE_SUCCESS.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里不需要我们主动去释放分布式锁，只要设置一个大于重试时间的过期时间即可。让它自己删除。</p><p>注意redis在集群下做分布式锁，最好要用Redission。这里如果用于集群，如何lua脚本在一个事务里同时操作多个key的时候，如果要保证这个事务生效，就需要保证这几个key都要在同一个节点上。但是，比如我们这里的两个key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK = <span class="string">"product:stock"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK_LOCK = <span class="string">"product:stock:lock"</span>;</span><br></pre></td></tr></table></figure><p>因为我们这里要同时对库存和锁定库存这两个key进行操作，需要放在一个事务内执行，不处理的话，一旦他们不在一个节点，那么事务就不会生效，解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK = <span class="string">"&#123;product:stock&#125;"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PRODUCT_STOCK_LOCK = <span class="string">"&#123;product:stock&#125;:lock"</span>;</span><br></pre></td></tr></table></figure><p>如果加上花括号，那么在进行计算hash值的时候，他们两就会是一样的，会被投放到同一个slot中，自然就保证了在同一个节点上。</p><h2>五、测试一下</h2><p><img src="http://bloghello.oursnail.cn/mama8-6.png" alt="image"></p><p><img src="http://bloghello.oursnail.cn/mama8-5.png" alt="image"></p><p><img src="http://bloghello.oursnail.cn/mama8-7.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、扣减库存问题分析&lt;/h2&gt;
&lt;p&gt;在提交订单的时候，要扣减库存，对于sql，是这么写的：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>07-交易工程(下)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/07-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/07-交易工程(下)/</id>
    <published>2019-04-17T02:41:41.622Z</published>
    <updated>2019-04-17T02:43:37.190Z</updated>
    
    <content type="html"><![CDATA[<h2>一、JEST客户端实现产品搜索接口</h2><p>上节完成了ELK平台的搭建，经过检验，确实可以实现全文检索的功能，这里在代码层面真正完成产品搜索等服务。</p><h3>controller层非常简单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/search"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;Product&gt;&gt; searchProduct(<span class="meta">@RequestBody</span> PageSearch pageSearch) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    ApiResult&lt;List&lt;Product&gt;&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"检索数据成功"</span>);</span><br><span class="line">    List&lt;Product&gt; data = productService.search(pageSearch.getPageNumber(),pageSearch.getPageSize(),pageSearch.getSearchContent());</span><br><span class="line">    result.setData(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>首先引入相关的依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全文搜索 这里用于商品搜索--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全文检索 工具类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里说一说jest。</p><p>Jest 是一个Java 版的ElasticSearch Http Rest 客户端，基于HttpClient 封装实现。</p><p>因为我们在上一节中用kibana可视化平台发送类似于这样的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /jdbc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;spu_name&quot;: &quot;蓝&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;require_field_match&quot;: false,</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;*&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是说，我们通过kibana给elasticsearch发送了一个restful的一个http get请求，那么现在的问题就是：如何用java代码来封装成这样一个请求。最先想到的肯定是用HttpClient，但是不够方便，正好jest这个工具类帮助我们实现了这个功能。</p><p>它就是在httpclient的基础上进行封装，将请求包装成上面那种形式发送给ES，ES给相应信息，它可以接收到，然后我们再解析即可。</p><p>要将这个客户端注册到spring中，service层中才能注入使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JestHttpClient <span class="title">getESClient</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">    factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">            .Builder(<span class="string">"http://"</span>+parameters.getEsHost())</span><br><span class="line">            .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">            .readTimeout(<span class="number">10000</span>)</span><br><span class="line">            .build());</span><br><span class="line">    JestHttpClient client = (JestHttpClient)factory.getObject();</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>具体来看看service层：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES全文检索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">search</span><span class="params">(<span class="keyword">int</span> pageNumber, <span class="keyword">int</span> pageSize, String searchContent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pageSize==<span class="number">0</span>) &#123;</span><br><span class="line">        pageSize = PAGE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pageNumber&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        pageNumber = PAGE_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//查询，是一种链式的风格，很容易拼接，就是拼接根据上面字段进行匹配，并且支持分页</span></span><br><span class="line">    searchSourceBuilder.query(QueryBuilders<span class="comment">//组合查询</span></span><br><span class="line">            .boolQuery()</span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">"spu_name"</span>,searchContent))<span class="comment">//must：必须匹配，相当于and；should：相当于or；must not：不匹配</span></span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">"status"</span>,<span class="number">1</span>)))<span class="comment">//第二个条件是必须是在架的商品</span></span><br><span class="line">            .from(pageNumber*pageSize)<span class="comment">//分页展示的起始位置</span></span><br><span class="line">            .size(pageSize);<span class="comment">//每页展示多少</span></span><br><span class="line">    <span class="comment">//这里就是高亮显示的设置</span></span><br><span class="line">    searchSourceBuilder.highlight()</span><br><span class="line">            .field(<span class="string">"spu_name"</span>)</span><br><span class="line">            .preTags(<span class="string">"&lt;em&gt;"</span>).postTags(<span class="string">"&lt;/em&gt;"</span>)</span><br><span class="line">            .fragmentSize(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//索引，根据索引来查的，我们在logstash中已经设置了这个索引名称</span></span><br><span class="line">    Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">            .addIndex(<span class="string">"jdbc"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//响应结果</span></span><br><span class="line">    SearchResult response = esClient.execute(search);</span><br><span class="line">    String jsonString = response.getJsonString();</span><br><span class="line">    <span class="comment">//json字符串的解析</span></span><br><span class="line">    List&lt;Product&gt; productList = parseResult(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> productList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>下面进行测试：</h3><p><img src="http://bloghello.oursnail.cn/mama7-1.png" alt="image"></p><h2>二、spring cache来实现分类的查询和缓存</h2><h3>controller接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/category"</span>)</span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;Category&gt;&gt; listCategory()&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;List&lt;Category&gt;&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"查询分类成功"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list =  productService.listCategory();</span><br><span class="line"></span><br><span class="line">    result.setData(list);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>其中service层：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span>(cacheNames = Constants.CACHE_PRODUCT_CATEGORY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">listCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> categoryMapper.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，这里添加了注解<code>@Cacheable</code>，这一行注解就可以将其查询出来的结果缓存到redis中，是不是特别地方便。不能忘记在启动类上添加注解开启缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure><p>这里要注意，分类是有层级的，那么展示所有层级的分类有两种方式，一种是直接在sql中实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Category_Column_List"</span> &gt;</span></span><br><span class="line">    p.id p_id, p.parent_id p_parent_id, p.name p_name, p.status p_status, p.sort_order p_sort_order,</span><br><span class="line">    p.create_time p_create_time, p.update_time p_update_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Children_Column_List"</span> &gt;</span></span><br><span class="line">    c.id c_id, c.parent_id c_parent_id, c.name c_name, c.status c_status, c.sort_order c_sort_order,</span><br><span class="line">    c.create_time c_create_time, c.update_time c_update_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"CategoryResultMap"</span> &gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Category_Column_List"</span> /&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Children_Column_List"</span> /&gt;</span></span><br><span class="line">    from t_category p</span><br><span class="line">    left join t_category c on c.parent_id = p.id</span><br><span class="line">    where p.parent_id = 0 and c.status = 1 and p.status=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一种就是在代码层面实现，思路很简单，就是用一个Set集合，先存放所有的一级分类，然后递归查询它下面的所有子分类。这个方式在电商项目中用到的。本节用的是sql方式直接去查询。</p><p><img src="http://bloghello.oursnail.cn/mama7-2.png" alt="image"></p><p>测试缓存是否生效：</p><p><img src="http://bloghello.oursnail.cn/mama7-3.png" alt="image"></p><h2>三、商品详情展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示商品详情，就是sku</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detail/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult&lt;Product&gt; <span class="title">productDetail</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ApiResult&lt;Product&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(<span class="number">200</span>,<span class="string">"获取商品详情成功"</span>);</span><br><span class="line"></span><br><span class="line">    Product product =  productService.productDetail(id);</span><br><span class="line"></span><br><span class="line">    result.setData(product);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在《交易工程上》中分析了一下，这一块是比较复杂的，因为涉及的东西比较多。这个产品下面有很多的sku，再将那张图拿过来：</p><p><img src="http://bloghello.oursnail.cn/mama5-9.png" alt="image"></p><p>对应着实际页面是：</p><p><img src="http://bloghello.oursnail.cn/mama7-4.png" alt="image"></p><p>那么，从表中我们可以看出，要完成这个详情页面，借助于三张表，那么就对应着三个bean。就是<code>product</code>里面包含着<code>ProductSku</code>，而<code>ProductSku</code>里面包含着<code>SkuPropertyOption</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectByPrimaryKeyWithSku" resultMap="ProductResultMapWithSku" parameterType="java.lang.Long" &gt;</span><br><span class="line">  <span class="keyword">select</span></span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Product_Column_List"</span> /&gt;,</span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Sku_Column_List"</span> /&gt;,</span><br><span class="line">  &lt;<span class="keyword">include</span> refid=<span class="string">"Sku_Option_Column_List"</span> /&gt;</span><br><span class="line">  <span class="keyword">from</span> t_product p</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> t_sku s <span class="keyword">on</span> s.spu_id = p.id</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> t_sku_property_option o <span class="keyword">on</span>  o.sku_id = s.id</span><br><span class="line">  <span class="keyword">where</span> p.id = #&#123;<span class="keyword">id</span>,jdbcType=<span class="built_in">BIGINT</span>&#125; <span class="keyword">and</span> s.enable_flag = <span class="number">1</span> <span class="keyword">and</span> o.enable_flag = <span class="number">1</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>库存工程当然还没有结束，交易这个功能将会持续集成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、JEST客户端实现产品搜索接口&lt;/h2&gt;
&lt;p&gt;上节完成了ELK平台的搭建，经过检验，确实可以实现全文检索的功能，这里在代码层面真正完成产品搜索等服务。&lt;/p&gt;
&lt;h3&gt;controller层非常简单：&lt;/h3&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>06-交易工程(中)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/06-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%AD)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/06-交易工程(中)/</id>
    <published>2019-04-17T02:41:22.091Z</published>
    <updated>2019-04-17T02:43:25.912Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>因为要完成产品的全文搜索这个功能，所以需要准备一下ES的环境。本节安装ELK。</p><p>ELK由Elasticsearch、Logstash和Kibana三部分组件组成。</p><p><img src="http://bloghello.oursnail.cn/mama6-2.png" alt="image"></p><p>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>简单来说，他是个全文搜索引擎，可以快速地储存、搜索和分析海量数据。</p><p>Logstash是一个完全开源的工具，它可以把分散的、多样化的日志日志，或者是其他数据源的数据信息进行收集、分析、处理，并将其存储供以后使用。</p><p>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</p><p>你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</p><p>你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。</p><p>Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><h2>一、安装ES</h2><h3>1.1 首先是安装JDK：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</span><br><span class="line"></span><br><span class="line">tar xzf jdk-8u141-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3>1.2 添加环境变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/opt/jdk1.8.0_141</span><br><span class="line">JAVA_JRE=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3>1.3 下载6.2.4版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.tar.gz</span><br><span class="line">tar -xzvf elasticsearch-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf elasticsearch-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line">mv elasticsearch-6.2.4 elasticsearch</span><br></pre></td></tr></table></figure><h3>1.4 配置sysctl.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#修改sysctl配置</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"> </span><br><span class="line">#添加如下配置</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"> </span><br><span class="line">#让配置生效</span><br><span class="line">sysctl -p</span><br><span class="line"> </span><br><span class="line">#查看配置的数目</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br></pre></td></tr></table></figure><h3>1.5 elasticsearch从5.0版本之后不允许root账户启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#添加用户</span><br><span class="line">adduser dev</span><br><span class="line"> </span><br><span class="line">#设定密码</span><br><span class="line">passwd dev</span><br><span class="line"> </span><br><span class="line">#添加权限</span><br><span class="line">chown -R dev /opt/elasticsearch</span><br><span class="line"> </span><br><span class="line">#切换用户</span><br><span class="line">su dev</span><br><span class="line"> </span><br><span class="line">#查看当前用户</span><br><span class="line">who am i</span><br><span class="line"> </span><br><span class="line">#启动</span><br><span class="line">./elasticsearch/bin/elasticsearch</span><br><span class="line"> </span><br><span class="line">#后台启动</span><br><span class="line">./elasticsearch/bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h3>1.6 配置limits.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"> </span><br><span class="line">把</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line"> </span><br><span class="line">改为</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line"> </span><br><span class="line">#切换用户</span><br><span class="line">su dev</span><br><span class="line"> </span><br><span class="line">#查看配置是否生效</span><br><span class="line">ulimit -Hn</span><br></pre></td></tr></table></figure><h3>1.7 配置所有用户访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><h3>1.8 添加一下内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3>1.9 重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep elastic</span><br><span class="line">kill -9 xxxx</span><br></pre></td></tr></table></figure><h3>1.10 测试：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200/</span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;MmiaBfA&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;zjX-q5PDRLyrWMy5TiBDkw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.2.4&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ccec39f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-04-12T20:37:28.497551Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就说明成功了。</p><h2>二、安装Kibana 6.2.4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mv kibana-6.2.4-linux-x86_64 kibana</span><br><span class="line"></span><br><span class="line">vim /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><h3>2.1 添加以下内容：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure><h3>2.2 切换到bin目录下，启动即可。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#不能关闭终端</span><br><span class="line">./kibana  </span><br><span class="line"></span><br><span class="line">#可关闭终端</span><br><span class="line">nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><h3>2.3 开放防火墙和安全组对应的这个端口</h3><p>浏览器访问：<a href="http://106.14.163.235:5601" target="_blank" rel="noopener">http://106.14.163.235:5601</a> 看到一个控制台页面就成功啦。</p><p><img src="http://bloghello.oursnail.cn/mama6-1.png" alt="image"></p><h3>2.4 关闭这个进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ps -ef|grep kibana</span><br><span class="line"> </span><br><span class="line">ps -ef|grep 5601</span><br><span class="line"> </span><br><span class="line">都找不到 </span><br><span class="line"> </span><br><span class="line">尝试 使用 fuser -n tcp 5601</span><br><span class="line"> </span><br><span class="line">kill -9  端口</span><br><span class="line"> </span><br><span class="line">启动即可 ./kibana</span><br><span class="line"></span><br><span class="line">或者去这个目录下的.out日志中可以看到看到它占用的pid</span><br></pre></td></tr></table></figure><h2>三、logstash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf logstash-6.2.4.tar.gz</span><br><span class="line"></span><br><span class="line"># 重命名</span><br><span class="line">mv logstash-6.2.4.tar.gz logstash</span><br><span class="line"></span><br><span class="line"># 进入</span><br><span class="line">cd logstash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个配置文件 我这里是mysqltones.conf</span><br><span class="line">input &#123;</span><br><span class="line">    stdin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    jdbc &#123;</span><br><span class="line">      jdbc_connection_string =&gt; &quot;jdbc:mysql://127.0.0.1:3306/mama-buy-trade&quot;</span><br><span class="line">      jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">      jdbc_password =&gt; &quot;22Daguozi@&quot;</span><br><span class="line"></span><br><span class="line">      jdbc_driver_library =&gt; &quot;/opt/logstash/mysql-connector-java-5.1.46-bin.jar&quot;</span><br><span class="line">      # the name of the driver class for mysql</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">      jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">      jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line"></span><br><span class="line">      # mysql文件, 也可以直接写SQL语句在此处，如下：</span><br><span class="line">      statement =&gt; &quot;SELECT * from t_product&quot;</span><br><span class="line">      # statement_filepath =&gt; &quot;/opt/logstash/conf/jdbc.sql&quot;</span><br><span class="line"></span><br><span class="line">      # 这里类似crontab,可以定制定时操作，比如每10分钟执行一次同步(分 时 天 月 年)</span><br><span class="line">      schedule =&gt; &quot;*/10 * * * *&quot;</span><br><span class="line">      type =&gt; &quot;jdbc&quot;</span><br><span class="line"></span><br><span class="line">      # 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中</span><br><span class="line">      record_last_run =&gt; &quot;true&quot;</span><br><span class="line"></span><br><span class="line">      # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.</span><br><span class="line">      use_column_value =&gt; &quot;true&quot;</span><br><span class="line"></span><br><span class="line">      # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键</span><br><span class="line">      tracking_column =&gt; &quot;id&quot;</span><br><span class="line"></span><br><span class="line">      last_run_metadata_path =&gt; &quot;/opt/logstash/conf/last_id&quot;</span><br><span class="line"></span><br><span class="line">      # 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录</span><br><span class="line">      clean_run =&gt; &quot;false&quot;</span><br><span class="line"></span><br><span class="line">      # 是否将 字段(column) 名称转小写</span><br><span class="line">      lowercase_column_names =&gt; &quot;false&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 此处我不做过滤处理,如果需要，也可参考elk安装那篇</span><br><span class="line">filter &#123;&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    # 输出到elasticsearch的配置</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">        index =&gt; &quot;jdbc&quot;</span><br><span class="line"></span><br><span class="line">        # 将&quot;_id&quot;的值设为mysql的autoid字段</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">        template_overwrite =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 这里输出调试，正式运行时可以注释掉</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">./bin/logstash -f ./mysqltones.conf</span><br></pre></td></tr></table></figure><p>看到这个就说明成功了：</p><p><img src="http://bloghello.oursnail.cn/mama6-3.png" alt="image"></p><h2>安装mysql数据库</h2><p>这一步要在执行logstash之前搞定，我的是阿里云centos7.3版本，mysql版本是5.7，安装过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 下载MySQL源安装包: </span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 安装MySQL源：</span><br><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm </span><br><span class="line"></span><br><span class="line"># 检查MySQL源安装情况： </span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"></span><br><span class="line"># 安装MySQL: </span><br><span class="line">yum install mysql-community-server</span><br><span class="line"></span><br><span class="line"># 启动MySQL: </span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"># 查看MySQL状态: </span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line"># 设置开机启动MySQL：</span><br><span class="line">systemctl enable mysqld </span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 查找并修改MySQL默认密码（注意密码要符合规范，否则会失败）：</span><br><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log </span><br><span class="line"></span><br><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">alter user root@localhost identified by &apos;你的新密码&apos;;</span><br><span class="line"></span><br><span class="line"># 远程连接测试添加远程账户：</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;用户&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"># 立即生效：</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 退出MySQL：</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 最后远程将数据给导入数据库</span><br></pre></td></tr></table></figure><h2>安装分词器</h2><p><code>ik_max_word</code>是分词比较细腻的一款，我们就用它来做分词，首先需要安装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 直接安装</span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip</span><br><span class="line"> </span><br><span class="line"># 重新启动ES</span><br><span class="line">ps -ef | grep elastic</span><br><span class="line">kill -9 xxxx</span><br><span class="line">su dev</span><br><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><p>对这个分词器在<code>kibana</code>中进行测试：</p><p><img src="http://bloghello.oursnail.cn/mama6-5.png" alt="image"></p><p>下面结合数据库模拟一下：</p><p><img src="http://bloghello.oursnail.cn/mama6-4.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因为要完成产品的全文搜索这个功能，所以需要准备一下ES的环境。本节安装ELK。&lt;/p&gt;
&lt;p&gt;ELK由Elasticsearch、Logstash和Kibana三部分组件组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bloghello.ou
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>05-交易工程(上)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/05-%E4%BA%A4%E6%98%93%E5%B7%A5%E7%A8%8B(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/05-交易工程(上)/</id>
    <published>2019-04-17T02:40:50.201Z</published>
    <updated>2019-04-17T02:41:15.964Z</updated>
    
    <content type="html"><![CDATA[<h2>一、前言</h2><p>回顾一下之前的内容，在单体应用中，我们可以用<code>select .. for update</code>，这样子可以在这个事务内锁定这一行数据，避免了并发问题。还可以用唯一约束来限制。对于分布式应用，必须要由一个全局锁来控制，比如ZK来实现的分布式锁。</p><p>对于分表之后，如何保证ID的不重复呢？一般我们可能会想到用UUID来实现嘛。但是UUID一般可以获取当前时间的毫秒数再加点随机数，但是在高并发下仍然可能重复。最重要的是，如果我要用这种UUID来生成分表的唯一ID的话，重复不谈，这种随机的字符串对于我们的innodb存储引擎的插入效率是很低的。所以我们生成的ID如果作为主键，最好有两种特性：<strong>分布式唯一和有序</strong>。</p><p>唯一性就不用说了，有序保证了对索引字段的插入的高效性。我们来具体看看ShardingJDBC的分布式ID生成策略是如何保证。</p><h2>二、ShardingJDBC的分布式ID生成策略</h2><h3>snowflake算法</h3><p><img src="http://bloghello.oursnail.cn/mama5-10.png" alt="image"></p><p>sharding-jdbc的分布式ID采用twitter开源的snowflake算法，不需要依赖任何第三方组件，这样其扩展性和维护性得到最大的简化；但是snowflake算法的缺陷（<strong>强依赖时间，如果时钟回拨，就会生成重复的ID</strong>）。</p><p>雪花算法是由Twitter公布的分布式主键生成算法，<strong>它能够保证不同进程主键的不重复性，以及相同进程主键的有序性</strong>。</p><p><strong>在同一个进程中</strong>，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。 同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。例如MySQL的Innodb存储引擎的主键。</p><p>使用雪花算法生成的主键，二进制表示形式包含4部分，从高位到低位分表为：1bit符号位、41bit时间戳位、10bit工作进程位以及12bit序列号位。</p><ul><li>符号位(1bit)</li></ul><p>预留的符号位，恒为零。</p><ul><li>时间戳位(41bit)</li></ul><p>41位的时间戳可以容纳的毫秒数是2的41次幂，一年所使用的毫秒数是：365 * 24 * 60 * 60 * 1000。通过计算可知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 41) / (365 * 24 * 60 * 60 * 1000L);</span><br></pre></td></tr></table></figure><p>结果约等于69.73年。<code>ShardingSphere</code>的雪花算法的时间纪元从2016年11月1日零点开始，可以使用到2086年，相信能满足绝大部分系统的要求。</p><ul><li>工作进程位(10bit)</li></ul><p>该标志在Java进程内是唯一的，如果是分布式应用部署应保证每个工作进程的id是不同的。该值默认为0，可通过调用静态方法<code>DefaultKeyGenerator.setWorkerId()</code>设置。</p><ul><li>序列号位(12bit)</li></ul><p>该序列是用来在同一个毫秒内生成不同的ID。如果在这个毫秒内生成的数量超过4096(2的12次幂)，那么生成器会等待到下个毫秒继续生成。</p><h3>时钟回拨</h3><p>服务器时钟回拨会导致产生重复序列，因此默认分布式主键生成器提供了一个最大容忍的时钟回拨毫秒数。 如果时钟回拨的时间超过最大容忍的毫秒数阈值，则程序报错；如果在可容忍的范围内，默认分布式主键生成器会等待时钟同步到最后一次主键生成的时间后再继续工作。 最大容忍的时钟回拨毫秒数的默认值为0，可通过调用静态方法<code>DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds()</code>设置。</p><p>雪花算法主键的详细结构见下图。</p><p><img src="http://bloghello.oursnail.cn/mama5-1.png" alt="image"></p><h2>三、ES</h2><p>对于商品搜索这种功能，为什么要用ES呢？</p><p>在数据库中可以用%这种模糊搜索，比如我要搜<code>世界你好</code>,那么我们可能可以这样:<code>like '%世界%'</code>来进行模糊搜索。但是如果我要搜<code>世好</code>咋办呢？另一方面，不能走索引，并且<strong>全表扫描</strong>，数据量大的时候就凉了。</p><p>ES基本原理是实现了一个分词匹配器，比如一句话叫<code>你好世界，我是JAVA</code>,它可能会将其分解为<code>你好</code>,<code>世界</code>,<code>我是</code>,<code>JAVA</code>这几个词，然后根据你输入的关键字来一一匹配，按照匹配度的高低排个序展示出来。</p><p>下面具体的安装下节再说。</p><h2>四、核心-商品表设计</h2><p>我们先来看看华为官网手机详情，比如我们看看<code>HUAWEI Mate 20</code>这一款（<strong>此处非广告…还没用过华为手机</strong>）：</p><p><img src="http://bloghello.oursnail.cn/mama5-2.png" alt="image"></p><p>这是一个真正的页面详情，主要的特点是针对不同的颜色、版本、套餐等条件会动态地改变价格。也就是说一组独立的属性决定了一个库存。这就是SKU（最小库存单位）。其实是非常复杂的，这里的手机算是比较简单的。</p><p>那么如何设计呢？</p><p>从页面上看，这个SKU有个名字：“HUAWEI Mate 20 6GB+64GB 全网通版（亮黑色）”，下面是若干属性。</p><p>首先整体来看一下交易数据库有几张表：</p><p><img src="http://bloghello.oursnail.cn/mama5-3.png" alt="image"></p><p>我们分解来看，从简单到复杂。首先是<code>t_brand</code>,<code>t_category</code>和<code>t_product</code>这三张表，分别是品牌，可能有华为，也可能有小米等等。现在假设就只有华为这一个牌子，下面有几种分类，我们可以看页面：</p><p><img src="http://bloghello.oursnail.cn/mama5-4.png" alt="image"></p><p>我们看到，有手机、笔记本、智能家居等几种分类。每种分类下面有好几种子分类，比如这里的荣耀、P系列、Mate系列等分类。</p><p>对于<code>t_brand</code>，十分简单，表设计如图：</p><p><img src="http://bloghello.oursnail.cn/mama5-5.png" alt="image"></p><p>对于<code>t_category</code>也简单，简单来说就是用一个<code>parent_id</code>来实现递归的自相关：</p><p><img src="http://bloghello.oursnail.cn/mama5-6.png" alt="image"></p><p><code>t_category</code>和<code>t_product</code>的关联就简单啦，就是一对多的关系嘛！</p><p><img src="http://bloghello.oursnail.cn/mama5-7.png" alt="image"></p><p>下面是比较麻烦一点的是属性，<code>t_property</code>是与<code>t_category</code>挂钩的，这样设计的原因是，在后台配置的时候，选完分类，比如这里的荣耀系列之后，我就可以配置对应的属性：颜色、容量、制式、套餐和定制这五种属性了。<code>t_property</code>与<code>t_property_option</code>就是一对多的关系了，比如颜色有沙滩金、极光蓝、幻夜黑以及魅力红。</p><p><img src="http://bloghello.oursnail.cn/mama5-8.png" alt="image"></p><p>ok，下面就是设计SKU了，简单来说，就是每种产品对应的版本，我们再看一眼第一幅图：</p><p><img src="http://bloghello.oursnail.cn/mama5-2.png" alt="image"></p><p>我们可以看到，首先这是一款具体的产品，然后呢，每款产品下有产品的名字、产品对应于各种不同的属性而显示不同的价格。</p><p>我们思考一下，我们已经拥有了<code>t_product</code>,<code>t_property</code>,<code>t_property_option</code>这三张表。其实，我们的页面，就是说SKU，其实就是这三张表的再组合。</p><p>首先一个产品，比如荣耀V10这一款产品，我首先有一个总的SKU来说明这个产品，我只需要一个简单的信息，比如<code>sku_name</code>和<code>sku_price</code>即可，因为我这款手机有很多的配置选项可以选择，那么就需要一张<code>t_sku_option</code>这张表来承载，就是<code>sku_id</code>,<code>property_id</code>和<code>property_option_id</code>这三者的结合，后面我们根据这三者才能真正的到库存系统去削减库存，然后下单。</p><p>比如我买的是荣耀V10 6G+128G 幻夜黑 官方标配 全网通 这一款，那么我对应到<code>t_sku</code>表的是第7条记录，对应到<code>t_sku_option</code>表的是有下面几条记录：</p><ul><li>7 1 3 表示: skuID=7,颜色为幻夜黑</li><li>7 2 7 表示：skuID=7,容量为6G+128G</li><li>7 3 8 表示：skuID=7,全网通标配版</li><li>7 4 11 表示：skuID=7,官方标配</li><li>…</li></ul><p>Ok，这样我就真正选择了一个具体的手机款式，后面就可以根据这些属性去扣减库存，下订单啦！</p><p>注1：下面这张图有个错误，就是下面个绿的箭头指向的应该是<code>t_sku</code>的第一行id=1的记录，懒得改了。</p><p>注2：上面举的例子与下面的数据库中数据是一致的，可以对比看一下。</p><p><img src="http://bloghello.oursnail.cn/mama5-9.png" alt="image"></p><p>这样，就完成了比较简单的产品表的设计了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;回顾一下之前的内容，在单体应用中，我们可以用&lt;code&gt;select .. for update&lt;/code&gt;，这样子可以在这个事务内锁定这一行数据，避免了并发问题。还可以用唯一约束来限制。对于分布式应用，必须要由一个全局锁来控制，比如ZK来实现
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>04-用户中心(下)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/04-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/04-用户中心(下)/</id>
    <published>2019-04-17T02:40:21.682Z</published>
    <updated>2019-04-17T02:40:57.647Z</updated>
    
    <content type="html"><![CDATA[<p>用户的注册和登陆是一个系统最基本的功能，在单系统中，用户的session管理是非常简单的，但是延申到分布式系统中的时候，就不一样了，需要做一个分布式session的管理。在注册这一块，用了Curator封装的分布式锁来控制用户登陆可能出现的用户名重复等问题。</p><h2>用户登陆问题</h2><p>分库分表如果按照业务字段（手机号码或者邮箱或者其他），耦合性太强，不好扩展。</p><p><strong>这里是直接按照全局唯一的UUID</strong>【<ins>基于twitter开源的snowflake算法，但是snowflake算法的缺陷（强依赖时间，如果时钟回拨，就会生成重复的ID</ins>）】<strong>来进行划分的</strong>，有利于系统的扩展。但是，我这里比如按照邮箱登陆，如何确定去哪一张表中去查询呢？</p><p>解决方案：<ins>需要建立一个映射表（关系），可以再系统启动时预先加载到redis中去，首先根据email找到对应的UUID，然后再根据这个UUID来查询。</ins></p><p>登陆因为要记录用户session，这里直接用spring session+redis来管理:</p><p>第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span> <span class="comment">//(maxInactiveIntervalInSeconds = 604800)//session超时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Parameters parameters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSessionStrategy <span class="title">httpSessionStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> HeaderHttpSessionStrategy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        JedisConnectionFactory connectionFactory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line"></span><br><span class="line">        String redisHost = parameters.getRedisNode().split(<span class="string">":"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> redisPort = Integer.valueOf(parameters.getRedisNode().split(<span class="string">":"</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        connectionFactory.setTimeout(<span class="number">2000</span>);</span><br><span class="line">        connectionFactory.setHostName(redisHost);</span><br><span class="line">        connectionFactory.setPort(redisPort);</span><br><span class="line"><span class="comment">//        connectionFactory.setPassword(parameters.getRedisAuth());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，这样子其实就配置好了，一开始我也云里雾里的，这是啥玩意？</p><p>ok，来spring session的官网(<a href="https://spring.io/projects/spring-session" target="_blank" rel="noopener">https://spring.io/projects/spring-session</a>)来看看把，我们来看看1.3.4GA版本的文档(<a href="https://docs.spring.io/spring-session/docs/1.3.4.RELEASE/reference/html5/#httpsession-rest" target="_blank" rel="noopener">https://docs.spring.io/spring-session/docs/1.3.4.RELEASE/reference/html5/#httpsession-rest</a>).</p><p>spring session可以存在很多介质中，比如我们的数据源，比如redis，甚至是mongodb等。但是我们常用的是存在redis中，结合redis的过期机制来做。</p><p>所以其实我们只要关心如何跟redis整合，以及restful接口。</p><p><img src="http://bloghello.oursnail.cn/mama4-1.png" alt="image"></p><p>那么我们就来看看文档吧！</p><p><img src="http://bloghello.oursnail.cn/mama4-2.png" alt="image"></p><p>好了，我们知道了它的基本原理，下面来看看是如何在restful接口中实现用户session的管理的：</p><p><img src="http://bloghello.oursnail.cn/mama4-3.png" alt="image"></p><p>也就是说要想在restful接口应用中用这种方式，直接告诉spring session:<code>return new HeaderHttpSessionStrategy();</code>即可。进入源码我们就会知道，它默认给这个header里面放置的一条类似于token的名字是<code>private String headerName = &quot;x-auth-token&quot;;</code>。</p><p>那么在用户登陆成功之后，到底存到是什么呢，先来看看响应数据的header里面是什么：</p><p><img src="http://bloghello.oursnail.cn/mama4-4.png" alt="image"></p><p>这一串数字正好可以跟redis中对应上，我们可以先来redis中看看到底在里面存储了啥玩意：</p><p><img src="http://bloghello.oursnail.cn/mama4-5.png" alt="image"></p><p>我们已经看到了想要看到的一串字符串，这里解释一下redis中存储的东西：</p><ul><li>spring:session是默认的Redis HttpSession前缀（redis中，我们常用’:’作为分割符）</li><li>每一个session都会有三个相关的key，第一个key(spring:session:sessions:37…)最为重要，它是一个HASH数据结构，将内存中的session信息序列化到了redis中。如本项目中用户信息,还有一些meta信息，如创建时间，最后访问时间等。</li><li>另外两个key，一个是<code>spring:session:expiration</code>，还有一个是<code>spring:session:sessions:expires</code>，前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，为什么要额外添加两个key来维持session过期的特性呢？redis清除过期key的行为是一个异步行为且是一个低优先级的行为，用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，包括我们自己在使用redis时也需要关注这一点。</li></ul><p>这样子，就可以用独立的redis来存储用户的信息，通过前端传来的header里面的token，就可以到redis拿出当前登陆用户的信息了。</p><p>OK，在解决了spring session的问题之后，下面就可以来实现登陆啦：</p><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult <span class="title">login</span><span class="params">(@RequestBody @Valid User user, HttpSession session)</span></span>&#123;</span><br><span class="line">    ApiResult&lt;UserElement&gt; result = <span class="keyword">new</span> ApiResult&lt;&gt;(Constants.RESP_STATUS_OK,<span class="string">"登录成功"</span>);</span><br><span class="line"></span><br><span class="line">    UserElement ue= userService.login(user);</span><br><span class="line">    <span class="keyword">if</span>(ue != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(Constants.REQUEST_USER_SESSION) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            session.setAttribute(Constants.REQUEST_USER_SESSION,ue);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setData(ue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就跟以前一样，将session直接存进去就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserElement <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    UserElement ue = <span class="keyword">null</span>;</span><br><span class="line">    User userExist = userMapper.selectByEmail(user.getEmail());</span><br><span class="line">    <span class="keyword">if</span>(userExist != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//对密码与数据库密码进行校验</span></span><br><span class="line">        <span class="keyword">boolean</span> result = passwordEncoder.matches(user.getPassword(),userExist.getPassword());</span><br><span class="line">        <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MamaBuyException(<span class="string">"密码错误"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//校验全部通过，登陆通过</span></span><br><span class="line">            ue = <span class="keyword">new</span> UserElement();</span><br><span class="line">            ue.setUserId(userExist.getId());</span><br><span class="line">            ue.setEmail(userExist.getEmail());</span><br><span class="line">            ue.setNickname(userExist.getNickname());</span><br><span class="line">            ue.setUuid(userExist.getUuid());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MamaBuyException(<span class="string">"用户不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>用户注册问题</h2><p>从技术角度出发，注册一个网站，再高并发的时候，有可能出现用户名重复这样的问题（虽然一般情况下不会出现这种问题），如何解决呢？</p><p>从数据库角度，对于单表，我可以用<code>select .. for update</code>悲观锁实现，或者用version这种乐观锁的思想。</p><p>更好的方法是将这个字段添加唯一索引，用数据库来保证不会重复。一旦插入重复，那么就会抛出异常，程序就可以捕获到。</p><p>但是，我们这里分表了，以上都是针对单表，第一种方案是锁表，不行，设置唯一索引是没有用。怎么办呢？</p><p>解决方案：用ZK做一个分布式锁。</p><p>首先准备一个ZK客户端，用的是Curator来连接我们的ZK：</p><p>具体啥意思，再ZK专题学习中已经详细描述过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Parameters parameters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getZkClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        CuratorFrameworkFactory.Builder builder= CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(parameters.getZkHost())</span><br><span class="line">                .connectionTimeoutMs(<span class="number">3000</span>)</span><br><span class="line">                .retryPolicy(<span class="keyword">new</span> RetryNTimes(<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">        CuratorFramework framework = builder.build();</span><br><span class="line">        framework.start();</span><br><span class="line">        <span class="keyword">return</span> framework;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册用一个分布式锁来控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InterProcessLock lock = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        lock = <span class="keyword">new</span> InterProcessMutex(zkClient, Constants.USER_REGISTER_DISTRIBUTE_LOCK_PATH);</span><br><span class="line">        <span class="keyword">boolean</span> retry = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.acquire(<span class="number">3000</span>, TimeUnit.MILLISECONDS))&#123;</span><br><span class="line">                <span class="comment">//查询重复用户</span></span><br><span class="line">                User repeatedUser = userMapper.selectByEmail(user.getEmail());</span><br><span class="line">                <span class="keyword">if</span>(repeatedUser!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span>  <span class="keyword">new</span> MamaBuyException(<span class="string">"用户邮箱重复"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">                user.setNickname(<span class="string">"码码购用户"</span>+user.getEmail());</span><br><span class="line">                userMapper.insertSelective(user);</span><br><span class="line">                <span class="comment">//跳出循环</span></span><br><span class="line">                retry = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//可以适当休息一会...也可以设置重复次数，不要无限循环</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (retry);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">"用户注册异常"</span>,e);</span><br><span class="line">        <span class="keyword">throw</span>  e;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lock != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.release();</span><br><span class="line">                log.info(user.getEmail()+Thread.currentThread().getName()+<span class="string">"释放锁"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路非常简单，就是先尝试上锁，即<code>acquire</code>，但是有可能失败，所以这里用一个超时时间，即<code>3000ms</code>之内上不了锁就失败，进入下一次循环。最后释放锁即可。</p><p>ok，这里要来说说ZK实现分布式锁了。这里用了开源客户端<code>Curator</code>，他对于实现分布式锁进行了封装，但是，我还是想了解一下它的实现原理：</p><p>每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。</p><p>也就是说，最小的那个节点就是Leader，进来判断是不是为那个节点，是的话就可以获取到锁，反之不行。</p><blockquote><p>为什么不能通过大家一起创建节点，如果谁成功了就算获取到了锁。 多个client创建一个同名的节点，如果节点谁创建成功那么表示获取到了锁，创建失败表示没有获取到锁。</p></blockquote><p>答：使用临时顺序节点可以保证获得锁的公平性，及谁先来谁就先得到锁，这种方式是随机获取锁，会造成无序和饥饿。</p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult <span class="title">register</span> <span class="params">(@RequestBody @Valid User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    userService.registerUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_OK,<span class="string">"注册成功"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户的注册和登陆是一个系统最基本的功能，在单系统中，用户的session管理是非常简单的，但是延申到分布式系统中的时候，就不一样了，需要做一个分布式session的管理。在注册这一块，用了Curator封装的分布式锁来控制用户登陆可能出现的用户名重复等问题。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>03-用户中心(上)</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/03-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/03-用户中心(上)/</id>
    <published>2019-04-17T02:39:56.351Z</published>
    <updated>2019-04-17T02:40:15.716Z</updated>
    
    <content type="html"><![CDATA[<h2>用户表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user_0`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user_0`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`uuid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>uuid是用于分表的依据，不能重复，至于如何生成以后再说。t_user_0建表成功之后，复制两份，做成三份的分表演示。放在一个单独的数据库<code>mama-buy-user</code>里.</p><h2>新建项目mama-buy-user-service</h2><p>新建boostrap.yml文件，这个文件的启动优先级比application.yml要高，主要是要去配置读取config的服务；然后注册到eureka上；下面弄一个<code>shardingJDBC</code>来做分库分表，最后是logback日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 高优先级启动</span><br><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: user-service # 与git仓库中的配置文件要一致</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      profile: dev # 这个结合name找到配置文件</span><br><span class="line">      discovery:</span><br><span class="line">        enabled: true</span><br><span class="line">        service-id: config-server #config服务名字</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://111.231.119.253:8761/eureka</span><br><span class="line">sharding:</span><br><span class="line">  jdbc:</span><br><span class="line">    datasource:</span><br><span class="line">      names: ds</span><br><span class="line">      ds:</span><br><span class="line">        name: user</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        filters: stat</span><br><span class="line">        maxActive: 20</span><br><span class="line">        initialSize: 1</span><br><span class="line">        maxWait: 60000</span><br><span class="line">        minIdle: 1</span><br><span class="line">        timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">        minEvictableIdleTimeMillis: 300000</span><br><span class="line">        validationQuery: select &apos;x&apos;</span><br><span class="line">        testWhileIdle: true</span><br><span class="line">        testOnBorrow: false</span><br><span class="line">        testOnReturn: false</span><br><span class="line">        poolPreparedStatements: true</span><br><span class="line">        maxOpenPreparedStatements: 20</span><br><span class="line">    config:</span><br><span class="line">      sharding:</span><br><span class="line">        tables:</span><br><span class="line">          t_user:</span><br><span class="line">            actual-data-nodes: ds.t_user_$&#123;0..2&#125; # 分的表名</span><br><span class="line">            key-generator-column-name: uuid #用雪花算法自动生成保证不重复</span><br><span class="line">            table-strategy:</span><br><span class="line">              inline:</span><br><span class="line">                sharding-column: uuid # 按照uuid进行分表</span><br><span class="line">                algorithm-expression: t_user_$&#123;uuid % 3&#125; # 分表的算法，取模</span><br><span class="line">#    instance:</span><br><span class="line">#      ip-address:</span><br><span class="line">#      prefer-ip-address: true</span><br><span class="line">logging:</span><br><span class="line">  config: classpath:logback.xml</span><br></pre></td></tr></table></figure><p>还有关于数据库账号密码等配置，可以单独放在<code>bootstrap-dev.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brokers: $&#123;kafka.brokers.host&#125;</span><br><span class="line">          zk-nodes: $&#123;zookeeper.host&#125;</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">      bindings:</span><br><span class="line">        input:</span><br><span class="line">          destination: dis-transation</span><br><span class="line">          group: point-group</span><br><span class="line">sharding:</span><br><span class="line">  jdbc:</span><br><span class="line">    datasource:</span><br><span class="line">      names: ds</span><br><span class="line">      ds:</span><br><span class="line">        url: jdbc:mysql://127.0.0.1:3306/mama-buy-user</span><br><span class="line">        username: root</span><br><span class="line">        password: root</span><br><span class="line">redis:</span><br><span class="line">  node: $&#123;redis.host&#125;</span><br><span class="line">zk:</span><br><span class="line">  host: $&#123;zookeeper.host&#125;</span><br></pre></td></tr></table></figure><p>一开始启动报错，可以将<code>session</code>相关的依赖先注释掉。</p><p>ok，根据逆向工程生成用户相关的文件。</p><p>上面在工程可以正常启动的情况下，增加一些类，比如全局异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        log.error(e.getMessage(),e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_INTERNAL_ERROR,<span class="string">"系统异常，请稍后再试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MamaBuyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">handleException</span><span class="params">(MamaBuyException e)</span></span>&#123;</span><br><span class="line">        log.error(e.getMessage(),e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(e.getStatusCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验，可能有多个参数校验有问题，每次都拿第一个即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">handleIllegalParamException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        List&lt;ObjectError&gt; errors = e.getBindingResult().getAllErrors();</span><br><span class="line">        String message = <span class="string">"参数不合法"</span>;</span><br><span class="line">        <span class="keyword">if</span> (errors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            message = errors.get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        ApiResult result = <span class="keyword">new</span> ApiResult(Constants.RESP_STATUS_BADREQUEST,message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有就是统一返回封装类，常量类等。都不再赘述，比较简单。后面要完成用户的注册等操作。</p><p><img src="http://bloghello.oursnail.cn/mama3-1.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;用户表&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>02-配置中心</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/02-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/02-配置中心/</id>
    <published>2019-04-17T02:39:27.979Z</published>
    <updated>2019-04-17T02:39:46.917Z</updated>
    
    <content type="html"><![CDATA[<p>由我们之前学习的消息总线，我们知道实现配置的自动刷新，需要用到<code>spring-cloud-config-server</code>，还需要一个消息中间件来实现发布订阅的功能从而实现自动的刷新，这里是用了<code>kafka</code>和<code>zookeeper</code>这两样。</p><p>所以，首先要准备好这两者的环境。</p><p>首先是安装jdk，然后安装zookeeper(我这里就建一个，不做集群)，最后安装kafka，依次启动。</p><p>在zookeeper的学习和spring cloud组件的学习后安装这些不是问题。对于 kafka的后台启动：</p><p>默认端口为9092：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./kafka-server-start.sh ../config/server.properties 1&gt;/dev/null  2&gt;&amp;1  &amp;</span><br></pre></td></tr></table></figure><p>对于zookeeper的启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start//启动，默认端口为2181</span><br><span class="line"></span><br><span class="line">./zkServer.sh status//查看状态</span><br></pre></td></tr></table></figure><p>zookeeper简单地修改一下配置文件中data文件夹即可。</p><p><img src="http://bloghello.oursnail.cn/mama2-1.png" alt="image"></p><p>ok，现在的环境已经准备好了，我全部部署在了腾讯云服务器上。下面我创建一个config server的工程，用来获取git的信息。所以先准备git文件：</p><p><img src="http://bloghello.oursnail.cn/mama2-2.png" alt="image"></p><p>至于里面的内容，比如我的用户服务，就是一个<code>user-service-dev.properties</code>文件（后面创建用户服务的时候，注册到eureka的名字就必须是user-service了，就是spring.application.name这个属性），里面我搞一个测试内容为:<code>user.name=sunweiguo</code>:</p><p><img src="http://bloghello.oursnail.cn/mama2-3.png" alt="image"></p><p>ok,下面新建一个<code>module</code>叫做<code>mama-buy-server-config</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.njupt.swg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mama-buy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mama-buy-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mama-buy-config-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>配置中心<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config 读取配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--消息总线  发布订阅--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--触发更新--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加注解，表示是<code>eureka</code>客户端和<code>server config</code>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MamaBuyConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MamaBuyConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最最重要的是配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/sunweiguo/spring-cloud-config-center.git</span><br><span class="line">          username: sunweiguo</span><br><span class="line">          password: *********</span><br><span class="line">          # 对应的文件夹</span><br><span class="line">          search-paths: gateway-config,user-service-config,trade-service-config,stock-service-config,common-config,key-generator-config,scheduler-config</span><br><span class="line">    bus:</span><br><span class="line">      trace:</span><br><span class="line">        enabled: true</span><br><span class="line">    stream:</span><br><span class="line">      kafka:</span><br><span class="line">        binder:</span><br><span class="line">          brokers: 111.231.119.253:9092 #这里是测试，所以连到了腾讯云服务器上，注意要开放端口才行</span><br><span class="line">          zk-nodes: 111.231.119.253:2181</span><br><span class="line">          auto-create-topics: true</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://111.231.119.253:8761/eureka #eureka已经被我以jar包形式部署上去了</span><br><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: false</span><br><span class="line">  instance:</span><br><span class="line">    ip-address: 111.231.119.253 # 告诉注册中心这个服务的公网ip，github可以真正访问到</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><p>ok，启动程序，如果没有报错的话：</p><p><img src="http://bloghello.oursnail.cn/mama2-4.png" alt="image"></p><p>看看注册到eureka上成功没有：</p><p><img src="http://bloghello.oursnail.cn/mama2-5.png" alt="image"></p><p>那么，我可以访问到位于git上面的内容吗？</p><p><img src="http://bloghello.oursnail.cn/mama2-6.png" alt="image"></p><p>看到这个就大功告成啦！下面我将这个服务放到服务器上去：</p><p>首先是更改ip地址，改为本地访问即可，安全组就可以把暴露出来的端口删除了：</p><p><img src="http://bloghello.oursnail.cn/mama2-9.png" alt="image"></p><p>将其打包部署到服务器:</p><p><img src="http://bloghello.oursnail.cn/mama2-10.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由我们之前学习的消息总线，我们知道实现配置的自动刷新，需要用到&lt;code&gt;spring-cloud-config-server&lt;/code&gt;，还需要一个消息中间件来实现发布订阅的功能从而实现自动的刷新，这里是用了&lt;code&gt;kafka&lt;/code&gt;和&lt;code&gt;zookee
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>01-聚合工程创建和注册中心</title>
    <link href="http://yoursite.com/2019/04/17/mama-action/01-%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%92%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://yoursite.com/2019/04/17/mama-action/01-聚合工程创建和注册中心/</id>
    <published>2019-04-17T02:32:12.187Z</published>
    <updated>2019-04-17T02:39:12.132Z</updated>
    
    <content type="html"><![CDATA[<h2>聚合工程</h2><p>第一步：创建一个springboot项目</p><p><img src="http://bloghello.oursnail.cn/mama1-1.png" alt="image"></p><p>第二步：填写相关信息</p><p><img src="http://bloghello.oursnail.cn/mama1-2.png" alt="image"></p><p>第三步：下一步</p><p><img src="http://bloghello.oursnail.cn/mama1-3.png" alt="image"></p><p>第四步：下一步</p><p><img src="http://bloghello.oursnail.cn/mama1-4.png" alt="image"></p><p>第五步:删除源文件以及其他一些没用的文件</p><p><img src="http://bloghello.oursnail.cn/mama1-5.png" alt="image"></p><p>第六步：修改springboot版本，声明版本，用<dependencymanagement>声明，不直接引入jar包（注意这里要指定一下打包方式为pom）</dependencymanagement></p><p><img src="http://bloghello.oursnail.cn/mama1-6.png" alt="image"></p><p>第七步：创建module，步骤跟上面一下</p><p><img src="http://bloghello.oursnail.cn/mama1-7.png" alt="image"></p><p>创建好之后，主要是修改pom文件：(打包方式指定为jar)</p><p><img src="http://bloghello.oursnail.cn/mama1-8.png" alt="image"></p><p>并且不要忘记在父亲里面要增加对儿子的管理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mama-buy-server-registry<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>注册中心</h2><p>正如上面创建的module里面引入的依赖，需要一个<code>spring-cloud-starter-eureka-server</code>，来做注册中心。</p><p>这就比较简单了，我这里只用一个单机的eureka来做。毕竟资源有限。</p><p>一个注解再加一个配置文件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: server-registry</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><p>能够将其正常启动起来，并且看到eureka的控制台页面即可。</p><p>ok，本地这个注册中心服务没问题之后，我要将其放到服务器上，所以我将其先打包为jar：</p><p><img src="http://bloghello.oursnail.cn/mama2-7.png" alt="image"></p><p>然后将其上传到服务器上，后台启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxx.jar ? 8761.out &amp;</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/mama2-11%20.png" alt="image"></p><p>所以前提是先装好jdk。为了本地测试，我关闭了服务器的防火墙，并且开放了8761这个端口对应的安全组,最后我可以用公网IP访问到这个服务：</p><p><img src="http://bloghello.oursnail.cn/mama2-8.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;聚合工程&lt;/h2&gt;
&lt;p&gt;第一步：创建一个springboot项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bloghello.oursnail.cn/mama1-1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;第二步：填写相关信息&lt;/p&gt;
&lt;p&gt;&lt;img 
      
    
    </summary>
    
    
      <category term="mama-action" scheme="http://yoursite.com/tags/mama-action/"/>
    
  </entry>
  
  <entry>
    <title>1、项目初始化相关基础知识</title>
    <link href="http://yoursite.com/2019/04/13/mmall-front/1%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/13/mmall-front/1、项目初始化相关基础知识/</id>
    <published>2019-04-13T05:35:03.320Z</published>
    <updated>2019-04-13T05:35:58.293Z</updated>
    
    <content type="html"><![CDATA[<p>主要用的是commonJS+webpack来实现一个商城前端，由于是后端入门，因此有必要先对用到的东西给进行简单的介绍。</p><a id="more"></a><h2>1.git仓库</h2><p>这一块就比较简单了，对于git的安装以及ssh key的配置就不再赘述了，只说明一下比较重要的几个命令。在github上创建好对应的项目之后，比如我这里的：<a href="https://github.com/sunweiguo/mmall-front-study" target="_blank" rel="noopener">https://github.com/sunweiguo/mmall-front-study</a></p><p>第一步：<code>git clone https://github.com/sunweiguo/mmall-front-study.git</code></p><p>这样，就拉到本地了。下面就可以在本地开发，先不说提交的事情，先说一说另一种情况。</p><p>比如我一开始本地自己新建一个文件夹叫做：<code>mmall-front=study</code>，在里面我新建一个文件叫做<code>test.html</code>。此时我想把这个目录下的文件也放到git仓库中如何做呢？</p><p>第一步git初始化这个目录：<code>git init</code></p><p>第二步就是将本地这个目录与远程仓库对应上：<code>git remote add origin https://github.com/sunweiguo/mmall-front-study.git</code></p><p>第三步是从远程的master分支拉取代码下来：<code>git pull origin master</code></p><p>下面就是提交目录下面的东西了，步骤都是一样的：</p><p>第一步：<code>git add .</code></p><p>第二步：<code>git commit -am 'xxx'</code></p><p>第三步：<code>git push (--set-upstram origin master)</code></p><p>这样就提交远程仓库成功了。</p><p>如果要切换分支，假设这个分支还不存在：<code>git checkout -b m_v1.0</code>，解释一下，<code>checkout</code>表示切换分支，<code>-b</code>表示这个分支还不存在，需要新建。</p><p>查看分支：<code>git b</code>.</p><h2>2.项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└─── view</span><br><span class="line">└─── page</span><br><span class="line">└─── service</span><br><span class="line">└─── util</span><br><span class="line">└─── image</span><br></pre></td></tr></table></figure><h2>3.commonJS</h2><p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。</p><p>根据<code>CommonJS</code>规范，一个单独的文件就是一个模块。</p><p>加载模块使用<code>require</code>方法，该方法读取一个文件并执行，最后返回文件内部的<code>exports</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addition.js</span></span><br><span class="line"></span><br><span class="line">exports.do = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123; <span class="keyword">return</span> a + b &#125;;</span><br></pre></td></tr></table></figure><p>上面的语句定义了一个加法模块，做法就是在<code>exports</code>对象上定义一个do方法，那就是供外部调用的方法。使用的时候，只要用<code>require</code>函数调用即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./addition'</span>);</span><br><span class="line"></span><br><span class="line">add.do(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p><h2>4.webpack</h2><p>感觉这一篇文章写的不错：<a href="https://segmentfault.com/a/1190000007238519" target="_blank" rel="noopener">前端工程化——Webpack入门使用</a>。</p><p>简单来说，就是一切都可以当成模块，<code>require</code>引入，不是<code>js</code>的通过<code>loader</code>解释一下，然后打包到一个<code>js</code>文件，<code>html</code>页面在<code>script</code>引入它。</p><h2>5.nodejs&amp;npm</h2><p>构建工具webpack依赖于nodejs环境，nodejs是一个基于谷歌的V8引擎的javascript运行环境，用的是一个事件驱动的、非阻塞的IO模型，适用于低运算高IO的场景，比如聊天室。</p><p>而NPM是什么呢？它其实一个资源库，拥有世界上最大的开源库，因此你想要用什么库基本都能找到。因此应用比较广泛。</p><h2>6.fiddler</h2><p>是一个抓包工具，也可以用作代理工具。代理是什么？就是中间多了一个代理商，帮助我们处理请求：</p><p><img src="http://bloghello.oursnail.cn/mmall-front-1-1.jpg" alt="image"></p><p>代理工具有什么用呢？比如我这里的mmall这个项目，本地开发都是<code>localhost:8080</code>去请求前端的资源，但是如果此时后端接口假如是<code>api.mmall.com</code>，那么就会产生跨域问题，此时，我们访问前端资源还用<code>localhost</code>这个域名，但是当访问后端接口的时候，就可以对这个<code>localhost</code>进行劫持，将其改为<code>api.mmall.com</code>，这样完美解决了开发环境中跨域问题。</p><h2>7.项目初始化</h2><p>首先在准备好上面工作之后，其实也没啥，就是git处理完成之后，在项目目录下执行<code>npm init</code>，会提示你输入一些信息，都是无关紧要的东西，比如我的：</p><p>我的环境都是在windows下，我的nodejs版本是8.11.1,出问题后面再改。npm版本是5.6.0。webpack版本是1.15.0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (mmall-front-study)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: mmall前端</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository: (https://github.com/sunweiguo/mmall-front-study.git)</span><br><span class="line">keywords:</span><br><span class="line">author: fossi</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to F:\git-code\mmall-front-study\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mmall-front-study&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;mmall前端&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https://github.com/sunweiguo/mmall-front-study.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;fossi&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/sunweiguo/mmall-front-study/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/sunweiguo/mmall-front-study#readme&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure><p>全局安装<code>webpack</code>：<code>npm install -g webpack@^1.15.0</code>。</p><p>我们可以试一下demo:</p><p>比如比较简单的情况，就是单一的文件。比如一个入口文件index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cats = <span class="built_in">require</span>(<span class="string">'./cats.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cats);</span><br></pre></td></tr></table></figure><p>这里引用的cats.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cats = [<span class="string">'dace'</span>,<span class="string">'henry'</span>,<span class="string">'martha'</span>];</span><br><span class="line"><span class="built_in">module</span>.exports = cats;</span><br></pre></td></tr></table></figure><p>此时，我们可以用命令行规定一个入口文件以及输出文件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack ./src/page/index/index.js ./dist/app.js</span><br></pre></td></tr></table></figure><p>顺利的话就会看到生成一个dist文件夹，里面有一个app.js文件，但是这种方式比较简单，不能增加一些其他高级的东西，因此推荐下一种方式。</p><p>我们设置一个配置文件叫做：<code>webpack.config.js</code>文件作为打包的入口文件。里面的内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'./src/page/index/index.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">path: <span class="string">'./dist'</span>,</span><br><span class="line">filename: <span class="string">'app.js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>命令行直接输入<code>webpack</code>即可。入门的使用到此结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要用的是commonJS+webpack来实现一个商城前端，由于是后端入门，因此有必要先对用到的东西给进行简单的介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mmall-front" scheme="http://yoursite.com/tags/mmall-front/"/>
    
  </entry>
  
  <entry>
    <title>13-抽象工厂模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/11-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/11-抽象工厂模式/</id>
    <published>2019-04-05T08:13:48.782Z</published>
    <updated>2019-04-05T08:14:41.769Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之抽象工厂模式，支持一个工厂生产多个产品。</p><a id="more"></a><h2>定义</h2><ul><li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口</li><li>无须指定他们具体的类</li><li>创建型</li><li>优点：无须关心创建细节、<strong>将一个系列的产品族统一到一起创建</strong></li><li>缺点：增加了系统的抽象性和理解难度；规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口</li><li>美的冰箱和海尔冰箱是同一个产品等级，但是美的冰箱和美的空调是同一个产品族</li></ul><p><img src="http://bloghello.oursnail.cn/pattern11-1.png" alt="image"></p><p>那么，工厂方法针对的是产品等级结构，就是竖着的。抽象工厂针对的是产品族，是横着的。</p><p>记法：<strong>不同工厂同一个产品是统一产品等级；同一个工厂不同产品集合是产品族</strong>。</p><p>产品族是针对某个工厂而言，这个工厂里面会有很多产品；</p><h2>例子</h2><p>场景：java教程包含两个东西：java视频+java手记；python教程包含两个东西：python视频+python手记</p><p>那么，java视频和java手记是一个产品族；</p><p>python视频和python手记是一个产品族；</p><p>java视频和python视频是同一个产品等级；</p><p>java手记和python手记是同一个产品等级；</p><p>OK，分别创建一个视频的抽象类<code>Vedio</code>和手记的抽象类<code>Article</code>（定义生产产品族的抽象类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vedio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别创建java视频类、java手记类、python视频类、python手记类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVedio</span> <span class="keyword">extends</span> <span class="title">Vedio</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产java视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产java手记"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVedio</span> <span class="keyword">extends</span> <span class="title">Vedio</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产python视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产python手记"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了具体的产品之后，先创建一个总工厂确定生产的产品族，然后分别创建java工厂和python工厂去实现它（每个工厂都生产这个产品族）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Vedio <span class="title">getVedio</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Article <span class="title">getArticle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vedio <span class="title">getVedio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVedio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vedio <span class="title">getVedio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVedio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CourseFactory javaCourseFactory = <span class="keyword">new</span> JavaCourseFactory();</span><br><span class="line">        CourseFactory pythonCourseFactory = <span class="keyword">new</span> PythonCourseFactory();</span><br><span class="line">        javaCourseFactory.getArticle().produce();</span><br><span class="line">        javaCourseFactory.getVedio().produce();</span><br><span class="line"></span><br><span class="line">        pythonCourseFactory.getArticle().produce();</span><br><span class="line">        pythonCourseFactory.getVedio().produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">生产java手记</span><br><span class="line">生产java视频</span><br><span class="line">生产python手记</span><br><span class="line">生产python视频</span><br></pre></td></tr></table></figure><p>我们可以分析一下，如果此时要增加前端的课程，那么就会非常方便，无非是增加一个前端视频类和前端手记类：<code>FEVedio</code>和<code>FEArticle</code>，然后创建一个<code>FECourseFactory</code>这个类来生产这两个产品即可。其实，就是说，抽象工厂模式对于产品族的扩展是非常友好的。结合具体实例，比如我这里有了海尔工厂和美的工厂，他们都生产冰箱和空调。此时我要新添加一个品牌，比如是松下工厂，那么就可以很方便地扩展松下的产品族。符合开闭原则。不需要动其他工厂以及这个工厂对应的产品族。</p><p>每个工厂只生产产品族，就是说美的的工厂只生产美的的空调和冰箱；海尔的工厂只生产海尔的空调和冰箱。那么，我要获取海尔冰箱，我不需要关心如何创建这个冰箱，我只需要知道海尔这个工厂即可。</p><p>但是，显然，<strong>这里我们需要固定住<code>CourseFactory</code>，这个相当于是抽象工厂，确定了一个工厂能生产的东西，比如美的工厂，现在<code>CourseFactory</code>只能规定去生产空调和冰箱，但是如果美的要扩张业务，要去生产洗衣机，那么就需要修改<code>CourseFactory</code>这个类，继而其他的工厂也都要去改变。</strong></p><p>对应到这里的场景，我的产品等级情况是：java视频和python视频是同一个产品等级；java手记和python手记是同一个产品等级；如果要规定，课程不仅需要有视频和手记，还需要有解答区，那么此时，就是需要修改<code>CourseFactory</code>，将会要修改很多地方。</p><p>所以，<strong>⭐抽象工厂适合于产品等级基本不变的场景</strong>（即每个工厂要生产什么基本先确定下来），对于增加产品族（多一家工厂加盟）是完全支持扩展的。</p><p><img src="http://bloghello.oursnail.cn/pattern11-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之抽象工厂模式，支持一个工厂生产多个产品。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>12-工厂方法模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/10-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/10-工厂方法模式/</id>
    <published>2019-04-05T08:08:04.763Z</published>
    <updated>2019-04-05T08:08:37.032Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之工厂方法模式。</p><a id="more"></a><h2>定义</h2><ul><li>定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行</li><li>创建型</li><li>优点：用户只用关心所需产品对应的工厂，无须关心创建细节；加入新产品符合开闭原则</li><li>美的冰箱和海尔冰箱是同一个产品等级，但是美的冰箱和美的空调是同一个产品族</li></ul><h2>例子</h2><p>其实用代码展示就会非常简单，业务场景还是上一节中的课程。</p><p>回顾一下简单工厂，它的原理是由一个工厂来负责对象的创建，不符合开闭原则。那么为了解决这个扩展性问题，所以升级为工厂方法模式。</p><p>首先定义一个接口或者抽象类，我这里定义一个抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoProduceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Video <span class="title">getVideo</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我要有一个创建java课程的工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVeidoFactory</span> <span class="keyword">extends</span> <span class="title">VideoProduceFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要创建python，那么我也创建一个工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVeidoFactory</span> <span class="keyword">extends</span> <span class="title">VideoProduceFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子，简单工厂中在工厂中创建对象的时机推迟到其子类中，有利于扩展性。但是我们会发现，一个工厂生产一种产品，这里是<code>Vedio</code>，那么对于实际场景，比如美的这个企业，它不仅生产各种空调，还有各种冰箱，那么此时就不能满足我们的需求了，这就是抽象工厂要实现的功能，下节再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之工厂方法模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>11-简单工厂模式</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/09-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/09-简单工厂模式/</id>
    <published>2019-04-05T07:00:15.342Z</published>
    <updated>2019-04-05T07:00:53.422Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习工厂模式之简单工厂模式。</p><a id="more"></a><h2>定义</h2><ul><li>由一个工厂对象决定创建出哪一种产品类的实例</li><li>创建型，但不属于23种设计模式</li></ul><h2>适用场景</h2><ul><li>工厂类负责创建的对象比较少</li><li>客户端只知道传入工厂的参数，对于如何创建对象不关心</li><li>只需要传入一个正确的参数，就可以获取你所需要的对象而无须知道其创建细节</li><li>缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，违背了开闭原则</li></ul><h2>例子</h2><p><img src="http://bloghello.oursnail.cn/uml9-1.png" alt="image"></p><p>场景：由很多的课程，比如有java和python的课程。具体的生产过程可以放在这个工厂里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建java课程..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建python课程..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoProduceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"java"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"python"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的测试类直接通过这个工厂来生产即可，不需要依赖具体的课程类了。</p><h2>改进</h2><p>上面的工厂方法是根据传入的名字来获取对应的实例的，一旦出现新增，是必然要修改这个工厂类的，并且传入的字符串还要做异常处理。这里用反射进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Video <span class="title">getVideoByClass</span><span class="params">(Class c)</span></span>&#123;</span><br><span class="line">    Video video = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        video = (Video) Class.forName(c.getName()).newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> video;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VideoProduceFactory factory = <span class="keyword">new</span> VideoProduceFactory();</span><br><span class="line">        Video video = factory.getVideoByClass(PythonVideo.class);</span><br><span class="line">        video.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>应用</h2><p>比如JDK中的<code>Calendar</code>这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是根据地区获取实例。</p><p><img src="http://bloghello.oursnail.cn/uml9-2.png" alt="image"></p><p>还有比较典型的是获取mysql驱动：Class.forName(“com.mysql.jdbc.driver”);</p><h2>总结</h2><p>简单工厂非常简单，但是缺点也显而易见，比如我这里新增一个算法课，那么就需要修改这个工厂类。不符合开闭原则。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习工厂模式之简单工厂模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>08-软件设计七大原则-组合聚合复用原则</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/08-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E7%BB%84%E5%90%88%E8%81%9A%E5%90%88%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/08-软件设计七大原则-组合聚合复用原则/</id>
    <published>2019-04-05T06:39:41.771Z</published>
    <updated>2019-04-05T06:40:08.111Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是组合聚合复用原则。</p><a id="more"></a><h2>定义</h2><ul><li>尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的</li><li>优点：可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少</li><li>继承使白箱复用；组合聚合是黑箱复用。</li><li>聚合：has-A;组合：contains-A；继承：is-A</li><li>聚合：电脑和U盘，两者可以独立</li><li>组合：国和家，没有国就没有家</li></ul><h2>例子</h2><p>首先一个场景，是获取数据库连接，定义一个获取连接的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mysql数据库连接。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我的产品需要获取这个数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String conn = <span class="keyword">super</span>.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"获取"</span>+conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果我可能要在多个数据之间切换呢？直接改不符合开闭原则，显然这个代码需要重构，将其用组合聚合来重构，定义一个抽象类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mysql数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlConnection</span> <span class="keyword">extends</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mysql数据库连接..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Oracle数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span> <span class="keyword">extends</span> <span class="title">NewDBConnection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Oracle数据库连接..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品获取数据库连接，这里是用了组合模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewProductDao</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NewDBConnection dbConnection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbConnection</span><span class="params">(NewDBConnection dbConnection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbConnection = dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String conn = dbConnection.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"获取"</span>+conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，就可以在应用层进行切换了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewProductDao productDao = <span class="keyword">new</span> NewProductDao();</span><br><span class="line">        productDao.setDbConnection(<span class="keyword">new</span> MysqlConnection());</span><br><span class="line">        productDao.addProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://bloghello.oursnail.cn/pattern8-1.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是组合聚合复用原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>07-软件设计七大原则-里氏替换原则</title>
    <link href="http://yoursite.com/2019/04/05/design-pattern/07-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/05/design-pattern/07-软件设计七大原则-里氏替换原则/</id>
    <published>2019-04-05T06:16:37.138Z</published>
    <updated>2019-04-05T06:17:06.511Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是里氏替换原则。</p><a id="more"></a><h2>定义</h2><ul><li>如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2时类型T1的子类型。</li><li>一个软件实体如果适用于一个父类的话，那么一定适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。（所以避免子类覆盖父类的方法，而是子类新增方法满足实现）</li><li>引申意义：子类可以扩展父类的功能，但不能改变父类原有的功能</li><li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的<strong>输入参数更宽松</strong></li><li>当子类的方法实现父类的方法时（重写/重载或实现实现抽象方法），方法的后置条件（即方法的输出/返回值）要<strong>比父类返回值更严格或相等</strong>。</li></ul><h2>例子1</h2><p>我们都知道，正方形是特殊的长方形，那么正方形是长方形的子类。但是对于某种场景，这种继承关系是不符合里氏替换原则的。我先定义一个长方形类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个正方形类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sideLength;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSideLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sideLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSideLength</span><span class="params">(<span class="keyword">int</span> sideLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sideLength = sideLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSideLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLength(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSideLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setLength(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，场景是判断宽度小于等于长度的话，宽度则加一。测试长方形是OK的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle rectangle)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(rectangle.getWidth() &lt;= rectangle.getLength())&#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"宽度为："</span>+rectangle.getWidth()+<span class="string">",长度为:"</span>+rectangle.getLength());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是测试正方形的时候，就会死循环了，因为一直都满足这个条件。也就是说正方形这个子类替换掉父类的长方形类时，程序出错了，不满足里氏替换原则了。</p><h2>例子2</h2><p>子类的方法入参要比父类的宽松。</p><p>定义一个基类Base：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HashMap map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base is running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个子类Child：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child hashmap is running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(Map map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child map is running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        child.hello(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果肯定打印： child hashmap is running…</p><p>但是如果我将子类重写的方法删除呢？结果是： base is running</p><p>如果反过来，父类入参是Map，子类重载的方法入参是HashMap,那么就会执行这个重载的方法。在业务开发中，这样子可能会造成业务逻辑的混乱。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是里氏替换原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019年，答辩顺利结束！</title>
    <link href="http://yoursite.com/2019/04/04/suibi/2019%E5%B9%B4%EF%BC%8C%E7%AD%94%E8%BE%A9%E9%A1%BA%E5%88%A9%E7%BB%93%E6%9D%9F%EF%BC%81/"/>
    <id>http://yoursite.com/2019/04/04/suibi/2019年，答辩顺利结束！/</id>
    <published>2019-04-04T13:42:55.174Z</published>
    <updated>2019-04-04T13:43:41.868Z</updated>
    
    <content type="html"><![CDATA[<p>2019.4.3答辩顺利结束，过程比我想象中更加顺利，内心十分开心。</p><a id="more"></a><p>本科四年+硕士两年半，终于要毕业了，2019.4.3号通过了最终的答辩，答辩结束现场的留念：</p><p><img src="http://bloghello.oursnail.cn/%E7%AD%94%E8%BE%A9%E7%BB%93%E6%9D%9F%E7%95%99%E5%BD%B1.jpg" alt="image"></p><p>感谢导师，感谢同门，感谢室友，感谢家人。（疑惑为什么大家都一致地丧脸，笑哭脸）</p><p>下面就是再整理整理材料，准备谢师宴以及最后的毕业典礼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019.4.3答辩顺利结束，过程比我想象中更加顺利，内心十分开心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>06-软件设计七大原则-迪米特原则</title>
    <link href="http://yoursite.com/2019/04/04/design-pattern/06-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/04/design-pattern/06-软件设计七大原则-迪米特原则/</id>
    <published>2019-04-04T13:09:46.105Z</published>
    <updated>2019-04-04T13:10:18.128Z</updated>
    
    <content type="html"><![CDATA[<p>本文来了解一下什么是迪米特原则。</p><a id="more"></a><h2>定义</h2><ul><li>一个对象应该对其他对象保持最少的了解，又叫最少知道原则。</li><li>尽量降低类与类之间的耦合</li><li>优点：降低类之间的耦合</li><li>强调：只和朋友交流，不和陌生人交流（朋友类：出现在这个类的成员变量上，方法输入，方法的返回类型；而出现在方法体内部的类不属于朋友类）</li></ul><p>可能对于最后的强调有点疑惑，下面举例说明。</p><h2>例子</h2><p>假设一个场景，是一个boss要技术主管查询一下线上上线的课程有哪些。</p><p>定义一个课程类，里面啥都不写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>定义一个boss类，让技术主管告诉他上线的课程的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(TeamLeader teamLeader)</span></span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            courses.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        teamLeader.getCourseNumber(courses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个TeamLeader类，用于查询数量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TeamLeader &#123;</span><br><span class="line">    public void getCourseNumber(List&lt;Course&gt; courses) &#123;</span><br><span class="line">        System.out.println(courses.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类里面打印即可。乍看没什么问题，但是我们分析一下：boss其实根本不需要管course类，我只要问技术主管即可，而技术主管通过一些手段去查询。但是我们现在的这个程序的问题是：boss类里面的方法体里面有了他根本就不需要关心的course类。关系是：</p><p><img src="http://bloghello.oursnail.cn/uml6-1.png" alt="image"></p><p>我们再来分析一下boss的朋友，根据上面强调的规则，teamleader为方法的入参，是boss的朋友，返回值为void的，不谈。没有成员变量。方法体里面的是course，不是boss的朋友，所以这个course我们是不是可以放在teamleader这个类里面呢？</p><p>将boss类改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(TeamLeader teamLeader)</span></span>&#123;</span><br><span class="line">        teamLeader.getCourseNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将统计的具体细节移动到teamleader里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCourseNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            courses.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(courses.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系变为：</p><p><img src="http://bloghello.oursnail.cn/uml6-2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来了解一下什么是迪米特原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>07-dubbo高可用相关</title>
    <link href="http://yoursite.com/2019/04/04/dubbo/07-dubbo%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/04/04/dubbo/07-dubbo高可用相关/</id>
    <published>2019-04-04T13:02:32.263Z</published>
    <updated>2019-04-04T13:04:06.906Z</updated>
    
    <content type="html"><![CDATA[<p>分布式系统对高可用比较讲究，本文来探讨探讨。</p><a id="more"></a><h2>一、zookeeper高可用</h2><p>通过实验可以发现，在正常调用服务之后，注册中心突然挂了，也不影响继续消费dubbo暴露出来的服务。</p><p>注册中心不是挂了吗，为什么还能继续调用服务呢？</p><p>原因是dubbo中做了健壮性处理，简单来说就是每个dubbo的消费方自己会缓存通讯的信息，即使注册中心挂了，通过这个缓存也可以找到对应的Provider继续消费。具体机制如下：</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p>并且之前也提过，dubbo支持直连，在消费方的注解中形如<code>@Reference(url=&quot;ip:port&quot;)</code>即可绕过注册中心直接连接到对应的服务去消费。 因此如果没有注册中心的情况下，也可以调用服务。</p><h2>二、负载均衡</h2><table><thead><tr><th>策略名称</th><th>策略描述</th></tr></thead><tbody><tr><td>Random</td><td>随机，按权重设置随机概率</td></tr><tr><td>RoundRobin</td><td>轮询，按公约后的权重设置轮询比率</td></tr><tr><td>LeastActive</td><td>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差</td></tr><tr><td>ConsistentHash</td><td>一致性hash，相同参数的请求总是发到同一个提供者</td></tr></tbody></table><p>对于<code>Random</code>,在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p>对于<code>RoundRobin</code>，存在慢的提供者累积请求的问题，比如某一台服务器比较慢，请求卡在这一台服务器上。</p><p>对于<code>LeastActive</code>,使慢的提供者收到更少请求，因为越慢的提供者的调用前后奇数差越大</p><p>配置：</p><ul><li>服务端服务级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>客户端服务级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>服务端方法级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class="line">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class="line">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure><ul><li>客户端方法级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class="line">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class="line">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure><p><strong>一般场景下，配置Provider端的负载均衡</strong>。值得注意的是，如果我们需要对随机或者轮询增加权重，则可以直接在控制台上实现，非常方便，如图：</p><p><img src="http://bloghello.oursnail.cn/dubbo7-1.jpg" alt="image"></p><h2>三、服务降级</h2><p>什么是服务降级？</p><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>比如某一台服务器上，有三个服务：用户服务、订单服务以及广告服务。当遇到流量激增的情况时，CPU百分百，内存百分百，整个服务器处于要崩溃的边缘，处理请求及其缓慢，此时我们必须要牺牲某些服务，释放出资源，比如我们可以选择将不是太核心的广告服务先停掉，保全其他核心的用户服务以及订单服务。广告服务降级后，可以直接返回一个简单的内容。（这里其实是指：<strong>消费方不再去远程调用这个广告服务了，直接返回一个结果给客户即可</strong>，这样，广告服务可以暂时将服务器资源让出来）</p><p>当然，还有另一种场景，也是类似，即服务调用失败，要么抛出异常要么超时，总之不能正常拿到结果了，此时我们也应该制定一个策略，使其不要返回错误，可以直接在消费方返回null或者默认的结果。这样就可以达到不重要的服务不可稳定时不会对调用方产生影响。</p><p>dubbo如何实现的呢？其实操作起来非常简单，就是在dubbo的控制台就可以完成设置了。我们来到消费者页面，</p><p><img src="http://bloghello.oursnail.cn/dubbo7-2.jpg" alt="image"></p><p>图中是第一个服务是订单服务，它要调用用户服务。那么如果我选择是的屏蔽，那么这个订单服务将停止调用所有其他的服务，直接返回空。</p><p><img src="http://bloghello.oursnail.cn/dubbo7-3.jpg" alt="image"></p><p>如果选择的是容错，那么订单服务在调用其他服务的时候发现其他服务报错或者超时，就返回空。</p><p><img src="http://bloghello.oursnail.cn/dubbo7-4.jpg" alt="image"></p><h2>四、服务容错</h2><p>在集群调用失败时，<code>Dubbo</code> 提供了多种容错方案，缺省为 <code>failover</code> 重试。</p><ul><li><code>Failover Cluster</code></li></ul><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Failfast Cluster</code></li></ul><p><strong>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</strong></p><ul><li><code>Failsafe Cluster</code></li></ul><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><ul><li><code>Failback Cluster</code></li></ul><p><strong>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</strong></p><ul><li><code>Forking Cluster</code></li></ul><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p><ul><li><code>Broadcast Cluster</code></li></ul><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p>集群模式配置按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2>五、Hystrix</h2><p>由于dubbo对于服务降级和容错等做的比较简单，因此在实际开发中，是用<code>Hystrix</code>来实现服务容错的。也是<code>spring cloud</code>中默认的服务容错组件。在<a href="http://fossi.oursnail.cn/2019/02/21/weather-for-spring-cloud/11.%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%B3%BB%E7%BB%9F-%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">11.天气预报系统-熔断机制</a>中对其进行了介绍和简单实用。核心就是<code>@HystrixCommand</code>这个注解，添加这个注解之后这个方法就被<code>hystrix</code>代理了，从而实现对这个方法的一个监控。基本的使用就不再赘述了，比较简单，就是添加依赖-开启<code>hystrix</code>-<code>HystrixCommand</code>这个即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式系统对高可用比较讲究，本文来探讨探讨。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>010-linked-list-cycle-ii</title>
    <link href="http://yoursite.com/2019/03/26/leetcode-classic/010-linked-list-cycle-ii/"/>
    <id>http://yoursite.com/2019/03/26/leetcode-classic/010-linked-list-cycle-ii/</id>
    <published>2019-03-26T06:57:10.687Z</published>
    <updated>2019-03-26T06:59:46.995Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode经典例题第十题，在第九题的基础上判断环的入口位置。</p><a id="more"></a><h2>题目描述</h2><p>Given a linked list, return the node where the cycle begins. If there is no cycle, returnnull.</p><p><img src="http://bloghello.oursnail.cn/leetcode10-1.jpg" alt="image"></p><p>Follow up:</p><p>Can you solve it without using extra space?</p><h2>解题思路</h2><ul><li>同linked-list-cycle一题，使用快慢指针方法，判定是否存在环，并记录两指针相遇位置(Z)；</li><li>将两指针分别放在链表头(X)和相遇位置(Z)，并改为相同速度推进，则两指针在环开始位置相遇(Y)</li></ul><p><img src="http://bloghello.oursnail.cn/leetcode10-2.jpg" alt="image"></p><p>X,Y,Z分别为链表起始位置，环开始位置和两指针相遇位置。</p><p>由于快指针速度为慢指针速度的两倍，那么这个慢指针最多走圆的一圈（这里想象极端情况，就是整个链表就是一个环，那么两个指针从圆的同一个地方出发，那么此时何时相遇呢？必然是慢指针正好才走一圈的时候，快指针走两圈追上来了）。</p><p>所以这里假设就是在Z相遇的，那么慢指针走的距离是a+b，很好计算。而快指针走的距离是2(a+b)，此时我们想象，假设慢指针走到了X和Z的中间的时候，快指针已经到Z了，那么下面再走的话，就是快指针从Z点出发围着圆绕几圈之后恰好在Z点和X相遇，因此快指针走过的距离是：</p><blockquote><p>2(a+b) = a+b+n*圆的周长 = a+b+n(b+c)</p></blockquote><p>此时a为:</p><blockquote><p>a = (n - 1) * b + n * c = (n - 1)(b + c) +c</p></blockquote><p>从公式上看，当一个指针从X出出发，走完a的距离之后，那么另一个指针从相遇点Z出发就会走(n-1)圈的环再加一个C的距离，此时正好在Y点相遇。</p><p>因此，一个指针从头出发，一个指针从相遇点出发，速度相同，相遇点就是环的入口节点。</p><h2>代码提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一快一慢两指针先找到相遇点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//万一没有环的话直接直接返回Null了</span></span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一个从head开始一步一步走，一个从相遇点开始一步一步走，再相遇就是环的入口位置</span></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode经典例题第十题，在第九题的基础上判断环的入口位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode经典" scheme="http://yoursite.com/tags/leetcode%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
</feed>
